{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { css } from 'glamor';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport { Paragraph, Heading } from '../../typography';\nimport { Overlay } from '../../overlay';\nimport { Button, IconButton } from '../../buttons';\nimport { withTheme } from '../../theme';\nimport { CrossIcon } from '../../icons';\nvar animationEasing = {\n  deceleration: \"cubic-bezier(0.0, 0.0, 0.2, 1)\",\n  acceleration: \"cubic-bezier(0.4, 0.0, 1, 1)\"\n};\nvar ANIMATION_DURATION = 200;\nvar openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n});\nvar closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n});\nvar animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: \"\".concat(openAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.deceleration, \" both\")\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: \"\".concat(closeAnimation, \" \").concat(ANIMATION_DURATION, \"ms \").concat(animationEasing.acceleration, \" both\")\n  }\n};\n\nvar Dialog = /*#__PURE__*/function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n\n  function Dialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"renderNode\", function (node, close) {\n      if (typeof node === 'function') {\n        return node({\n          close: close\n        });\n      }\n\n      return node;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderChildren\", function (close) {\n      var children = _this.props.children;\n\n      if (typeof children === 'function') {\n        return children({\n          close: close\n        });\n      }\n\n      if (typeof children === 'string') {\n        return React.createElement(Paragraph, null, children);\n      }\n\n      return children;\n    });\n\n    return _this;\n  }\n\n  _createClass(Dialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          title = _this$props.title,\n          width = _this$props.width,\n          intent = _this$props.intent,\n          isShown = _this$props.isShown,\n          topOffset = _this$props.topOffset,\n          sideOffset = _this$props.sideOffset,\n          hasHeader = _this$props.hasHeader,\n          header = _this$props.header,\n          hasClose = _this$props.hasClose,\n          hasFooter = _this$props.hasFooter,\n          footer = _this$props.footer,\n          hasCancel = _this$props.hasCancel,\n          onCloseComplete = _this$props.onCloseComplete,\n          onOpenComplete = _this$props.onOpenComplete,\n          onCancel = _this$props.onCancel,\n          onConfirm = _this$props.onConfirm,\n          confirmLabel = _this$props.confirmLabel,\n          isConfirmLoading = _this$props.isConfirmLoading,\n          isConfirmDisabled = _this$props.isConfirmDisabled,\n          cancelLabel = _this$props.cancelLabel,\n          shouldCloseOnOverlayClick = _this$props.shouldCloseOnOverlayClick,\n          shouldCloseOnEscapePress = _this$props.shouldCloseOnEscapePress,\n          _this$props$container = _this$props.containerProps,\n          containerProps = _this$props$container === void 0 ? {} : _this$props$container,\n          contentContainerProps = _this$props.contentContainerProps,\n          minHeightContent = _this$props.minHeightContent,\n          preventBodyScrolling = _this$props.preventBodyScrolling,\n          overlayProps = _this$props.overlayProps;\n      var sideOffsetWithUnit = Number.isInteger(sideOffset) ? \"\".concat(sideOffset, \"px\") : sideOffset;\n      var maxWidth = \"calc(100% - \".concat(sideOffsetWithUnit, \" * 2)\");\n      var topOffsetWithUnit = Number.isInteger(topOffset) ? \"\".concat(topOffset, \"px\") : topOffset;\n      var maxHeight = \"calc(100% - \".concat(topOffsetWithUnit, \" * 2)\");\n\n      var renderHeader = function renderHeader(close) {\n        if (!header && !hasHeader) {\n          return undefined;\n        }\n\n        return React.createElement(Pane, {\n          padding: 16,\n          flexShrink: 0,\n          borderBottom: \"muted\",\n          display: \"flex\",\n          alignItems: \"center\"\n        }, header ? _this2.renderNode(header, close) : React.createElement(React.Fragment, null, React.createElement(Heading, {\n          is: \"h4\",\n          size: 600,\n          flex: \"1\"\n        }, title), hasClose && React.createElement(IconButton, {\n          appearance: \"minimal\",\n          icon: CrossIcon,\n          onClick: function onClick() {\n            return onCancel(close);\n          }\n        })));\n      };\n\n      var renderFooter = function renderFooter(close) {\n        if (!footer && !hasFooter) {\n          return undefined;\n        }\n\n        return React.createElement(Pane, {\n          borderTop: \"muted\",\n          clearfix: true\n        }, React.createElement(Pane, {\n          padding: 16,\n          \"float\": \"right\"\n        }, footer ? _this2.renderNode(footer, close) : React.createElement(React.Fragment, null, hasCancel && React.createElement(Button, {\n          tabIndex: 0,\n          onClick: function onClick() {\n            return onCancel(close);\n          }\n        }, cancelLabel), React.createElement(Button, {\n          tabIndex: 0,\n          marginLeft: 8,\n          appearance: \"primary\",\n          isLoading: isConfirmLoading,\n          disabled: isConfirmDisabled,\n          onClick: function onClick() {\n            return onConfirm(close);\n          },\n          intent: intent\n        }, confirmLabel))));\n      };\n\n      return React.createElement(Overlay, {\n        isShown: isShown,\n        shouldCloseOnClick: shouldCloseOnOverlayClick,\n        shouldCloseOnEscapePress: shouldCloseOnEscapePress,\n        onExited: onCloseComplete,\n        onEntered: onOpenComplete,\n        containerProps: _objectSpread({\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'center'\n        }, overlayProps),\n        preventBodyScrolling: preventBodyScrolling\n      }, function (_ref) {\n        var state = _ref.state,\n            close = _ref.close;\n        return React.createElement(Pane, _extends({\n          role: \"dialog\",\n          backgroundColor: \"white\",\n          elevation: 4,\n          borderRadius: 8,\n          width: width,\n          maxWidth: maxWidth,\n          maxHeight: maxHeight,\n          marginX: sideOffsetWithUnit,\n          marginY: topOffsetWithUnit,\n          display: \"flex\",\n          flexDirection: \"column\",\n          css: animationStyles,\n          \"data-state\": state\n        }, containerProps), renderHeader(close), React.createElement(Pane, _extends({\n          \"data-state\": state,\n          display: \"flex\",\n          overflow: \"auto\",\n          padding: 16,\n          flexDirection: \"column\",\n          minHeight: minHeightContent\n        }, contentContainerProps), React.createElement(Pane, null, _this2.renderChildren(close))), renderFooter(close));\n      });\n    }\n  }]);\n\n  return Dialog;\n}(React.Component);\n\nDialog.displayName = \"Dialog\";\n\n_defineProperty(Dialog, \"propTypes\", {\n  /**\n   * Children can be a string, node or a function accepting `({ close })`.\n   * When passing a string, <Paragraph /> is used to wrap the string.\n   */\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n  /**\n   * The intent of the Dialog. Used for the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: PropTypes.bool,\n\n  /**\n   * Title of the Dialog. Titles should use Title Case.\n   */\n  title: PropTypes.node,\n\n  /**\n   * When true, the header with the title and close icon button is shown.\n   */\n  hasHeader: PropTypes.bool,\n\n  /**\n   * You can override the default header with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Header can either be a React node or a function accepting `({ close })`.\n   */\n  header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the footer with the cancel and confirm button is shown.\n   */\n  hasFooter: PropTypes.bool,\n\n  /**\n   * You can override the default footer with your own custom component.\n   *\n   * This is useful if you want to provide a custom header and footer, while\n   * also enabling your Dialog's content to scroll.\n   *\n   * Footer can either be a React node or a function accepting `({ close })`.\n   */\n  footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n  /**\n   * When true, the cancel button is shown.\n   */\n  hasCancel: PropTypes.bool,\n\n  /**\n   * When true, the close button is shown\n   */\n  hasClose: PropTypes.bool,\n\n  /**\n   * Function that will be called when the exit transition is complete.\n   */\n  onCloseComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the enter transition is complete.\n   */\n  onOpenComplete: PropTypes.func,\n\n  /**\n   * Function that will be called when the confirm button is clicked.\n   * This does not close the Dialog. A close function will be passed\n   * as a paramater you can use to close the dialog.\n   *\n   * `onConfirm={(close) => close()}`\n   */\n  onConfirm: PropTypes.func,\n\n  /**\n   * Label of the confirm button.\n   */\n  confirmLabel: PropTypes.string,\n\n  /**\n   * When true, the confirm button is set to loading.\n   */\n  isConfirmLoading: PropTypes.bool,\n\n  /**\n   * When true, the confirm button is set to disabled.\n   */\n  isConfirmDisabled: PropTypes.bool,\n\n  /**\n   * Function that will be called when the cancel button is clicked.\n   * This closes the Dialog by default.\n   *\n   * `onCancel={(close) => close()}`\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Label of the cancel button.\n   */\n  cancelLabel: PropTypes.string,\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick: PropTypes.bool,\n\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress: PropTypes.bool,\n\n  /**\n   * Width of the Dialog.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space above the dialog.\n   * This offset is also used at the bottom when there is not enough vertical\n   * space available on screen — and the dialog scrolls internally.\n   */\n  topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The space on the left/right sides of the dialog when there isn't enough\n   * horizontal space available on screen.\n   */\n  sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The min height of the body content.\n   * Makes it less weird when only showing little content.\n   */\n  minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Props that are passed to the dialog container.\n   */\n  containerProps: PropTypes.object,\n\n  /**\n   * Props that are passed to the content container.\n   */\n  contentContainerProps: PropTypes.object,\n\n  /**\n   * Whether or not to prevent scrolling in the outer body\n   */\n  preventBodyScrolling: PropTypes.bool,\n\n  /**\n   * Props that are passed to the Overlay component.\n   */\n  overlayProps: PropTypes.object\n});\n\n_defineProperty(Dialog, \"defaultProps\", {\n  isShown: false,\n  hasHeader: true,\n  hasClose: true,\n  hasFooter: true,\n  hasCancel: true,\n  intent: 'none',\n  width: 560,\n  topOffset: '12vmin',\n  sideOffset: '16px',\n  minHeightContent: 80,\n  confirmLabel: 'Confirm',\n  isConfirmLoading: false,\n  isConfirmDisabled: false,\n  cancelLabel: 'Cancel',\n  shouldCloseOnOverlayClick: true,\n  shouldCloseOnEscapePress: true,\n  onCancel: function onCancel(close) {\n    return close();\n  },\n  onConfirm: function onConfirm(close) {\n    return close();\n  },\n  preventBodyScrolling: false,\n  overlayProps: {}\n});\n\nexport default withTheme(Dialog);","map":{"version":3,"sources":["../../../src/dialog/src/Dialog.js"],"names":["animationEasing","deceleration","acceleration","ANIMATION_DURATION","openAnimation","from","transform","opacity","to","closeAnimation","animationStyles","animation","Dialog","React","Component","children","PropTypes","intent","isShown","title","hasHeader","header","hasFooter","footer","hasCancel","hasClose","onCloseComplete","onOpenComplete","onConfirm","confirmLabel","isConfirmLoading","isConfirmDisabled","onCancel","cancelLabel","shouldCloseOnOverlayClick","shouldCloseOnEscapePress","width","topOffset","sideOffset","minHeightContent","containerProps","contentContainerProps","preventBodyScrolling","overlayProps","object","close","node","sideOffsetWithUnit","Number","maxWidth","topOffsetWithUnit","maxHeight","renderHeader","renderFooter","display","alignItems","justifyContent","state","withTheme"],"mappings":"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","sourcesContent":["import { css } from 'glamor'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport { Paragraph, Heading } from '../../typography'\nimport { Overlay } from '../../overlay'\nimport { Button, IconButton } from '../../buttons'\nimport { withTheme } from '../../theme'\nimport { CrossIcon } from '../../icons'\n\nconst animationEasing = {\n  deceleration: `cubic-bezier(0.0, 0.0, 0.2, 1)`,\n  acceleration: `cubic-bezier(0.4, 0.0, 1, 1)`\n}\n\nconst ANIMATION_DURATION = 200\n\nconst openAnimation = css.keyframes('openAnimation', {\n  from: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  },\n  to: {\n    transform: 'scale(1)',\n    opacity: 1\n  }\n})\n\nconst closeAnimation = css.keyframes('closeAnimation', {\n  from: {\n    transform: 'scale(1)',\n    opacity: 1\n  },\n  to: {\n    transform: 'scale(0.8)',\n    opacity: 0\n  }\n})\n\nconst animationStyles = {\n  '&[data-state=\"entering\"], &[data-state=\"entered\"]': {\n    animation: `${openAnimation} ${ANIMATION_DURATION}ms ${animationEasing.deceleration} both`\n  },\n  '&[data-state=\"exiting\"]': {\n    animation: `${closeAnimation} ${ANIMATION_DURATION}ms ${animationEasing.acceleration} both`\n  }\n}\n\nclass Dialog extends React.Component {\n  static propTypes = {\n    /**\n     * Children can be a string, node or a function accepting `({ close })`.\n     * When passing a string, <Paragraph /> is used to wrap the string.\n     */\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n\n    /**\n     * The intent of the Dialog. Used for the button.\n     */\n    intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger'])\n      .isRequired,\n\n    /**\n     * When true, the dialog is shown.\n     */\n    isShown: PropTypes.bool,\n\n    /**\n     * Title of the Dialog. Titles should use Title Case.\n     */\n    title: PropTypes.node,\n\n    /**\n     * When true, the header with the title and close icon button is shown.\n     */\n    hasHeader: PropTypes.bool,\n\n    /**\n     * You can override the default header with your own custom component.\n     *\n     * This is useful if you want to provide a custom header and footer, while\n     * also enabling your Dialog's content to scroll.\n     *\n     * Header can either be a React node or a function accepting `({ close })`.\n     */\n    header: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n    /**\n     * When true, the footer with the cancel and confirm button is shown.\n     */\n    hasFooter: PropTypes.bool,\n\n    /**\n     * You can override the default footer with your own custom component.\n     *\n     * This is useful if you want to provide a custom header and footer, while\n     * also enabling your Dialog's content to scroll.\n     *\n     * Footer can either be a React node or a function accepting `({ close })`.\n     */\n    footer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n\n    /**\n     * When true, the cancel button is shown.\n     */\n    hasCancel: PropTypes.bool,\n\n    /**\n     * When true, the close button is shown\n     */\n    hasClose: PropTypes.bool,\n\n    /**\n     * Function that will be called when the exit transition is complete.\n     */\n    onCloseComplete: PropTypes.func,\n\n    /**\n     * Function that will be called when the enter transition is complete.\n     */\n    onOpenComplete: PropTypes.func,\n\n    /**\n     * Function that will be called when the confirm button is clicked.\n     * This does not close the Dialog. A close function will be passed\n     * as a paramater you can use to close the dialog.\n     *\n     * `onConfirm={(close) => close()}`\n     */\n    onConfirm: PropTypes.func,\n\n    /**\n     * Label of the confirm button.\n     */\n    confirmLabel: PropTypes.string,\n\n    /**\n     * When true, the confirm button is set to loading.\n     */\n    isConfirmLoading: PropTypes.bool,\n\n    /**\n     * When true, the confirm button is set to disabled.\n     */\n    isConfirmDisabled: PropTypes.bool,\n\n    /**\n     * Function that will be called when the cancel button is clicked.\n     * This closes the Dialog by default.\n     *\n     * `onCancel={(close) => close()}`\n     */\n    onCancel: PropTypes.func,\n\n    /**\n     * Label of the cancel button.\n     */\n    cancelLabel: PropTypes.string,\n\n    /**\n     * Boolean indicating if clicking the overlay should close the overlay.\n     */\n    shouldCloseOnOverlayClick: PropTypes.bool,\n\n    /**\n     * Boolean indicating if pressing the esc key should close the overlay.\n     */\n    shouldCloseOnEscapePress: PropTypes.bool,\n\n    /**\n     * Width of the Dialog.\n     */\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The space above the dialog.\n     * This offset is also used at the bottom when there is not enough vertical\n     * space available on screen — and the dialog scrolls internally.\n     */\n    topOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The space on the left/right sides of the dialog when there isn't enough\n     * horizontal space available on screen.\n     */\n    sideOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The min height of the body content.\n     * Makes it less weird when only showing little content.\n     */\n    minHeightContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * Props that are passed to the dialog container.\n     */\n    containerProps: PropTypes.object,\n\n    /**\n     * Props that are passed to the content container.\n     */\n    contentContainerProps: PropTypes.object,\n\n    /**\n     * Whether or not to prevent scrolling in the outer body\n     */\n    preventBodyScrolling: PropTypes.bool,\n\n    /**\n     * Props that are passed to the Overlay component.\n     */\n    overlayProps: PropTypes.object\n  }\n\n  static defaultProps = {\n    isShown: false,\n    hasHeader: true,\n    hasClose: true,\n    hasFooter: true,\n    hasCancel: true,\n    intent: 'none',\n    width: 560,\n    topOffset: '12vmin',\n    sideOffset: '16px',\n    minHeightContent: 80,\n    confirmLabel: 'Confirm',\n    isConfirmLoading: false,\n    isConfirmDisabled: false,\n    cancelLabel: 'Cancel',\n    shouldCloseOnOverlayClick: true,\n    shouldCloseOnEscapePress: true,\n    onCancel: close => close(),\n    onConfirm: close => close(),\n    preventBodyScrolling: false,\n    overlayProps: {}\n  }\n\n  renderNode = (node, close) => {\n    if (typeof node === 'function') {\n      return node({ close })\n    }\n\n    return node\n  }\n\n  renderChildren = close => {\n    const { children } = this.props\n\n    if (typeof children === 'function') {\n      return children({ close })\n    }\n\n    if (typeof children === 'string') {\n      return <Paragraph>{children}</Paragraph>\n    }\n\n    return children\n  }\n\n  render() {\n    const {\n      title,\n      width,\n      intent,\n      isShown,\n      topOffset,\n      sideOffset,\n      hasHeader,\n      header,\n      hasClose,\n      hasFooter,\n      footer,\n      hasCancel,\n      onCloseComplete,\n      onOpenComplete,\n      onCancel,\n      onConfirm,\n      confirmLabel,\n      isConfirmLoading,\n      isConfirmDisabled,\n      cancelLabel,\n      shouldCloseOnOverlayClick,\n      shouldCloseOnEscapePress,\n      containerProps = {},\n      contentContainerProps,\n      minHeightContent,\n      preventBodyScrolling,\n      overlayProps\n    } = this.props\n\n    const sideOffsetWithUnit = Number.isInteger(sideOffset)\n      ? `${sideOffset}px`\n      : sideOffset\n    const maxWidth = `calc(100% - ${sideOffsetWithUnit} * 2)`\n\n    const topOffsetWithUnit = Number.isInteger(topOffset)\n      ? `${topOffset}px`\n      : topOffset\n    const maxHeight = `calc(100% - ${topOffsetWithUnit} * 2)`\n\n    const renderHeader = close => {\n      if (!header && !hasHeader) {\n        return undefined\n      }\n\n      return (\n        <Pane\n          padding={16}\n          flexShrink={0}\n          borderBottom=\"muted\"\n          display=\"flex\"\n          alignItems=\"center\"\n        >\n          {header ? (\n            this.renderNode(header, close)\n          ) : (\n            <>\n              <Heading is=\"h4\" size={600} flex=\"1\">\n                {title}\n              </Heading>\n              {hasClose && (\n                <IconButton\n                  appearance=\"minimal\"\n                  icon={CrossIcon}\n                  onClick={() => onCancel(close)}\n                />\n              )}\n            </>\n          )}\n        </Pane>\n      )\n    }\n\n    const renderFooter = close => {\n      if (!footer && !hasFooter) {\n        return undefined\n      }\n\n      return (\n        <Pane borderTop=\"muted\" clearfix>\n          <Pane padding={16} float=\"right\">\n            {footer ? (\n              this.renderNode(footer, close)\n            ) : (\n              <>\n                {/* Cancel should be first to make sure focus gets on it first. */}\n                {hasCancel && (\n                  <Button tabIndex={0} onClick={() => onCancel(close)}>\n                    {cancelLabel}\n                  </Button>\n                )}\n\n                <Button\n                  tabIndex={0}\n                  marginLeft={8}\n                  appearance=\"primary\"\n                  isLoading={isConfirmLoading}\n                  disabled={isConfirmDisabled}\n                  onClick={() => onConfirm(close)}\n                  intent={intent}\n                >\n                  {confirmLabel}\n                </Button>\n              </>\n            )}\n          </Pane>\n        </Pane>\n      )\n    }\n\n    return (\n      <Overlay\n        isShown={isShown}\n        shouldCloseOnClick={shouldCloseOnOverlayClick}\n        shouldCloseOnEscapePress={shouldCloseOnEscapePress}\n        onExited={onCloseComplete}\n        onEntered={onOpenComplete}\n        containerProps={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          ...overlayProps\n        }}\n        preventBodyScrolling={preventBodyScrolling}\n      >\n        {({ state, close }) => (\n          <Pane\n            role=\"dialog\"\n            backgroundColor=\"white\"\n            elevation={4}\n            borderRadius={8}\n            width={width}\n            maxWidth={maxWidth}\n            maxHeight={maxHeight}\n            marginX={sideOffsetWithUnit}\n            marginY={topOffsetWithUnit}\n            display=\"flex\"\n            flexDirection=\"column\"\n            css={animationStyles}\n            data-state={state}\n            {...containerProps}\n          >\n            {renderHeader(close)}\n\n            <Pane\n              data-state={state}\n              display=\"flex\"\n              overflow=\"auto\"\n              padding={16}\n              flexDirection=\"column\"\n              minHeight={minHeightContent}\n              {...contentContainerProps}\n            >\n              <Pane>{this.renderChildren(close)}</Pane>\n            </Pane>\n\n            {renderFooter(close)}\n          </Pane>\n        )}\n      </Overlay>\n    )\n  }\n}\n\nexport default withTheme(Dialog)\n"]},"metadata":{},"sourceType":"module"}