{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport arrify from 'arrify';\nimport { Popover } from '../../popover';\nimport { Position } from '../../constants';\nimport { SearchIcon } from '../../icons';\nimport SelectMenuContent from './SelectMenuContent';\nimport OptionShapePropType from './OptionShapePropType';\nimport SelectedPropType from './SelectedPropType';\n\nvar SelectMenu = /*#__PURE__*/function (_PureComponent) {\n  _inherits(SelectMenu, _PureComponent);\n\n  function SelectMenu() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SelectMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SelectMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getDetailView\", function (close, detailView) {\n      if (typeof detailView === 'function') {\n        return {\n          detailView: detailView({\n            close: close\n          })\n        };\n      }\n\n      if (detailView) {\n        return {\n          detailView: detailView\n        };\n      }\n\n      return {};\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getEmptyView\", function (close, emptyView) {\n      if (typeof emptyView === 'function') {\n        return {\n          emptyView: emptyView({\n            close: close\n          })\n        };\n      }\n\n      if (emptyView) {\n        return {\n          emptyView: emptyView\n        };\n      }\n\n      return {};\n    });\n\n    return _this;\n  }\n\n  _createClass(SelectMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          title = _this$props.title,\n          width = _this$props.width,\n          height = _this$props.height,\n          options = _this$props.options,\n          selected = _this$props.selected,\n          position = _this$props.position,\n          hasTitle = _this$props.hasTitle,\n          hasFilter = _this$props.hasFilter,\n          filterPlaceholder = _this$props.filterPlaceholder,\n          filterIcon = _this$props.filterIcon,\n          detailView = _this$props.detailView,\n          emptyView = _this$props.emptyView,\n          titleView = _this$props.titleView,\n          isMultiSelect = _this$props.isMultiSelect,\n          closeOnSelect = _this$props.closeOnSelect,\n          props = _objectWithoutProperties(_this$props, [\"title\", \"width\", \"height\", \"options\", \"selected\", \"position\", \"hasTitle\", \"hasFilter\", \"filterPlaceholder\", \"filterIcon\", \"detailView\", \"emptyView\", \"titleView\", \"isMultiSelect\", \"closeOnSelect\"]);\n\n      return React.createElement(Popover, _extends({\n        minWidth: width,\n        position: position,\n        minHeight: height,\n        content: function content(_ref) {\n          var close = _ref.close;\n          return React.createElement(SelectMenuContent, _extends({\n            width: width,\n            height: height,\n            options: options,\n            title: title,\n            hasFilter: hasFilter,\n            filterPlaceholder: filterPlaceholder,\n            filterIcon: filterIcon,\n            hasTitle: hasTitle,\n            isMultiSelect: isMultiSelect,\n            titleView: titleView,\n            listProps: {\n              onSelect: function onSelect(item) {\n                _this2.props.onSelect(item);\n              },\n              onDeselect: function onDeselect(item) {\n                _this2.props.onDeselect(item);\n              },\n              onFilterChange: _this2.props.onFilterChange,\n              selected: arrify(selected)\n            },\n            close: close\n          }, _this2.getDetailView(close, detailView), _this2.getEmptyView(close, emptyView), {\n            closeOnSelect: closeOnSelect\n          }));\n        }\n      }, props));\n    }\n  }]);\n\n  return SelectMenu;\n}(PureComponent);\n\nSelectMenu.displayName = \"SelectMenu\";\n\n_defineProperty(SelectMenu, \"propTypes\", {\n  /**\n   * The title of the Select Menu.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The width of the Select Menu.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The height of the Select Menu.\n   */\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The options to show in the menu.\n   * [{ label: String, value: String | Number }]\n   */\n  options: PropTypes.arrayOf(OptionShapePropType),\n\n  /**\n   * Function that is called when an option is selected.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called when an option is deselected.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * The selected value/values.\n   */\n  selected: SelectedPropType,\n\n  /**\n   * When true, multi select is accounted for.\n   */\n  isMultiSelect: PropTypes.bool,\n\n  /**\n   * When true, show the title.\n   */\n  hasTitle: PropTypes.bool,\n\n  /**\n   * When true, show the filter.\n   */\n  hasFilter: PropTypes.bool,\n\n  /**\n   * The placeholder of the search filter.\n   */\n  filterPlaceholder: PropTypes.string,\n\n  /**\n   * The icon of the search filter.\n   */\n  filterIcon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.string]),\n\n  /**\n   * Function that is called as the onChange() event for the filter.\n   */\n  onFilterChange: PropTypes.func,\n\n  /**\n   * The position of the Select Menu.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered on the right side of the Select Menu to give additional\n   * information when an option is selected.\n   */\n  detailView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered in the header section of the Select Menu to customize\n   * the header.\n   */\n  titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /**\n   * Can be a function that returns a node, or a node itself, that is\n   * rendered instead of the options list when there are no options.\n   */\n  emptyView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n  /*\n   * When true, menu closes on option selection.\n   */\n  closeOnSelect: PropTypes.bool\n});\n\n_defineProperty(SelectMenu, \"defaultProps\", {\n  onSelect: function onSelect() {},\n  onDeselect: function onDeselect() {},\n  width: 240,\n  height: 248,\n  position: Position.BOTTOM_LEFT,\n  isMultiSelect: false,\n  filterPlaceholder: 'Filter...',\n  filterIcon: SearchIcon,\n  closeOnSelect: false\n});\n\nexport { SelectMenu as default };","map":{"version":3,"sources":["../../../src/select-menu/src/SelectMenu.js"],"names":["SelectMenu","PureComponent","title","PropTypes","width","height","options","onSelect","onDeselect","selected","isMultiSelect","hasTitle","hasFilter","filterPlaceholder","filterIcon","onFilterChange","position","Position","detailView","titleView","emptyView","closeOnSelect","bool","close","props","arrify"],"mappings":";;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,QAAA,QAAA,iBAAA;AACA,SAAA,UAAA,QAAA,aAAA;AACA,OAAA,iBAAA,MAAA,qBAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;;IAEqBA,U;;;;;;;;;;;;;;;;oEA0HH,UAAA,KAAA,EAAA,UAAA,EAAuB;AACrC,UAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;AACpC,eAAO;AACLkB,UAAAA,UAAU,EAAEA,UAAU,CAAC;AAAEK,YAAAA,KAAK,EAALA;AAAF,WAAD;AADjB,SAAP;AAGD;;AAED,UAAA,UAAA,EAAgB;AACd,eAAO;AAAEL,UAAAA,UAAU,EAAVA;AAAF,SAAP;AACD;;AAED,aAAA,EAAA;;;mEAGa,UAAA,KAAA,EAAA,SAAA,EAAsB;AACnC,UAAI,OAAA,SAAA,KAAJ,UAAA,EAAqC;AACnC,eAAO;AACLE,UAAAA,SAAS,EAAEA,SAAS,CAAC;AAAEG,YAAAA,KAAK,EAALA;AAAF,WAAD;AADf,SAAP;AAGD;;AAED,UAAA,SAAA,EAAe;AACb,eAAO;AAAEH,UAAAA,SAAS,EAATA;AAAF,SAAP;AACD;;AAED,aAAA,EAAA;;;;;;;;6BAGO;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,WAAA,GAkBH,KAlBG,KAAA;AAAA,UAELlB,KAFK,GAAA,WAAA,CAAA,KAAA;AAAA,UAGLE,KAHK,GAAA,WAAA,CAAA,KAAA;AAAA,UAILC,MAJK,GAAA,WAAA,CAAA,MAAA;AAAA,UAKLC,OALK,GAAA,WAAA,CAAA,OAAA;AAAA,UAMLG,QANK,GAAA,WAAA,CAAA,QAAA;AAAA,UAOLO,QAPK,GAAA,WAAA,CAAA,QAAA;AAAA,UAQLL,QARK,GAAA,WAAA,CAAA,QAAA;AAAA,UASLC,SATK,GAAA,WAAA,CAAA,SAAA;AAAA,UAULC,iBAVK,GAAA,WAAA,CAAA,iBAAA;AAAA,UAWLC,UAXK,GAAA,WAAA,CAAA,UAAA;AAAA,UAYLI,UAZK,GAAA,WAAA,CAAA,UAAA;AAAA,UAaLE,SAbK,GAAA,WAAA,CAAA,SAAA;AAAA,UAcLD,SAdK,GAAA,WAAA,CAAA,SAAA;AAAA,UAeLT,aAfK,GAAA,WAAA,CAAA,aAAA;AAAA,UAgBLW,aAhBK,GAAA,WAAA,CAAA,aAAA;AAAA,UAiBFG,KAjBE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,mBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,WAAA,EAAA,WAAA,EAAA,eAAA,EAAA,eAAA,CAAA,CAAA;;AAoBP,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AACE,QAAA,QAAQ,EADV,KAAA;AAEE,QAAA,QAAQ,EAFV,QAAA;AAGE,QAAA,SAAS,EAHX,MAAA;AAIE,QAAA,OAAO,EAAE,SAAA,OAAA,CAAA,IAAA,EAAA;AAAA,cAAGD,KAAH,GAAA,IAAA,CAAA,KAAA;AAAA,iBACP,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AACE,YAAA,KAAK,EADP,KAAA;AAEE,YAAA,MAAM,EAFR,MAAA;AAGE,YAAA,OAAO,EAHT,OAAA;AAIE,YAAA,KAAK,EAJP,KAAA;AAKE,YAAA,SAAS,EALX,SAAA;AAME,YAAA,iBAAiB,EANnB,iBAAA;AAOE,YAAA,UAAU,EAPZ,UAAA;AAQE,YAAA,QAAQ,EARV,QAAA;AASE,YAAA,aAAa,EATf,aAAA;AAUE,YAAA,SAAS,EAVX,SAAA;AAWE,YAAA,SAAS,EAAE;AACThB,cAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,IAAA,EAAQ;AAChB,gBAAA,MAAI,CAAJ,KAAA,CAAA,QAAA,CAAA,IAAA;AAFO,eAAA;AAITC,cAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,IAAA,EAAQ;AAClB,gBAAA,MAAI,CAAJ,KAAA,CAAA,UAAA,CAAA,IAAA;AALO,eAAA;AAOTO,cAAAA,cAAc,EAAE,MAAI,CAAJ,KAAA,CAPP,cAAA;AAQTN,cAAAA,QAAQ,EAAEgB,MAAM,CAAA,QAAA;AARP,aAXb;AAqBE,YAAA,KAAK,EAAEF;AArBT,WAAA,EAsBM,MAAI,CAAJ,aAAA,CAAA,KAAA,EAtBN,UAsBM,CAtBN,EAuBM,MAAI,CAAJ,YAAA,CAAA,KAAA,EAvBN,SAuBM,CAvBN,EAAA;AAwBE,YAAA,aAAa,EAAEF;AAxBjB,WAAA,CAAA,CADO;AAAA;AAJX,OAAA,EADF,KACE,CAAA,CADF;AAoCD;;;;EA9MqCpB,a;;AAAnBD,U,YAAAA,G,YAAAA;;gBAAAA,U,eACA;AACjB;;;AAGAE,EAAAA,KAAK,EAAEC,SAAS,CAJC,MAAA;;AAMjB;;;AAGAC,EAAAA,KAAK,EAAED,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CATtC,MASU,CAApBA,CATU;;AAWjB;;;AAGAE,EAAAA,MAAM,EAAEF,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAdvC,MAcW,CAApBA,CAdS;;AAgBjB;;;;AAIAG,EAAAA,OAAO,EAAEH,SAAS,CAATA,OAAAA,CApBQ,mBAoBRA,CApBQ;;AAsBjB;;;AAGAI,EAAAA,QAAQ,EAAEJ,SAAS,CAzBF,IAAA;;AA2BjB;;;AAGAK,EAAAA,UAAU,EAAEL,SAAS,CA9BJ,IAAA;;AAgCjB;;;AAGAM,EAAAA,QAAQ,EAnCS,gBAAA;;AAqCjB;;;AAGAC,EAAAA,aAAa,EAAEP,SAAS,CAxCP,IAAA;;AA0CjB;;;AAGAQ,EAAAA,QAAQ,EAAER,SAAS,CA7CF,IAAA;;AA+CjB;;;AAGAS,EAAAA,SAAS,EAAET,SAAS,CAlDH,IAAA;;AAoDjB;;;AAGAU,EAAAA,iBAAiB,EAAEV,SAAS,CAvDX,MAAA;;AAyDjB;;;AAGAW,EAAAA,UAAU,EAAEX,SAAS,CAATA,SAAAA,CAAoB,CAC9BA,SAAS,CADqB,WAAA,EAE9BA,SAAS,CAFqB,OAAA,EAG9BA,SAAS,CA/DM,MA4De,CAApBA,CA5DK;;AAkEjB;;;AAGAY,EAAAA,cAAc,EAAEZ,SAAS,CArER,IAAA;;AAuEjB;;;AAGAa,EAAAA,QAAQ,EAAEb,SAAS,CAATA,KAAAA,CAAgB,CACxBc,QAAQ,CADgB,GAAA,EAExBA,QAAQ,CAFgB,QAAA,EAGxBA,QAAQ,CAHgB,SAAA,EAIxBA,QAAQ,CAJgB,MAAA,EAKxBA,QAAQ,CALgB,WAAA,EAMxBA,QAAQ,CAhFO,YA0ES,CAAhBd,CA1EO;;AAmFjB;;;;;AAKAe,EAAAA,UAAU,EAAEf,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CAxFzC,IAwFe,CAApBA,CAxFK;;AA0FjB;;;;;AAKAgB,EAAAA,SAAS,EAAEhB,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CA/FxC,IA+Fc,CAApBA,CA/FM;;AAiGjB;;;;AAIAiB,EAAAA,SAAS,EAAEjB,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,IAAA,EAAiBA,SAAS,CArGxC,IAqGc,CAApBA,CArGM;;AAuGjB;;;AAGAkB,EAAAA,aAAa,EAAElB,SAAS,CAACmB;AA1GR,C;;gBADAtB,U,kBA8GG;AACpBO,EAAAA,QAAQ,EAAE,SAAA,QAAA,GAAM,CADI,CAAA;AAEpBC,EAAAA,UAAU,EAAE,SAAA,UAAA,GAAM,CAFE,CAAA;AAGpBJ,EAAAA,KAAK,EAHe,GAAA;AAIpBC,EAAAA,MAAM,EAJc,GAAA;AAKpBW,EAAAA,QAAQ,EAAEC,QAAQ,CALE,WAAA;AAMpBP,EAAAA,aAAa,EANO,KAAA;AAOpBG,EAAAA,iBAAiB,EAPG,WAAA;AAQpBC,EAAAA,UAAU,EARU,UAAA;AASpBO,EAAAA,aAAa,EAAE;AATK,C;;SA9GHrB,U","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport arrify from 'arrify'\nimport { Popover } from '../../popover'\nimport { Position } from '../../constants'\nimport { SearchIcon } from '../../icons'\nimport SelectMenuContent from './SelectMenuContent'\nimport OptionShapePropType from './OptionShapePropType'\nimport SelectedPropType from './SelectedPropType'\n\nexport default class SelectMenu extends PureComponent {\n  static propTypes = {\n    /**\n     * The title of the Select Menu.\n     */\n    title: PropTypes.string,\n\n    /**\n     * The width of the Select Menu.\n     */\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The height of the Select Menu.\n     */\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * The options to show in the menu.\n     * [{ label: String, value: String | Number }]\n     */\n    options: PropTypes.arrayOf(OptionShapePropType),\n\n    /**\n     * Function that is called when an option is selected.\n     */\n    onSelect: PropTypes.func,\n\n    /**\n     * Function that is called when an option is deselected.\n     */\n    onDeselect: PropTypes.func,\n\n    /**\n     * The selected value/values.\n     */\n    selected: SelectedPropType,\n\n    /**\n     * When true, multi select is accounted for.\n     */\n    isMultiSelect: PropTypes.bool,\n\n    /**\n     * When true, show the title.\n     */\n    hasTitle: PropTypes.bool,\n\n    /**\n     * When true, show the filter.\n     */\n    hasFilter: PropTypes.bool,\n\n    /**\n     * The placeholder of the search filter.\n     */\n    filterPlaceholder: PropTypes.string,\n\n    /**\n     * The icon of the search filter.\n     */\n    filterIcon: PropTypes.oneOfType([\n      PropTypes.elementType,\n      PropTypes.element,\n      PropTypes.string\n    ]),\n\n    /**\n     * Function that is called as the onChange() event for the filter.\n     */\n    onFilterChange: PropTypes.func,\n\n    /**\n     * The position of the Select Menu.\n     */\n    position: PropTypes.oneOf([\n      Position.TOP,\n      Position.TOP_LEFT,\n      Position.TOP_RIGHT,\n      Position.BOTTOM,\n      Position.BOTTOM_LEFT,\n      Position.BOTTOM_RIGHT\n    ]),\n\n    /**\n     * Can be a function that returns a node, or a node itself, that is\n     * rendered on the right side of the Select Menu to give additional\n     * information when an option is selected.\n     */\n    detailView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n    /**\n     * Can be a function that returns a node, or a node itself, that is\n     * rendered in the header section of the Select Menu to customize\n     * the header.\n     */\n    titleView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n    /**\n     * Can be a function that returns a node, or a node itself, that is\n     * rendered instead of the options list when there are no options.\n     */\n    emptyView: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n\n    /*\n     * When true, menu closes on option selection.\n     */\n    closeOnSelect: PropTypes.bool\n  }\n\n  static defaultProps = {\n    onSelect: () => {},\n    onDeselect: () => {},\n    width: 240,\n    height: 248,\n    position: Position.BOTTOM_LEFT,\n    isMultiSelect: false,\n    filterPlaceholder: 'Filter...',\n    filterIcon: SearchIcon,\n    closeOnSelect: false\n  }\n\n  getDetailView = (close, detailView) => {\n    if (typeof detailView === 'function') {\n      return {\n        detailView: detailView({ close })\n      }\n    }\n\n    if (detailView) {\n      return { detailView }\n    }\n\n    return {}\n  }\n\n  getEmptyView = (close, emptyView) => {\n    if (typeof emptyView === 'function') {\n      return {\n        emptyView: emptyView({ close })\n      }\n    }\n\n    if (emptyView) {\n      return { emptyView }\n    }\n\n    return {}\n  }\n\n  render() {\n    const {\n      title,\n      width,\n      height,\n      options,\n      selected,\n      position,\n      hasTitle,\n      hasFilter,\n      filterPlaceholder,\n      filterIcon,\n      detailView,\n      emptyView,\n      titleView,\n      isMultiSelect,\n      closeOnSelect,\n      ...props\n    } = this.props\n\n    return (\n      <Popover\n        minWidth={width}\n        position={position}\n        minHeight={height}\n        content={({ close }) => (\n          <SelectMenuContent\n            width={width}\n            height={height}\n            options={options}\n            title={title}\n            hasFilter={hasFilter}\n            filterPlaceholder={filterPlaceholder}\n            filterIcon={filterIcon}\n            hasTitle={hasTitle}\n            isMultiSelect={isMultiSelect}\n            titleView={titleView}\n            listProps={{\n              onSelect: item => {\n                this.props.onSelect(item)\n              },\n              onDeselect: item => {\n                this.props.onDeselect(item)\n              },\n              onFilterChange: this.props.onFilterChange,\n              selected: arrify(selected)\n            }}\n            close={close}\n            {...this.getDetailView(close, detailView)}\n            {...this.getEmptyView(close, emptyView)}\n            closeOnSelect={closeOnSelect}\n          />\n        )}\n        {...props}\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}