{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { withTheme } from '../../theme';\n\nvar Paragraph = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Paragraph, _PureComponent);\n\n  function Paragraph() {\n    _classCallCheck(this, Paragraph);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Paragraph).apply(this, arguments));\n  }\n\n  _createClass(Paragraph, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          size = _this$props.size,\n          color = _this$props.color,\n          fontFamily = _this$props.fontFamily,\n          marginTop = _this$props.marginTop,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"size\", \"color\", \"fontFamily\", \"marginTop\"]);\n\n      var _theme$getParagraphSt = theme.getParagraphStyle(size),\n          defaultMarginTop = _theme$getParagraphSt.marginTop,\n          textStyle = _objectWithoutProperties(_theme$getParagraphSt, [\"marginTop\"]);\n\n      var finalMarginTop = marginTop === 'default' ? defaultMarginTop : marginTop;\n      return React.createElement(Box, _extends({\n        is: \"p\",\n        color: theme.getTextColor(color),\n        fontFamily: theme.getFontFamily(fontFamily),\n        marginTop: finalMarginTop || 0,\n        marginBottom: 0\n      }, textStyle, props));\n    }\n  }]);\n\n  return Paragraph;\n}(PureComponent);\n\nParagraph.displayName = \"Paragraph\";\n\n_defineProperty(Paragraph, \"propTypes\", _objectSpread({}, Box.propTypes, {\n  /**\n   * Size of the text style.\n   * Can be: 300, 400, 500.\n   */\n  size: PropTypes.oneOf([300, 400, 500]).isRequired,\n\n  /**\n   * Font family.\n   * Can be: `ui`, `display` or `mono` or a custom font family.\n   */\n  fontFamily: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(Paragraph, \"defaultProps\", {\n  size: 400,\n  color: 'default',\n  fontFamily: 'ui'\n});\n\nexport default withTheme(Paragraph);","map":{"version":3,"sources":["../../../src/typography/src/Paragraph.js"],"names":["Paragraph","PureComponent","Box","propTypes","size","PropTypes","isRequired","fontFamily","theme","color","marginTop","props","defaultMarginTop","textStyle","finalMarginTop","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,GAAA,MAAA,QAAA;AACA,SAAA,SAAA,QAAA,aAAA;;IAEMA,S;;;;;;;;;;;6BA+BK;AAAA,UAAA,WAAA,GACyD,KADzD,KAAA;AAAA,UACCQ,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQJ,IADR,GAAA,WAAA,CAAA,IAAA;AAAA,UACcK,KADd,GAAA,WAAA,CAAA,KAAA;AAAA,UACqBF,UADrB,GAAA,WAAA,CAAA,UAAA;AAAA,UACiCG,SADjC,GAAA,WAAA,CAAA,SAAA;AAAA,UAC+CC,KAD/C,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA,YAAA,EAAA,WAAA,CAAA,CAAA;;AAAA,UAAA,qBAAA,GAMHH,KAAK,CAALA,iBAAAA,CANG,IAMHA,CANG;AAAA,UAIMI,gBAJN,GAAA,qBAAA,CAAA,SAAA;AAAA,UAKFC,SALE,GAAA,wBAAA,CAAA,qBAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAQP,UAAMC,cAAc,GAClBJ,SAAS,KAATA,SAAAA,GAAAA,gBAAAA,GADF,SAAA;AAGA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,QAAA,EAAE,EADJ,GAAA;AAEE,QAAA,KAAK,EAAEF,KAAK,CAALA,YAAAA,CAFT,KAESA,CAFT;AAGE,QAAA,UAAU,EAAEA,KAAK,CAALA,aAAAA,CAHd,UAGcA,CAHd;AAIE,QAAA,SAAS,EAAEM,cAAc,IAJ3B,CAAA;AAKE,QAAA,YAAY,EAAE;AALhB,OAAA,EAAA,SAAA,EADF,KACE,CAAA,CADF;AAWD;;;;EArDqBb,a;;AAAlBD,S,YAAAA,G,WAAAA;;gBAAAA,S,iCAKCE,GAAG,CAACC,S;AAEP;;;;AAIAC,EAAAA,IAAI,EAAEC,SAAS,CAATA,KAAAA,CAAgB,CAAA,GAAA,EAAA,GAAA,EAAhBA,GAAgB,CAAhBA,EAAiCC,U;;AAEvC;;;;AAIAC,EAAAA,UAAU,EAAEF,SAAS,CAATA,MAAAA,CAAiBC,U;;AAE7B;;;AAGAE,EAAAA,KAAK,EAAEH,SAAS,CAATA,MAAAA,CAAiBC;;;gBAtBtBN,S,kBAyBkB;AACpBI,EAAAA,IAAI,EADgB,GAAA;AAEpBK,EAAAA,KAAK,EAFe,SAAA;AAGpBF,EAAAA,UAAU,EAAE;AAHQ,C;;AA+BxB,eAAeQ,SAAS,CAAxB,SAAwB,CAAxB","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { withTheme } from '../../theme'\n\nclass Paragraph extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Box component as the base.\n     */\n    ...Box.propTypes,\n\n    /**\n     * Size of the text style.\n     * Can be: 300, 400, 500.\n     */\n    size: PropTypes.oneOf([300, 400, 500]).isRequired,\n\n    /**\n     * Font family.\n     * Can be: `ui`, `display` or `mono` or a custom font family.\n     */\n    fontFamily: PropTypes.string.isRequired,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired\n  }\n\n  static defaultProps = {\n    size: 400,\n    color: 'default',\n    fontFamily: 'ui'\n  }\n\n  render() {\n    const { theme, size, color, fontFamily, marginTop, ...props } = this.props\n\n    const {\n      marginTop: defaultMarginTop,\n      ...textStyle\n    } = theme.getParagraphStyle(size)\n\n    const finalMarginTop =\n      marginTop === 'default' ? defaultMarginTop : marginTop\n\n    return (\n      <Box\n        is=\"p\"\n        color={theme.getTextColor(color)}\n        fontFamily={theme.getFontFamily(fontFamily)}\n        marginTop={finalMarginTop || 0}\n        marginBottom={0}\n        {...textStyle}\n        {...props}\n      />\n    )\n  }\n}\n\nexport default withTheme(Paragraph)\n"]},"metadata":{},"sourceType":"module"}