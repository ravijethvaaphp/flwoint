{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Strong } from '../../typography';\nimport { withTheme } from '../../theme';\n\nvar Badge = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Badge, _PureComponent);\n\n  function Badge() {\n    _classCallCheck(this, Badge);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Badge).apply(this, arguments));\n  }\n\n  _createClass(Badge, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          propsColor = _this$props.color,\n          isInteractive = _this$props.isInteractive,\n          isSolid = _this$props.isSolid,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"color\", \"isInteractive\", \"isSolid\"]);\n\n      var _theme$getBadgeProps = theme.getBadgeProps({\n        color: propsColor,\n        isSolid: isSolid\n      }),\n          color = _theme$getBadgeProps.color,\n          backgroundColor = _theme$getBadgeProps.backgroundColor;\n\n      var appearance = isInteractive ? 'interactive' : 'default';\n      var classNames = cx(className, theme.getBadgeClassName(appearance));\n      return React.createElement(Strong, _extends({\n        size: 300\n      }, Badge.styles, {\n        color: color,\n        backgroundColor: backgroundColor\n      }, props, {\n        className: classNames\n      }));\n    }\n  }]);\n\n  return Badge;\n}(PureComponent);\n\nBadge.displayName = \"Badge\";\n\n_defineProperty(Badge, \"propTypes\", _objectSpread({}, Strong.propTypes, {\n  /**\n   * The color used for the badge.\n   */\n  color: PropTypes.string.isRequired,\n\n  /**\n   * Whether or not to apply hover/focus/active styles\n   */\n  isInteractive: PropTypes.bool,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(Badge, \"defaultProps\", {\n  color: 'neutral',\n  isInteractive: false,\n  isSolid: false\n});\n\n_defineProperty(Badge, \"styles\", {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  height: 16,\n  paddingTop: 0,\n  paddingRight: 6,\n  paddingBottom: 0,\n  paddingLeft: 6,\n  borderRadius: 2,\n  textAlign: 'center',\n  textDecoration: 'none',\n  textTransform: 'uppercase'\n});\n\nexport default withTheme(Badge);","map":{"version":3,"sources":["../../../src/badges/src/Badge.js"],"names":["Badge","PureComponent","Strong","propTypes","color","PropTypes","isRequired","isInteractive","bool","theme","isSolid","display","boxSizing","height","paddingTop","paddingRight","paddingBottom","paddingLeft","borderRadius","textAlign","textDecoration","textTransform","className","propsColor","props","backgroundColor","appearance","classNames","cx","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AACA,SAAA,SAAA,QAAA,aAAA;;IAEMA,K;;;;;;;;;;;6BAwCK;AAAA,UAAA,WAAA,GAQH,KARG,KAAA;AAAA,UAELS,KAFK,GAAA,WAAA,CAAA,KAAA;AAAA,UAGLa,SAHK,GAAA,WAAA,CAAA,SAAA;AAAA,UAIEC,UAJF,GAAA,WAAA,CAAA,KAAA;AAAA,UAKLhB,aALK,GAAA,WAAA,CAAA,aAAA;AAAA,UAMLG,OANK,GAAA,WAAA,CAAA,OAAA;AAAA,UAOFc,KAPE,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,OAAA,EAAA,eAAA,EAAA,SAAA,CAAA,CAAA;;AAAA,UAAA,oBAAA,GAU4B,KAAK,CAAL,aAAA,CAAoB;AACrDpB,QAAAA,KAAK,EADgD,UAAA;AAErDM,QAAAA,OAAO,EAAPA;AAFqD,OAApB,CAV5B;AAAA,UAUCN,KAVD,GAAA,oBAAA,CAAA,KAAA;AAAA,UAUQqB,eAVR,GAAA,oBAAA,CAAA,eAAA;;AAeP,UAAMC,UAAU,GAAGnB,aAAa,GAAA,aAAA,GAAhC,SAAA;AACA,UAAMoB,UAAU,GAAGC,EAAE,CAAA,SAAA,EAAYnB,KAAK,CAALA,iBAAAA,CAAjC,UAAiCA,CAAZ,CAArB;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,QAAA,IAAI,EAAE;AADR,OAAA,EAEMT,KAAK,CAFX,MAAA,EAAA;AAGE,QAAA,KAAK,EAHP,KAAA;AAIE,QAAA,eAAe,EAAEyB;AAJnB,OAAA,EAAA,KAAA,EAAA;AAME,QAAA,SAAS,EAAEE;AANb,OAAA,CAAA,CADF;AAUD;;;;EApEiB1B,a;;AAAdD,K,YAAAA,G,OAAAA;;gBAAAA,K,iCAECE,MAAM,CAACC,S;AAEV;;;AAGAC,EAAAA,KAAK,EAAEC,SAAS,CAATA,MAAAA,CAAiBC,U;;AAExB;;;AAGAC,EAAAA,aAAa,EAAEF,SAAS,CAACG,I;;AAEzB;;;AAGAC,EAAAA,KAAK,EAAEJ,SAAS,CAATA,MAAAA,CAAiBC;;;gBAjBtBN,K,kBAoBkB;AACpBI,EAAAA,KAAK,EADe,SAAA;AAEpBG,EAAAA,aAAa,EAFO,KAAA;AAGpBG,EAAAA,OAAO,EAAE;AAHW,C;;gBApBlBV,K,YA0BY;AACdW,EAAAA,OAAO,EADO,cAAA;AAEdC,EAAAA,SAAS,EAFK,YAAA;AAGdC,EAAAA,MAAM,EAHQ,EAAA;AAIdC,EAAAA,UAAU,EAJI,CAAA;AAKdC,EAAAA,YAAY,EALE,CAAA;AAMdC,EAAAA,aAAa,EANC,CAAA;AAOdC,EAAAA,WAAW,EAPG,CAAA;AAQdC,EAAAA,YAAY,EARE,CAAA;AASdC,EAAAA,SAAS,EATK,QAAA;AAUdC,EAAAA,cAAc,EAVA,MAAA;AAWdC,EAAAA,aAAa,EAAE;AAXD,C;;AA6ClB,eAAeQ,SAAS,CAAxB,KAAwB,CAAxB","sourcesContent":["import React, { PureComponent } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { Strong } from '../../typography'\nimport { withTheme } from '../../theme'\n\nclass Badge extends PureComponent {\n  static propTypes = {\n    ...Strong.propTypes,\n\n    /**\n     * The color used for the badge.\n     */\n    color: PropTypes.string.isRequired,\n\n    /**\n     * Whether or not to apply hover/focus/active styles\n     */\n    isInteractive: PropTypes.bool,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired\n  }\n\n  static defaultProps = {\n    color: 'neutral',\n    isInteractive: false,\n    isSolid: false\n  }\n\n  static styles = {\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    height: 16,\n    paddingTop: 0,\n    paddingRight: 6,\n    paddingBottom: 0,\n    paddingLeft: 6,\n    borderRadius: 2,\n    textAlign: 'center',\n    textDecoration: 'none',\n    textTransform: 'uppercase'\n  }\n\n  render() {\n    const {\n      theme,\n      className,\n      color: propsColor,\n      isInteractive,\n      isSolid,\n      ...props\n    } = this.props\n\n    const { color, backgroundColor } = theme.getBadgeProps({\n      color: propsColor,\n      isSolid\n    })\n\n    const appearance = isInteractive ? 'interactive' : 'default'\n    const classNames = cx(className, theme.getBadgeClassName(appearance))\n\n    return (\n      <Strong\n        size={300}\n        {...Badge.styles}\n        color={color}\n        backgroundColor={backgroundColor}\n        {...props}\n        className={classNames}\n      />\n    )\n  }\n}\n\nexport default withTheme(Badge)\n"]},"metadata":{},"sourceType":"module"}