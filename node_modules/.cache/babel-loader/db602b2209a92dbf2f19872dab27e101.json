{"ast":null,"code":"/* eslint-disable */\nimport auth0 from \"auth0-js\";\nexport default class Auth {\n  constructor(history) {\n    this.login = () => {\n      this.auth0.authorize();\n    };\n\n    this.register = params => {// this.auth0.authorize();\n    };\n\n    this.handleAuthentication = () => {\n      this.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          {\n            setTimeout(() => {\n              alert(JSON.stringify(localStorage.getItem('data'), null, 2));\n              this.history.push(\"/\");\n            }, 100);\n          }\n        } else if (err) {\n          this.history.push(\"/\");\n          alert(`Error: ${err.error}. Check the console for further details.`);\n          console.log(err);\n        }\n      });\n    };\n\n    this.setSession = authResult => {\n      console.log(authResult); // set the time that the access token will expire\n\n      const expiresAt = JSON.stringify(authResult.expiresIn * 1000 + new Date().getTime());\n      localStorage.setItem(\"access_token\", authResult.accessToken);\n      localStorage.setItem(\"id_token\", authResult.idToken);\n      localStorage.setItem(\"expires_at\", expiresAt);\n    };\n\n    this.history = history;\n    this.auth0 = new auth0.WebAuth({\n      domain: 'go-everpay.auth0.com',\n      //process.env.REACT_APP_AUTH0_DOMAIN,\n      clientID: \"OLKwEH0FnuOs7yT7lcNSHXCrY5H8K6Oh\",\n      redirectUri: window.location.origin + '/callback',\n      responseType: \"token id_token\",\n      scope: \"openid profile email\"\n    });\n  }\n\n  isAuthenticated() {\n    const expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    return new Date().getTime() < expiresAt;\n  }\n\n}","map":{"version":3,"sources":["/Users/ravi/Desktop/tasket_react/src/Auth/Auth.js"],"names":["auth0","Auth","constructor","history","login","authorize","register","params","handleAuthentication","parseHash","err","authResult","accessToken","idToken","setSession","setTimeout","alert","JSON","stringify","localStorage","getItem","push","error","console","log","expiresAt","expiresIn","Date","getTime","setItem","WebAuth","domain","clientID","redirectUri","window","location","origin","responseType","scope","isAuthenticated","parse"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;AAEA,eAAe,MAAMC,IAAN,CAAW;AACxBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA,SAWrBC,KAXqB,GAWb,MAAM;AACZ,WAAKJ,KAAL,CAAWK,SAAX;AACD,KAboB;;AAAA,SAerBC,QAfqB,GAeTC,MAAD,IAAY,CAErB;AACD,KAlBoB;;AAAA,SAoBrBC,oBApBqB,GAoBE,MAAM;AAC3B,WAAKR,KAAL,CAAWS,SAAX,CAAqB,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACxC,YAAGA,UAAU,IAAIA,UAAU,CAACC,WAAzB,IAAwCD,UAAU,CAACE,OAAtD,EAA8D;AAC5D,eAAKC,UAAL,CAAgBH,UAAhB;AACA;AAACI,YAAAA,UAAU,CAAC,MAAM;AACdC,cAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAf,EAA6C,IAA7C,EAAmD,CAAnD,CAAD,CAAL;AACA,mBAAKjB,OAAL,CAAakB,IAAb,CAAkB,GAAlB;AACD,aAHQ,EAGN,GAHM,CAAV;AAGU;AACZ,SAND,MAMM,IAAGX,GAAH,EAAO;AACX,eAAKP,OAAL,CAAakB,IAAb,CAAkB,GAAlB;AACAL,UAAAA,KAAK,CAAE,UAASN,GAAG,CAACY,KAAM,0CAArB,CAAL;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYd,GAAZ;AACD;AACF,OAZD;AAaD,KAlCoB;;AAAA,SAoCrBI,UApCqB,GAoCRH,UAAU,IAAI;AACzBY,MAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ,EADyB,CAEzB;;AACA,YAAMc,SAAS,GAAGR,IAAI,CAACC,SAAL,CAChBP,UAAU,CAACe,SAAX,GAAuB,IAAvB,GAA8B,IAAIC,IAAJ,GAAWC,OAAX,EADd,CAAlB;AAGAT,MAAAA,YAAY,CAACU,OAAb,CAAqB,cAArB,EAAqClB,UAAU,CAACC,WAAhD;AACAO,MAAAA,YAAY,CAACU,OAAb,CAAqB,UAArB,EAAiClB,UAAU,CAACE,OAA5C;AACAM,MAAAA,YAAY,CAACU,OAAb,CAAqB,YAArB,EAAmCJ,SAAnC;AACD,KA7CoB;;AACnB,SAAKtB,OAAL,GAAeA,OAAf;AACA,SAAKH,KAAL,GAAa,IAAIA,KAAK,CAAC8B,OAAV,CAAkB;AAC7BC,MAAAA,MAAM,EAAE,sBADqB;AACG;AAChCC,MAAAA,QAAQ,EAAE,kCAFmB;AAG7BC,MAAAA,WAAW,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAwB,WAHR;AAI7BC,MAAAA,YAAY,EAAE,gBAJe;AAK7BC,MAAAA,KAAK,EAAE;AALsB,KAAlB,CAAb;AAOD;;AAsCDC,EAAAA,eAAe,GAAE;AACf,UAAMd,SAAS,GAAGR,IAAI,CAACuB,KAAL,CAAWrB,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CAAlB;AACA,WAAO,IAAIO,IAAJ,GAAWC,OAAX,KAAuBH,SAA9B;AACD;;AAnDuB","sourcesContent":["/* eslint-disable */ \nimport auth0 from \"auth0-js\";\n\nexport default class Auth {\n  constructor(history) {\n    this.history = history;\n    this.auth0 = new auth0.WebAuth({\n      domain: 'go-everpay.auth0.com', //process.env.REACT_APP_AUTH0_DOMAIN,\n      clientID: \"OLKwEH0FnuOs7yT7lcNSHXCrY5H8K6Oh\",\n      redirectUri: window.location.origin+ '/callback',\n      responseType: \"token id_token\",\n      scope: \"openid profile email\"\n    });\n  }\n\n  login = () => {\n    this.auth0.authorize();\n  };\n\n  register = (params) => {\n\n    // this.auth0.authorize();\n  };\n\n  handleAuthentication = () => {\n    this.auth0.parseHash((err, authResult) => {\n      if(authResult && authResult.accessToken && authResult.idToken){\n        this.setSession(authResult);\n        {setTimeout(() => {\n            alert(JSON.stringify(localStorage.getItem('data'), null, 2));\n            this.history.push(\"/\");\n          }, 100);}\n      }else if(err){\n        this.history.push(\"/\");\n        alert(`Error: ${err.error}. Check the console for further details.`);\n        console.log(err);\n      }\n    });\n  };\n\n  setSession = authResult => {\n    console.log(authResult);\n    // set the time that the access token will expire\n    const expiresAt = JSON.stringify(\n      authResult.expiresIn * 1000 + new Date().getTime()\n    );\n    localStorage.setItem(\"access_token\", authResult.accessToken);\n    localStorage.setItem(\"id_token\", authResult.idToken);\n    localStorage.setItem(\"expires_at\", expiresAt);\n  };\n\n  isAuthenticated(){\n    const expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    return new Date().getTime() < expiresAt;\n  }\n}"]},"metadata":{},"sourceType":"module"}