{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { dimensions, spacing, position, layout } from 'ui-box';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\nimport { Spinner } from '../../spinner';\nimport { withTheme } from '../../theme';\n\nvar Button = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Button, _PureComponent);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          intent = _this$props.intent,\n          height = _this$props.height,\n          isActive = _this$props.isActive,\n          children = _this$props.children,\n          disabled = _this$props.disabled,\n          appearance = _this$props.appearance,\n          isLoading = _this$props.isLoading,\n          paddingRight = _this$props.paddingRight,\n          paddingLeft = _this$props.paddingLeft,\n          paddingTop = _this$props.paddingTop,\n          paddingBottom = _this$props.paddingBottom,\n          iconBeforeKey = _this$props.iconBefore,\n          iconAfterKey = _this$props.iconAfter,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"intent\", \"height\", \"isActive\", \"children\", \"disabled\", \"appearance\", \"isLoading\", \"paddingRight\", \"paddingLeft\", \"paddingTop\", \"paddingBottom\", \"iconBefore\", \"iconAfter\"]);\n\n      var themedClassName = theme.getButtonClassName(appearance, intent);\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      var iconSize = theme.getIconSizeForButton(height);\n      var pr = paddingRight !== undefined ? paddingRight : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var pl = paddingLeft !== undefined ? paddingLeft : Math.round(height / 2); // eslint-disable-line no-negated-condition\n\n      var iconBefore;\n\n      if (iconBeforeKey) {\n        iconBefore = React.createElement(Icon, {\n          icon: iconBeforeKey,\n          size: iconSize,\n          marginLeft: -Math.round(pl * 0.2),\n          marginRight: Math.round(iconSize * 0.7)\n        });\n      }\n\n      var iconAfter;\n\n      if (iconAfterKey) {\n        iconAfter = React.createElement(Icon, {\n          icon: iconAfterKey,\n          size: iconSize,\n          marginRight: -Math.round(pl * 0.2),\n          marginLeft: Math.round(iconSize * 0.7)\n        });\n      }\n\n      return React.createElement(Text, _extends({\n        is: \"button\",\n        className: cx(themedClassName, className),\n        borderTopRightRadius: borderRadius,\n        borderBottomRightRadius: borderRadius,\n        borderTopLeftRadius: borderRadius,\n        borderBottomLeftRadius: borderRadius,\n        paddingTop: paddingTop,\n        paddingBottom: paddingBottom,\n        paddingRight: pr,\n        paddingLeft: pl,\n        marginLeft: 0 // Removes weird margins in Safari\n        ,\n        marginRight: 0 // Removes weird margins in Safari\n        ,\n        marginTop: 0 // Removes weird margins in Safari\n        ,\n        marginBottom: 0 // Removes weird margins in Safari\n        ,\n        size: textSize,\n        color: null // Prevent the Text color overriding the glamor appearanceStyle color\n        ,\n        height: height,\n        lineHeight: \"\".concat(height, \"px\")\n      }, isActive ? {\n        'data-active': true\n      } : {}, Button.styles, props, {\n        disabled: disabled || isLoading\n      }), isLoading && React.createElement(Spinner, {\n        marginLeft: -Math.round(height / 8),\n        marginRight: Math.round(height / 4),\n        size: Math.round(height / 2)\n      }), iconBefore || null, children, iconAfter || null);\n    }\n  }]);\n\n  return Button;\n}(PureComponent);\n\nButton.displayName = \"Button\";\n\n_defineProperty(Button, \"propTypes\", _objectSpread({}, dimensions.propTypes, {}, spacing.propTypes, {}, position.propTypes, {}, layout.propTypes, {\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconBefore: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.string]),\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconAfter: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.string]),\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(Button, \"defaultProps\", {\n  appearance: 'default',\n  height: 32,\n  intent: 'none',\n  isActive: false,\n  paddingBottom: 0,\n  paddingTop: 0\n});\n\n_defineProperty(Button, \"styles\", {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n});\n\nexport default withTheme(Button);","map":{"version":3,"sources":["../../../src/buttons/src/Button.js"],"names":["Button","PureComponent","dimensions","propTypes","spacing","position","layout","intent","PropTypes","appearance","isRequired","isLoading","bool","isActive","iconBefore","iconAfter","disabled","theme","className","string","height","paddingBottom","paddingTop","fontFamily","fontWeight","display","alignItems","flexWrap","children","paddingRight","paddingLeft","iconBeforeKey","iconAfterKey","props","themedClassName","textSize","borderRadius","iconSize","pr","Math","pl","cx","withTheme"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { Text } from '../../typography'\nimport { Icon } from '../../icon'\nimport { Spinner } from '../../spinner'\nimport { withTheme } from '../../theme'\n\nclass Button extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the dimensions spec from the Box primitive.\n     */\n    ...dimensions.propTypes,\n\n    /**\n     * Composes the spacing spec from the Box primitive.\n     */\n    ...spacing.propTypes,\n\n    /**\n     * Composes the position spec from the Box primitive.\n     */\n    ...position.propTypes,\n\n    /**\n     * Composes the layout spec from the Box primitive.\n     */\n    ...layout.propTypes,\n\n    /**\n     * The intent of the button.\n     */\n    intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n    /**\n     * The appearance of the button.\n     */\n    appearance: PropTypes.oneOf(['default', 'minimal', 'primary']).isRequired,\n\n    /**\n     * When true, show a loading spinner before the children.\n     * This also disables the button.\n     */\n    isLoading: PropTypes.bool,\n\n    /**\n     * Forcefully set the active state of a button.\n     * Useful in conjuction with a Popover.\n     */\n    isActive: PropTypes.bool,\n\n    /**\n     * Sets an icon before the text. Can be any icon from Evergreen or a custom element.\n     */\n    iconBefore: PropTypes.oneOfType([\n      PropTypes.elementType,\n      PropTypes.element,\n      PropTypes.string\n    ]),\n\n    /**\n     * Sets an icon after the text. Can be any icon from Evergreen or a custom element.\n     */\n    iconAfter: PropTypes.oneOfType([\n      PropTypes.elementType,\n      PropTypes.element,\n      PropTypes.string\n    ]),\n\n    /**\n     * When true, the button is disabled.\n     * isLoading also sets the button to disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Class name passed to the button.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    appearance: 'default',\n    height: 32,\n    intent: 'none',\n    isActive: false,\n    paddingBottom: 0,\n    paddingTop: 0\n  }\n\n  static styles = {\n    position: 'relative',\n    fontFamily: 'ui',\n    fontWeight: 500,\n    display: 'inline-flex',\n    alignItems: 'center',\n    flexWrap: 'nowrap'\n  }\n\n  render() {\n    const {\n      theme,\n      className,\n\n      intent,\n      height,\n      isActive,\n      children,\n      disabled,\n      appearance,\n      isLoading,\n\n      // Paddings\n      paddingRight,\n      paddingLeft,\n      paddingTop,\n      paddingBottom,\n\n      // Icons\n      iconBefore: iconBeforeKey,\n      iconAfter: iconAfterKey,\n\n      ...props\n    } = this.props\n\n    const themedClassName = theme.getButtonClassName(appearance, intent)\n    const textSize = theme.getTextSizeForControlHeight(height)\n\n    const borderRadius = theme.getBorderRadiusForControlHeight(height)\n    const iconSize = theme.getIconSizeForButton(height)\n\n    const pr =\n      paddingRight !== undefined ? paddingRight : Math.round(height / 2) // eslint-disable-line no-negated-condition\n    const pl = paddingLeft !== undefined ? paddingLeft : Math.round(height / 2) // eslint-disable-line no-negated-condition\n\n    let iconBefore\n    if (iconBeforeKey) {\n      iconBefore = (\n        <Icon\n          icon={iconBeforeKey}\n          size={iconSize}\n          marginLeft={-Math.round(pl * 0.2)}\n          marginRight={Math.round(iconSize * 0.7)}\n        />\n      )\n    }\n\n    let iconAfter\n    if (iconAfterKey) {\n      iconAfter = (\n        <Icon\n          icon={iconAfterKey}\n          size={iconSize}\n          marginRight={-Math.round(pl * 0.2)}\n          marginLeft={Math.round(iconSize * 0.7)}\n        />\n      )\n    }\n\n    return (\n      <Text\n        is=\"button\"\n        className={cx(themedClassName, className)}\n        borderTopRightRadius={borderRadius}\n        borderBottomRightRadius={borderRadius}\n        borderTopLeftRadius={borderRadius}\n        borderBottomLeftRadius={borderRadius}\n        paddingTop={paddingTop}\n        paddingBottom={paddingBottom}\n        paddingRight={pr}\n        paddingLeft={pl}\n        marginLeft={0} // Removes weird margins in Safari\n        marginRight={0} // Removes weird margins in Safari\n        marginTop={0} // Removes weird margins in Safari\n        marginBottom={0} // Removes weird margins in Safari\n        size={textSize}\n        color={null} // Prevent the Text color overriding the glamor appearanceStyle color\n        height={height}\n        lineHeight={`${height}px`}\n        {...(isActive ? { 'data-active': true } : {})}\n        {...Button.styles}\n        {...props}\n        disabled={disabled || isLoading}\n      >\n        {isLoading && (\n          <Spinner\n            marginLeft={-Math.round(height / 8)}\n            marginRight={Math.round(height / 4)}\n            size={Math.round(height / 2)}\n          />\n        )}\n        {iconBefore || null}\n        {children}\n        {iconAfter || null}\n      </Text>\n    )\n  }\n}\n\nexport default withTheme(Button)\n"]},"metadata":{},"sourceType":"module"}