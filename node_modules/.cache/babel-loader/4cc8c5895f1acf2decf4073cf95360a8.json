{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport fuzzaldrin from 'fuzzaldrin-plus';\nimport Downshift from 'downshift';\nimport VirtualList from 'react-tiny-virtual-list';\nimport { Popover } from '../../popover';\nimport { Position } from '../../constants';\nimport { Heading } from '../../typography';\nimport { Pane } from '../../layers';\nimport deprecated from '../../lib/deprecated';\nimport AutocompleteItem from './AutocompleteItem';\n\nvar fuzzyFilter = function fuzzyFilter(itemToString) {\n  if (itemToString) {\n    return function (items, input) {\n      var wrappedItems = items.map(function (item) {\n        return {\n          key: itemToString(item),\n          item: item\n        };\n      });\n      return fuzzaldrin.filter(wrappedItems, input, {\n        key: 'key'\n      }).map(function (_ref) {\n        var item = _ref.item;\n        return item;\n      });\n    };\n  }\n\n  return function (items, input) {\n    return fuzzaldrin.filter(items, input);\n  };\n};\n\nvar noop = function noop() {};\n\nvar autocompleteItemRenderer = function autocompleteItemRenderer(props) {\n  return React.createElement(AutocompleteItem, props);\n};\n\nautocompleteItemRenderer.displayName = \"autocompleteItemRenderer\"; // https://github.com/paypal/downshift/issues/164\n\nvar Autocomplete = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Autocomplete, _PureComponent);\n\n  function Autocomplete() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Autocomplete)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      targetWidth: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stateReducer\", function (state, changes) {\n      var items = _this.props.items;\n\n      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen') && changes.isOpen) {\n        return _objectSpread({}, changes, {\n          highlightedIndex: items.indexOf(state.selectedItem)\n        });\n      }\n\n      return changes;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderResults\", function (_ref2) {\n      var width = _ref2.width,\n          inputValue = _ref2.inputValue,\n          highlightedIndex = _ref2.highlightedIndex,\n          selectedItem = _ref2.selectedItem,\n          getItemProps = _ref2.getItemProps,\n          getMenuProps = _ref2.getMenuProps;\n      var _this$props = _this.props,\n          title = _this$props.title,\n          itemSize = _this$props.itemSize,\n          itemsFilter = _this$props.itemsFilter,\n          originalItems = _this$props.items,\n          itemToString = _this$props.itemToString,\n          _renderItem = _this$props.renderItem,\n          popoverMaxHeight = _this$props.popoverMaxHeight,\n          isFilterDisabled = _this$props.isFilterDisabled;\n      var filter = itemsFilter || fuzzyFilter(itemToString);\n      var items = isFilterDisabled || inputValue.trim() === '' ? originalItems : filter(originalItems, inputValue);\n      if (items.length === 0) return null; // Pass the actual DOM ref to downshift, this fixes touch support\n\n      var menuProps = getMenuProps();\n      menuProps.innerRef = menuProps.ref;\n      delete menuProps.ref;\n      return React.createElement(Pane, _extends({\n        width: width\n      }, menuProps), title && React.createElement(Pane, {\n        padding: 8,\n        borderBottom: \"muted\"\n      }, React.createElement(Heading, {\n        size: 100\n      }, title)), items.length > 0 && React.createElement(VirtualList, {\n        width: \"100%\",\n        height: Math.min(items.length * itemSize, popoverMaxHeight),\n        itemSize: itemSize,\n        itemCount: items.length,\n        scrollToIndex: highlightedIndex || 0,\n        overscanCount: 3,\n        scrollToAlignment: \"auto\",\n        renderItem: function renderItem(_ref3) {\n          var index = _ref3.index,\n              style = _ref3.style;\n          var item = items[index];\n          var itemString = itemToString(item);\n          return _renderItem(getItemProps({\n            item: item,\n            key: itemString,\n            index: index,\n            style: style,\n            children: itemString,\n            isSelected: itemToString(selectedItem) === itemString,\n            isHighlighted: highlightedIndex === index\n          }));\n        }\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        targetWidth: this.targetRef.getBoundingClientRect().width\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          itemSize = _this$props2.itemSize,\n          position = _this$props2.position,\n          renderItem = _this$props2.renderItem,\n          itemsFilter = _this$props2.itemsFilter,\n          popoverMaxHeight = _this$props2.popoverMaxHeight,\n          popoverMinWidth = _this$props2.popoverMinWidth,\n          defaultSelectedItem = _this$props2.defaultSelectedItem,\n          initialSelectedItem = _this$props2.initialSelectedItem,\n          defaultInputValue = _this$props2.defaultInputValue,\n          initialInputValue = _this$props2.initialInputValue,\n          getButtonProps = _this$props2.getButtonProps,\n          getToggleButtonProps = _this$props2.getToggleButtonProps,\n          props = _objectWithoutProperties(_this$props2, [\"children\", \"itemSize\", \"position\", \"renderItem\", \"itemsFilter\", \"popoverMaxHeight\", \"popoverMinWidth\", \"defaultSelectedItem\", \"initialSelectedItem\", \"defaultInputValue\", \"initialInputValue\", \"getButtonProps\", \"getToggleButtonProps\"]);\n\n      return React.createElement(Downshift, _extends({\n        initialSelectedItem: initialSelectedItem || defaultSelectedItem,\n        initialInputValue: initialInputValue || defaultInputValue,\n        getToggleButtonProps: getToggleButtonProps || getButtonProps,\n        stateReducer: this.stateReducer,\n        scrollIntoView: noop\n      }, props), function (_ref4) {\n        var isShown = _ref4.isOpen,\n            inputValue = _ref4.inputValue,\n            getItemProps = _ref4.getItemProps,\n            getMenuProps = _ref4.getMenuProps,\n            selectedItem = _ref4.selectedItem,\n            highlightedIndex = _ref4.highlightedIndex,\n            getRootProps = _ref4.getRootProps,\n            restDownshiftProps = _objectWithoutProperties(_ref4, [\"isOpen\", \"inputValue\", \"getItemProps\", \"getMenuProps\", \"selectedItem\", \"highlightedIndex\", \"getRootProps\"]);\n\n        return React.createElement(Pane, _extends({\n          width: \"100%\"\n        }, getRootProps({\n          refKey: 'innerRef'\n        })), React.createElement(Popover, {\n          bringFocusInside: false,\n          isShown: isShown,\n          minWidth: popoverMinWidth,\n          position: position || (_this2.state.targetWidth < popoverMinWidth ? Position.BOTTOM_LEFT : Position.BOTTOM),\n          content: function content() {\n            return _this2.renderResults({\n              width: Math.max(_this2.state.targetWidth, popoverMinWidth),\n              inputValue: inputValue,\n              getItemProps: getItemProps,\n              getMenuProps: getMenuProps,\n              selectedItem: selectedItem,\n              highlightedIndex: highlightedIndex\n            });\n          },\n          minHeight: 0,\n          animationDuration: 0\n        }, function (_ref5) {\n          var isShownPopover = _ref5.isShown,\n              toggle = _ref5.toggle,\n              _getRef = _ref5.getRef;\n          return children(_objectSpread({\n            isShown: isShownPopover,\n            toggle: toggle,\n            getRef: function getRef(ref) {\n              // Use the ref internally to determine the width\n              _this2.targetRef = ref;\n\n              _getRef(ref);\n            },\n            inputValue: inputValue,\n            selectedItem: selectedItem,\n            highlightedIndex: highlightedIndex\n          }, restDownshiftProps));\n        }));\n      });\n    }\n  }]);\n\n  return Autocomplete;\n}(PureComponent);\n\nAutocomplete.displayName = \"Autocomplete\";\n\n_defineProperty(Autocomplete, \"propTypes\", _objectSpread({\n  /**\n   * This prop can be either a string or a Node.\n   * It will provide a title for the items\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * An array of items to be used as options for the select\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected Item to be shown on the autocomplete\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * The selected item to be selected & shown by default on the autocomplete (deprecated)\n   */\n  defaultSelectedItem: deprecated(PropTypes.any, 'Use \"initialSelectedItem\" instead.'),\n\n  /**\n   * The selected item to be selected & shown by default on the autocomplete (deprecated)\n   */\n  defaultInputValue: deprecated(PropTypes.any, 'Use \"initialInputValue\" instead.'),\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func.isRequired,\n\n  /**\n   * Function that will render the 'filter' component.\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * The height of each item in the list\n   * Because the list is virtualized this is required beforehand.\n   */\n  itemSize: PropTypes.number,\n\n  /**\n   * Function that returns a component to render the item\n   */\n  renderItem: PropTypes.func,\n\n  /**\n   * The position of the Popover the Autocomplete is rendered in.\n   */\n  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]),\n\n  /**\n   * A function that is used to filter the items.\n   * It should return a subset of the initial items.\n   * By default the \"fuzzaldrin-plus\" package is used.\n   */\n  itemsFilter: PropTypes.func,\n\n  /**\n   * Prop that enables and disables filtering\n   * True: Enables Filtering\n   * False: Disables Filtering\n   */\n  isFilterDisabled: PropTypes.bool,\n\n  /**\n   * Defines the minimum height the results container will be\n   */\n  popoverMinWidth: PropTypes.number,\n\n  /**\n   * Defines the maximum height the results container will be\n   */\n  popoverMaxHeight: PropTypes.number,\n\n  /**\n   * The selected item to be selected & shown by default on the autocomplete (deprecated)\n   */\n  getButtonProps: deprecated(PropTypes.func, 'Use \"getToggleButtonProps\" instead.')\n}, Downshift.propTypes));\n\n_defineProperty(Autocomplete, \"defaultProps\", {\n  itemToString: function itemToString(i) {\n    return i ? String(i) : '';\n  },\n  itemSize: 32,\n  isFilterDisabled: false,\n  popoverMinWidth: 240,\n  popoverMaxHeight: 240,\n  renderItem: autocompleteItemRenderer\n});\n\nexport { Autocomplete as default };","map":{"version":3,"sources":["../../../src/autocomplete/src/Autocomplete.js"],"names":["fuzzyFilter","wrappedItems","key","itemToString","item","fuzzaldrin","noop","autocompleteItemRenderer","Autocomplete","PureComponent","title","PropTypes","items","isRequired","selectedItem","any","defaultSelectedItem","deprecated","defaultInputValue","children","itemSize","number","renderItem","func","position","Position","itemsFilter","isFilterDisabled","bool","popoverMinWidth","popoverMaxHeight","getButtonProps","Downshift","propTypes","targetWidth","i","String","width","Object","changes","highlightedIndex","state","inputValue","getItemProps","getMenuProps","originalItems","filter","menuProps","Math","index","style","itemString","isSelected","isHighlighted","initialSelectedItem","initialInputValue","getToggleButtonProps","props","isShown","getRootProps","restDownshiftProps","refKey","isShownPopover","toggle","getRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,UAAA,MAAA,iBAAA;AACA,OAAA,SAAA,MAAA,WAAA;AACA,OAAA,WAAA,MAAA,yBAAA;AACA,SAAA,OAAA,QAAA,eAAA;AACA,SAAA,QAAA,QAAA,iBAAA;AACA,SAAA,OAAA,QAAA,kBAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AACA,OAAA,gBAAA,MAAA,oBAAA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,YAAA,EAAgB;AAClC,MAAA,YAAA,EAAkB;AAChB,WAAO,UAAA,KAAA,EAAA,KAAA,EAAkB;AACvB,UAAMC,YAAY,GAAG,KAAK,CAAL,GAAA,CAAU,UAAA,IAAA,EAAI;AAAA,eAAK;AACtCC,UAAAA,GAAG,EAAEC,YAAY,CADqB,IACrB,CADqB;AAEtCC,UAAAA,IAAI,EAAJA;AAFsC,SAAL;AAAnC,OAAqB,CAArB;AAKA,aAAO,UAAU,CAAV,MAAA,CAAA,YAAA,EAAA,KAAA,EACwB;AAAEF,QAAAA,GAAG,EAAE;AAAP,OADxB,EAAA,GAAA,CAEA,UAAA,IAAA,EAAA;AAAA,YAAGE,IAAH,GAAA,IAAA,CAAA,IAAA;AAAA,eAAA,IAAA;AAFP,OAAO,CAAP;AANF,KAAA;AAUD;;AAED,SAAO,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,WAAkBC,UAAU,CAAVA,MAAAA,CAAAA,KAAAA,EAAlB,KAAkBA,CAAlB;AAAP,GAAA;AAdF,CAAA;;AAiBA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAnB,CAAA;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,KAAA,EAAK;AAAA,SAAI,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAJ,KAAI,CAAJ;AAAtC,CAAA;;AAAMA,wB,YAAAA,G,0BAAAA,C,CAEN;;IACqBC,Y;;;;;;;;;;;;;;;;4DAyGX;AACN0B,MAAAA,WAAW,EAAE;AADP,K;;mEAmBO,UAAA,KAAA,EAAA,OAAA,EAAoB;AAAA,UACzBtB,KADyB,GACf,KAAA,CADe,KACf,CADe,KAAA;;AAGjC,UACE0B,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAAAA,QAAAA,KACAC,OAAO,CAFT,MAAA,EAGE;AACA,eAAA,aAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEEC,UAAAA,gBAAgB,EAAE5B,KAAK,CAALA,OAAAA,CAAc6B,KAAK,CAAnB7B,YAAAA;AAFpB,SAAA,CAAA;AAID;;AAED,aAAA,OAAA;;;oEAGc,UAAA,KAAA,EAOV;AAAA,UANJyB,KAMI,GAAA,KAAA,CANJA,KAMI;AAAA,UALJK,UAKI,GAAA,KAAA,CALJA,UAKI;AAAA,UAJJF,gBAII,GAAA,KAAA,CAJJA,gBAII;AAAA,UAHJ1B,YAGI,GAAA,KAAA,CAHJA,YAGI;AAAA,UAFJ6B,YAEI,GAAA,KAAA,CAFJA,YAEI;AAAA,UADJC,YACI,GAAA,KAAA,CADJA,YACI;AAAA,UAAA,WAAA,GAUA,KAAA,CAVA,KAAA;AAAA,UAEFlC,KAFE,GAAA,WAAA,CAAA,KAAA;AAAA,UAGFU,QAHE,GAAA,WAAA,CAAA,QAAA;AAAA,UAIFM,WAJE,GAAA,WAAA,CAAA,WAAA;AAAA,UAKKmB,aALL,GAAA,WAAA,CAAA,KAAA;AAAA,UAMF1C,YANE,GAAA,WAAA,CAAA,YAAA;AAAA,UAOFmB,WAPE,GAAA,WAAA,CAAA,UAAA;AAAA,UAQFQ,gBARE,GAAA,WAAA,CAAA,gBAAA;AAAA,UASFH,gBATE,GAAA,WAAA,CAAA,gBAAA;AAYJ,UAAMmB,MAAM,GAAGpB,WAAW,IAAI1B,WAAW,CAAzC,YAAyC,CAAzC;AACA,UAAMY,KAAK,GACTe,gBAAgB,IAAIe,UAAU,CAAVA,IAAAA,OAApBf,EAAAA,GAAAA,aAAAA,GAEImB,MAAM,CAAA,aAAA,EAHZ,UAGY,CAHZ;AAKA,UAAIlC,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB,OAlBpB,IAkBoB,CAlBpB,CAoBJ;;AACA,UAAMmC,SAAS,GAAGH,YAAlB,EAAA;AACAG,MAAAA,SAAS,CAATA,QAAAA,GAAqBA,SAAS,CAA9BA,GAAAA;AACA,aAAOA,SAAS,CAAhB,GAAA;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,QAAA,KAAK,EAAEV;AAAb,OAAA,EAAA,SAAA,CAAA,EACG3B,KAAK,IACJ,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,OAAO,EAAb,CAAA;AAAkB,QAAA,YAAY,EAAC;AAA/B,OAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,QAAA,IAAI,EAAE;AAAf,OAAA,EAHN,KAGM,CADF,CAFJ,EAMGE,KAAK,CAALA,MAAAA,GAAAA,CAAAA,IACC,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AACE,QAAA,KAAK,EADP,MAAA;AAEE,QAAA,MAAM,EAAEoC,IAAI,CAAJA,GAAAA,CAASpC,KAAK,CAALA,MAAAA,GAAToC,QAAAA,EAFV,gBAEUA,CAFV;AAGE,QAAA,QAAQ,EAHV,QAAA;AAIE,QAAA,SAAS,EAAEpC,KAAK,CAJlB,MAAA;AAKE,QAAA,aAAa,EAAE4B,gBAAgB,IALjC,CAAA;AAME,QAAA,aAAa,EANf,CAAA;AAOE,QAAA,iBAAiB,EAPnB,MAAA;AAQE,QAAA,UAAU,EAAE,SAAA,UAAA,CAAA,KAAA,EAAsB;AAAA,cAAnBS,KAAmB,GAAA,KAAA,CAAnBA,KAAmB;AAAA,cAAZC,KAAY,GAAA,KAAA,CAAZA,KAAY;AAChC,cAAM9C,IAAI,GAAGQ,KAAK,CAAlB,KAAkB,CAAlB;AACA,cAAMuC,UAAU,GAAGhD,YAAY,CAA/B,IAA+B,CAA/B;AAEA,iBAAOmB,WAAU,CACfqB,YAAY,CAAC;AACXvC,YAAAA,IAAI,EADO,IAAA;AAEXF,YAAAA,GAAG,EAFQ,UAAA;AAGX+C,YAAAA,KAAK,EAHM,KAAA;AAIXC,YAAAA,KAAK,EAJM,KAAA;AAKX/B,YAAAA,QAAQ,EALG,UAAA;AAMXiC,YAAAA,UAAU,EAAEjD,YAAY,CAAZA,YAAY,CAAZA,KAND,UAAA;AAOXkD,YAAAA,aAAa,EAAEb,gBAAgB,KAAKS;AAPzB,WAAD,CADG,CAAjB;AAWD;AAvBH,OAAA,CAPJ,CADF;;;;;;;;wCAtDkB;AAClB,WAAA,QAAA,CAAc;AACZf,QAAAA,WAAW,EAAE,KAAA,SAAA,CAAA,qBAAA,GAAuCG;AADxC,OAAd;AAGD;;;6BAwFQ;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GAgBH,KAhBG,KAAA;AAAA,UAELlB,QAFK,GAAA,YAAA,CAAA,QAAA;AAAA,UAGLC,QAHK,GAAA,YAAA,CAAA,QAAA;AAAA,UAILI,QAJK,GAAA,YAAA,CAAA,QAAA;AAAA,UAKLF,UALK,GAAA,YAAA,CAAA,UAAA;AAAA,UAMLI,WANK,GAAA,YAAA,CAAA,WAAA;AAAA,UAOLI,gBAPK,GAAA,YAAA,CAAA,gBAAA;AAAA,UAQLD,eARK,GAAA,YAAA,CAAA,eAAA;AAAA,UASLb,mBATK,GAAA,YAAA,CAAA,mBAAA;AAAA,UAULsC,mBAVK,GAAA,YAAA,CAAA,mBAAA;AAAA,UAWLpC,iBAXK,GAAA,YAAA,CAAA,iBAAA;AAAA,UAYLqC,iBAZK,GAAA,YAAA,CAAA,iBAAA;AAAA,UAaLxB,cAbK,GAAA,YAAA,CAAA,cAAA;AAAA,UAcLyB,oBAdK,GAAA,YAAA,CAAA,oBAAA;AAAA,UAeFC,KAfE,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,aAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,qBAAA,EAAA,qBAAA,EAAA,mBAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,sBAAA,CAAA,CAAA;;AAkBP,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,QAAA,mBAAmB,EAAEH,mBAAmB,IAD1C,mBAAA;AAEE,QAAA,iBAAiB,EAAEC,iBAAiB,IAFtC,iBAAA;AAGE,QAAA,oBAAoB,EAAEC,oBAAoB,IAH5C,cAAA;AAIE,QAAA,YAAY,EAAE,KAJhB,YAAA;AAKE,QAAA,cAAc,EAAElD;AALlB,OAAA,EAAA,KAAA,CAAA,EAQG,UAAA,KAAA,EAAA;AAAA,YACSoD,OADT,GAAA,KAAA,CAAA,MAAA;AAAA,YAEChB,UAFD,GAAA,KAAA,CAAA,UAAA;AAAA,YAGCC,YAHD,GAAA,KAAA,CAAA,YAAA;AAAA,YAICC,YAJD,GAAA,KAAA,CAAA,YAAA;AAAA,YAKC9B,YALD,GAAA,KAAA,CAAA,YAAA;AAAA,YAMC0B,gBAND,GAAA,KAAA,CAAA,gBAAA;AAAA,YAOCmB,YAPD,GAAA,KAAA,CAAA,YAAA;AAAA,YAQIC,kBARJ,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,YAAA,EAAA,cAAA,EAAA,cAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,cAAA,CAAA,CAAA;;AAAA,eAUC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,UAAA,KAAK,EAAC;AAAZ,SAAA,EAAuBD,YAAY,CAAC;AAAEE,UAAAA,MAAM,EAAE;AAAV,SAAD,CAAnC,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,UAAA,gBAAgB,EADlB,KAAA;AAEE,UAAA,OAAO,EAFT,OAAA;AAGE,UAAA,QAAQ,EAHV,eAAA;AAIE,UAAA,QAAQ,EACNrC,QAAQ,KACP,MAAI,CAAJ,KAAA,CAAA,WAAA,GAAA,eAAA,GACGC,QAAQ,CADX,WAAA,GAEGA,QAAQ,CARhB,MAKY,CALZ;AAUE,UAAA,OAAO,EAAE,SAAA,OAAA,GAAM;AACb,mBAAO,MAAI,CAAJ,aAAA,CAAmB;AACxBY,cAAAA,KAAK,EAAEW,IAAI,CAAJA,GAAAA,CAAS,MAAI,CAAJ,KAAA,CAATA,WAAAA,EADiB,eACjBA,CADiB;AAExBN,cAAAA,UAAU,EAFc,UAAA;AAGxBC,cAAAA,YAAY,EAHY,YAAA;AAIxBC,cAAAA,YAAY,EAJY,YAAA;AAKxB9B,cAAAA,YAAY,EALY,YAAA;AAMxB0B,cAAAA,gBAAgB,EAAhBA;AANwB,aAAnB,CAAP;AAXJ,WAAA;AAoBE,UAAA,SAAS,EApBX,CAAA;AAqBE,UAAA,iBAAiB,EAAE;AArBrB,SAAA,EAuBG,UAAA,KAAA,EAAA;AAAA,cAAYsB,cAAZ,GAAA,KAAA,CAAA,OAAA;AAAA,cAA4BC,MAA5B,GAAA,KAAA,CAAA,MAAA;AAAA,cAAoCC,OAApC,GAAA,KAAA,CAAA,MAAA;AAAA,iBACC7C,QAAQ,CAAA,aAAA,CAAA;AACNuC,YAAAA,OAAO,EADD,cAAA;AAENK,YAAAA,MAAM,EAFA,MAAA;AAGNC,YAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,GAAA,EAAO;AACb;AACA,cAAA,MAAI,CAAJ,SAAA,GAAA,GAAA;;AACAA,cAAAA,OAAM,CAANA,GAAM,CAANA;AANI,aAAA;AAQNtB,YAAAA,UAAU,EARJ,UAAA;AASN5B,YAAAA,YAAY,EATN,YAAA;AAUN0B,YAAAA,gBAAgB,EAAhBA;AAVM,WAAA,EADT,kBACS,CAAA,CADT;AAlCN,SAWG,CADF,CAVD;AATL,OACE,CADF;AA+DD;;;;EAnSuC/B,a;;AAArBD,Y,YAAAA,G,cAAAA;;gBAAAA,Y;AAEjB;;;;AAIAE,EAAAA,KAAK,EAAEC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAAhDA,IAAoB,CAApBA,C;;AAEP;;;AAGAC,EAAAA,KAAK,EAAED,SAAS,CAATA,KAAAA,CAAgBE,U;;AAEvB;;;AAGAC,EAAAA,YAAY,EAAEH,SAAS,CAACI,G;;AAExB;;;AAGAC,EAAAA,mBAAmB,EAAEC,UAAU,CAC7BN,SAAS,CADoB,GAAA,EAAA,oCAAA,C;;AAK/B;;;AAGAO,EAAAA,iBAAiB,EAAED,UAAU,CAC3BN,SAAS,CADkB,GAAA,EAAA,kCAAA,C;;AAK7B;;;;AAIAR,EAAAA,YAAY,EAAEQ,SAAS,CAATA,IAAAA,CAAeE,U;;AAE7B;;;AAGAM,EAAAA,QAAQ,EAAER,SAAS,CAATA,IAAAA,CAAeE,U;;AAEzB;;;;AAIAO,EAAAA,QAAQ,EAAET,SAAS,CAACU,M;;AAEpB;;;AAGAC,EAAAA,UAAU,EAAEX,SAAS,CAACY,I;;AAEtB;;;AAGAC,EAAAA,QAAQ,EAAEb,SAAS,CAATA,KAAAA,CAAgB,CACxBc,QAAQ,CADgB,GAAA,EAExBA,QAAQ,CAFgB,QAAA,EAGxBA,QAAQ,CAHgB,SAAA,EAIxBA,QAAQ,CAJgB,MAAA,EAKxBA,QAAQ,CALgB,WAAA,EAMxBA,QAAQ,CANgB,YAAA,EAOxBA,QAAQ,CAPgB,IAAA,EAQxBA,QAAQ,CARAd,KAAgB,CAAhBA,C;;AAWV;;;;;AAKAe,EAAAA,WAAW,EAAEf,SAAS,CAACY,I;;AAEvB;;;;;AAKAI,EAAAA,gBAAgB,EAAEhB,SAAS,CAACiB,I;;AAE5B;;;AAGAC,EAAAA,eAAe,EAAElB,SAAS,CAACU,M;;AAE3B;;;AAGAS,EAAAA,gBAAgB,EAAEnB,SAAS,CAACU,M;;AAE5B;;;AAGAU,EAAAA,cAAc,EAAEd,UAAU,CACxBN,SAAS,CADe,IAAA,EAAA,qCAAA;GAKvBqB,SAAS,CAACC,S;;gBAtGIzB,Y,kBA6GG;AACpBL,EAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,CAAA,EAAC;AAAA,WAAKgC,CAAC,GAAGC,MAAM,CAAT,CAAS,CAAT,GAAN,EAAA;AADK,GAAA;AAEpBhB,EAAAA,QAAQ,EAFY,EAAA;AAGpBO,EAAAA,gBAAgB,EAHI,KAAA;AAIpBE,EAAAA,eAAe,EAJK,GAAA;AAKpBC,EAAAA,gBAAgB,EALI,GAAA;AAMpBR,EAAAA,UAAU,EAAEf;AANQ,C;;SA7GHC,Y","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport fuzzaldrin from 'fuzzaldrin-plus'\nimport Downshift from 'downshift'\nimport VirtualList from 'react-tiny-virtual-list'\nimport { Popover } from '../../popover'\nimport { Position } from '../../constants'\nimport { Heading } from '../../typography'\nimport { Pane } from '../../layers'\nimport deprecated from '../../lib/deprecated'\nimport AutocompleteItem from './AutocompleteItem'\n\nconst fuzzyFilter = itemToString => {\n  if (itemToString) {\n    return (items, input) => {\n      const wrappedItems = items.map(item => ({\n        key: itemToString(item),\n        item\n      }))\n\n      return fuzzaldrin\n        .filter(wrappedItems, input, { key: 'key' })\n        .map(({ item }) => item)\n    }\n  }\n\n  return (items, input) => fuzzaldrin.filter(items, input)\n}\n\nconst noop = () => {}\n\nconst autocompleteItemRenderer = props => <AutocompleteItem {...props} />\n\n// https://github.com/paypal/downshift/issues/164\nexport default class Autocomplete extends PureComponent {\n  static propTypes = {\n    /**\n     * This prop can be either a string or a Node.\n     * It will provide a title for the items\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n    /**\n     * An array of items to be used as options for the select\n     */\n    items: PropTypes.array.isRequired,\n\n    /**\n     * The selected Item to be shown on the autocomplete\n     */\n    selectedItem: PropTypes.any,\n\n    /**\n     * The selected item to be selected & shown by default on the autocomplete (deprecated)\n     */\n    defaultSelectedItem: deprecated(\n      PropTypes.any,\n      'Use \"initialSelectedItem\" instead.'\n    ),\n\n    /**\n     * The selected item to be selected & shown by default on the autocomplete (deprecated)\n     */\n    defaultInputValue: deprecated(\n      PropTypes.any,\n      'Use \"initialInputValue\" instead.'\n    ),\n\n    /**\n     * In case the array of items is not an array of strings,\n     * this function is used on each item to return the string that will be shown on the filter\n     */\n    itemToString: PropTypes.func.isRequired,\n\n    /**\n     * Function that will render the 'filter' component.\n     */\n    children: PropTypes.func.isRequired,\n\n    /**\n     * The height of each item in the list\n     * Because the list is virtualized this is required beforehand.\n     */\n    itemSize: PropTypes.number,\n\n    /**\n     * Function that returns a component to render the item\n     */\n    renderItem: PropTypes.func,\n\n    /**\n     * The position of the Popover the Autocomplete is rendered in.\n     */\n    position: PropTypes.oneOf([\n      Position.TOP,\n      Position.TOP_LEFT,\n      Position.TOP_RIGHT,\n      Position.BOTTOM,\n      Position.BOTTOM_LEFT,\n      Position.BOTTOM_RIGHT,\n      Position.LEFT,\n      Position.RIGHT\n    ]),\n\n    /**\n     * A function that is used to filter the items.\n     * It should return a subset of the initial items.\n     * By default the \"fuzzaldrin-plus\" package is used.\n     */\n    itemsFilter: PropTypes.func,\n\n    /**\n     * Prop that enables and disables filtering\n     * True: Enables Filtering\n     * False: Disables Filtering\n     */\n    isFilterDisabled: PropTypes.bool,\n\n    /**\n     * Defines the minimum height the results container will be\n     */\n    popoverMinWidth: PropTypes.number,\n\n    /**\n     * Defines the maximum height the results container will be\n     */\n    popoverMaxHeight: PropTypes.number,\n\n    /**\n     * The selected item to be selected & shown by default on the autocomplete (deprecated)\n     */\n    getButtonProps: deprecated(\n      PropTypes.func,\n      'Use \"getToggleButtonProps\" instead.'\n    ),\n\n    ...Downshift.propTypes\n  }\n\n  state = {\n    targetWidth: 0\n  }\n\n  static defaultProps = {\n    itemToString: i => (i ? String(i) : ''),\n    itemSize: 32,\n    isFilterDisabled: false,\n    popoverMinWidth: 240,\n    popoverMaxHeight: 240,\n    renderItem: autocompleteItemRenderer\n  }\n\n  componentDidMount() {\n    this.setState({\n      targetWidth: this.targetRef.getBoundingClientRect().width\n    })\n  }\n\n  stateReducer = (state, changes) => {\n    const { items } = this.props\n\n    if (\n      Object.prototype.hasOwnProperty.call(changes, 'isOpen') &&\n      changes.isOpen\n    ) {\n      return {\n        ...changes,\n        highlightedIndex: items.indexOf(state.selectedItem)\n      }\n    }\n\n    return changes\n  }\n\n  renderResults = ({\n    width,\n    inputValue,\n    highlightedIndex,\n    selectedItem,\n    getItemProps,\n    getMenuProps\n  }) => {\n    const {\n      title,\n      itemSize,\n      itemsFilter,\n      items: originalItems,\n      itemToString,\n      renderItem,\n      popoverMaxHeight,\n      isFilterDisabled\n    } = this.props\n\n    const filter = itemsFilter || fuzzyFilter(itemToString)\n    const items =\n      isFilterDisabled || inputValue.trim() === ''\n        ? originalItems\n        : filter(originalItems, inputValue)\n\n    if (items.length === 0) return null\n\n    // Pass the actual DOM ref to downshift, this fixes touch support\n    const menuProps = getMenuProps()\n    menuProps.innerRef = menuProps.ref\n    delete menuProps.ref\n\n    return (\n      <Pane width={width} {...menuProps}>\n        {title && (\n          <Pane padding={8} borderBottom=\"muted\">\n            <Heading size={100}>{title}</Heading>\n          </Pane>\n        )}\n        {items.length > 0 && (\n          <VirtualList\n            width=\"100%\"\n            height={Math.min(items.length * itemSize, popoverMaxHeight)}\n            itemSize={itemSize}\n            itemCount={items.length}\n            scrollToIndex={highlightedIndex || 0}\n            overscanCount={3}\n            scrollToAlignment=\"auto\"\n            renderItem={({ index, style }) => {\n              const item = items[index]\n              const itemString = itemToString(item)\n\n              return renderItem(\n                getItemProps({\n                  item,\n                  key: itemString,\n                  index,\n                  style,\n                  children: itemString,\n                  isSelected: itemToString(selectedItem) === itemString,\n                  isHighlighted: highlightedIndex === index\n                })\n              )\n            }}\n          />\n        )}\n      </Pane>\n    )\n  }\n\n  render() {\n    const {\n      children,\n      itemSize,\n      position,\n      renderItem,\n      itemsFilter,\n      popoverMaxHeight,\n      popoverMinWidth,\n      defaultSelectedItem, // Deprecated\n      initialSelectedItem,\n      defaultInputValue, // Deprecated\n      initialInputValue,\n      getButtonProps, // Deprecated\n      getToggleButtonProps,\n      ...props\n    } = this.props\n\n    return (\n      <Downshift\n        initialSelectedItem={initialSelectedItem || defaultSelectedItem}\n        initialInputValue={initialInputValue || defaultInputValue}\n        getToggleButtonProps={getToggleButtonProps || getButtonProps}\n        stateReducer={this.stateReducer}\n        scrollIntoView={noop}\n        {...props}\n      >\n        {({\n          isOpen: isShown,\n          inputValue,\n          getItemProps,\n          getMenuProps,\n          selectedItem,\n          highlightedIndex,\n          getRootProps,\n          ...restDownshiftProps\n        }) => (\n          <Pane width=\"100%\" {...getRootProps({ refKey: 'innerRef' })}>\n            <Popover\n              bringFocusInside={false}\n              isShown={isShown}\n              minWidth={popoverMinWidth}\n              position={\n                position ||\n                (this.state.targetWidth < popoverMinWidth\n                  ? Position.BOTTOM_LEFT\n                  : Position.BOTTOM)\n              }\n              content={() => {\n                return this.renderResults({\n                  width: Math.max(this.state.targetWidth, popoverMinWidth),\n                  inputValue,\n                  getItemProps,\n                  getMenuProps,\n                  selectedItem,\n                  highlightedIndex\n                })\n              }}\n              minHeight={0}\n              animationDuration={0}\n            >\n              {({ isShown: isShownPopover, toggle, getRef }) =>\n                children({\n                  isShown: isShownPopover,\n                  toggle,\n                  getRef: ref => {\n                    // Use the ref internally to determine the width\n                    this.targetRef = ref\n                    getRef(ref)\n                  },\n                  inputValue,\n                  selectedItem,\n                  highlightedIndex,\n                  ...restDownshiftProps\n                })\n              }\n            </Popover>\n          </Pane>\n        )}\n      </Downshift>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}