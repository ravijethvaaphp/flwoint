{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport VirtualList from 'react-tiny-virtual-list';\nimport debounce from 'lodash.debounce';\nimport { Pane } from '../../layers';\n\nvar TableVirtualBody = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TableVirtualBody, _PureComponent);\n\n  _createClass(TableVirtualBody, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.height !== state.calculatedHeight) {\n        return {\n          isIntegerHeight: Number.isInteger(props.height)\n        };\n      } // Return null to indicate no change to state.\n\n\n      return null;\n    }\n  }]);\n\n  function TableVirtualBody(props) {\n    var _this;\n\n    _classCallCheck(this, TableVirtualBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TableVirtualBody).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isIntegerHeight: false,\n      calculatedHeight: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initializeHelpers\", function () {\n      _this.autoHeights = [];\n      _this.autoHeightRefs = [];\n      _this.averageAutoHeight = _this.props.defaultHeight;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"processAutoHeights\", function () {\n      var isUpdated = false; // This will determine the averageAutoHeight.\n\n      var total = 0;\n      var totalAmount = 0; // Loop through all of the refs that have height=\"auto\".\n\n      _this.autoHeightRefs.forEach(function (ref, index) {\n        // If the height is already calculated, skip it,\n        // but calculate the height for the total.\n        if (_this.autoHeights[index]) {\n          total += _this.autoHeights[index];\n          totalAmount += 1;\n          return;\n        } // Make sure the ref has a child\n\n\n        if (ref && ref.childNodes && ref.childNodes[0] && Number.isInteger(ref.childNodes[0].offsetHeight)) {\n          var height = ref.childNodes[0].offsetHeight; // Add to the total to calculate the averageAutoHeight.\n\n          total += height;\n          totalAmount += 1; // Cache the height.\n\n          _this.autoHeights[index] = height; // Set the update flag to true.\n\n          isUpdated = true;\n        }\n      }); // Save the average height.\n\n\n      _this.averageAutoHeight = total / totalAmount; // There are some new heights detected that had previously not been calculated.\n      // Call forceUpdate to make sure the virtual list renders again.\n\n      if (isUpdated) _this.forceUpdate();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRef\", function (ref) {\n      _this.paneRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onVirtualHelperRef\", function (index, ref) {\n      _this.autoHeightRefs[index] = ref;\n      requestAnimationFrame(function () {\n        _this.processAutoHeights();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function () {\n      _this.updateOnResize();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateOnResize\", function () {\n      _this.initializeHelpers(); // Simply return when we now the height of the pane is fixed.\n\n\n      if (_this.state.isIntegerHeight) return; // Return if we are in a weird edge case in which the ref is no longer valid.\n\n      if (_this.paneRef) {\n        var calculatedHeight = _this.paneRef.offsetHeight;\n\n        if (calculatedHeight > 0) {\n          // Save the calculated height which is needed for the VirtualList.\n          _this.setState({\n            calculatedHeight: calculatedHeight\n          }); // Prevent updateOnResize being called recursively when there is a valid height.\n\n\n          return;\n        }\n      } // When height is still 0 (or paneRef is not valid) try recursively until success.\n\n\n      requestAnimationFrame(function () {\n        _this.updateOnResize();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getItemSize\", function (children) {\n      var _this$props = _this.props,\n          allowAutoHeight = _this$props.allowAutoHeight,\n          useAverageAutoHeightEstimation = _this$props.useAverageAutoHeightEstimation,\n          defaultHeight = _this$props.defaultHeight; // Prefer to return a array of all heights.\n\n      if (!allowAutoHeight) {\n        return children.map(function (child) {\n          if (!React.isValidElement(child)) return defaultHeight;\n          var height = child.props.height;\n\n          if (Number.isInteger(height)) {\n            return height;\n          }\n\n          return defaultHeight;\n        });\n      } // If allowAutoHeight is true, return a function instead.\n\n\n      var itemSizeFn = function itemSizeFn(index) {\n        if (!React.isValidElement(children[index])) return defaultHeight;\n        var height = children[index].props.height; // When the height is number simply, simply return it.\n\n        if (Number.isInteger(height)) {\n          return height;\n        } // When allowAutoHeight is set and  the height is set to \"auto\"...\n\n\n        if (allowAutoHeight && children[index].props.height === 'auto') {\n          // ... and the height is calculated, return the calculated height.\n          if (_this.autoHeights[index]) return _this.autoHeights[index]; // ... if the height is not yet calculated, return the averge\n\n          if (useAverageAutoHeightEstimation) return _this.averageAutoHeight;\n        } // Return the default height.\n\n\n        return defaultHeight;\n      };\n\n      return itemSizeFn;\n    });\n\n    _this.initializeHelpers(); // Add a onResize.\n\n\n    _this.onResize = debounce(_this.onResize, 200);\n    return _this;\n  }\n\n  _createClass(TableVirtualBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Call this to initialize and set\n      this.updateOnResize();\n      window.addEventListener('resize', this.onResize, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          inputChildren = _this$props2.children,\n          paneHeight = _this$props2.height,\n          defaultHeight = _this$props2.defaultHeight,\n          allowAutoHeight = _this$props2.allowAutoHeight,\n          overscanCount = _this$props2.overscanCount,\n          estimatedItemSize = _this$props2.estimatedItemSize,\n          useAverageAutoHeightEstimation = _this$props2.useAverageAutoHeightEstimation,\n          scrollToIndex = _this$props2.scrollToIndex,\n          scrollOffset = _this$props2.scrollOffset,\n          scrollToAlignment = _this$props2.scrollToAlignment,\n          onScroll = _this$props2.onScroll,\n          props = _objectWithoutProperties(_this$props2, [\"children\", \"height\", \"defaultHeight\", \"allowAutoHeight\", \"overscanCount\", \"estimatedItemSize\", \"useAverageAutoHeightEstimation\", \"scrollToIndex\", \"scrollOffset\", \"scrollToAlignment\", \"onScroll\"]); // Children always needs to be an array.\n\n\n      var children = Array.isArray(inputChildren) ? inputChildren : React.Children.toArray(inputChildren);\n      var itemSize = this.getItemSize(children); // VirtualList needs a fixed height.\n\n      var _this$state = this.state,\n          calculatedHeight = _this$state.calculatedHeight,\n          isIntegerHeight = _this$state.isIntegerHeight;\n      return React.createElement(Pane, _extends({\n        \"data-evergreen-table-body\": true,\n        innerRef: this.onRef,\n        height: paneHeight,\n        flex: \"1\",\n        overflow: \"hidden\"\n      }, props), React.createElement(VirtualList, {\n        height: isIntegerHeight ? paneHeight : calculatedHeight,\n        width: \"100%\",\n        estimatedItemSize: allowAutoHeight && useAverageAutoHeightEstimation ? this.averageAutoHeight : estimatedItemSize || null,\n        itemSize: itemSize,\n        overscanCount: overscanCount,\n        itemCount: React.Children.count(children),\n        scrollToIndex: scrollToIndex,\n        scrollOffset: scrollOffset,\n        scrollToAlignment: scrollToAlignment,\n        onScroll: onScroll,\n        renderItem: function renderItem(_ref) {\n          var index = _ref.index,\n              style = _ref.style;\n          var child = children[index];\n          var key = child.key || index;\n          var props = {\n            key: key,\n            style: style\n          }; // If some children are strings by accident, support this gracefully.\n\n          if (!React.isValidElement(child)) {\n            if (typeof child === 'string') {\n              return React.createElement(\"div\", props, child);\n            }\n\n            return React.createElement(\"div\", props, \"\\xA0\");\n          } // When allowing height=\"auto\" for rows, and a auto height item is\n          // rendered for the first time...\n\n\n          if (allowAutoHeight && React.isValidElement(child) && child.props.height === 'auto' && // ... and only when the height is not already been calculated.\n          !_this2.autoHeights[index]) {\n            // ... render the item in a helper div, the ref is used to calculate\n            // the height of its children.\n            return React.createElement(\"div\", _extends({\n              ref: function ref(_ref2) {\n                return _this2.onVirtualHelperRef(index, _ref2);\n              },\n              \"data-virtual-index\": index\n            }, props, {\n              style: _objectSpread({\n                opacity: 0\n              }, props.style)\n            }), child);\n          } // When allowAutoHeight is false, or when the height is known.\n          // Simply render the item.\n\n\n          return React.cloneElement(child, props);\n        }\n      }));\n    }\n  }]);\n\n  return TableVirtualBody;\n}(PureComponent);\n\nTableVirtualBody.displayName = \"TableVirtualBody\";\n\n_defineProperty(TableVirtualBody, \"propTypes\", _objectSpread({}, Pane.propTypes, {\n  /**\n   * Children needs to be an array of a single node.\n   */\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n\n  /**\n   * Default height of each row.\n   * 48 is the default height of a TableRow.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * When true, support `height=\"auto\"` on children being rendered.\n   * This is somewhat of an expirmental feature.\n   */\n  allowAutoHeight: PropTypes.bool,\n\n  /**\n   * The overscanCount property passed to react-tiny-virtual-list.\n   */\n  overscanCount: PropTypes.number.isRequired,\n\n  /**\n   * When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\n   * Only when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.\n   */\n  estimatedItemSize: PropTypes.number,\n\n  /**\n   * When allowAutoHeight is true and this prop is true, the estimated height\n   * will be computed based on the average height of auto height rows.\n   */\n  useAverageAutoHeightEstimation: PropTypes.bool,\n\n  /**\n   * The scrollToIndex property passed to react-tiny-virtual-list\n   */\n  scrollToIndex: PropTypes.number,\n\n  /**\n   * The scrollOffset property passed to react-tiny-virtual-list\n   */\n  scrollOffset: PropTypes.number,\n\n  /**\n   * The scrollToAlignment property passed to react-tiny-virtual-list\n   */\n  scrollToAlignment: PropTypes.oneOf(['start', 'center', 'end', 'auto']),\n\n  /**\n   * The onScroll callback passed to react-tiny-virtual-list\n   */\n  onScroll: PropTypes.func\n}));\n\n_defineProperty(TableVirtualBody, \"defaultProps\", {\n  defaultHeight: 48,\n  allowAutoHeight: false,\n  overscanCount: 5,\n  useAverageAutoHeightEstimation: true\n});\n\nexport { TableVirtualBody as default };","map":{"version":3,"sources":["../../../src/table/src/TableVirtualBody.js"],"names":["TableVirtualBody","PureComponent","Pane","propTypes","children","PropTypes","defaultHeight","number","allowAutoHeight","bool","overscanCount","isRequired","estimatedItemSize","useAverageAutoHeightEstimation","scrollToIndex","scrollOffset","scrollToAlignment","onScroll","func","isIntegerHeight","calculatedHeight","props","state","Number","debounce","window","isUpdated","total","totalAmount","ref","height","requestAnimationFrame","React","child","itemSizeFn","inputChildren","paneHeight","Array","itemSize","index","style","key","opacity"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport VirtualList from 'react-tiny-virtual-list'\nimport debounce from 'lodash.debounce'\nimport { Pane } from '../../layers'\n\nexport default class TableVirtualBody extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Pane component as the base.\n     */\n    ...Pane.propTypes,\n\n    /**\n     * Children needs to be an array of a single node.\n     */\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node\n    ]),\n\n    /**\n     * Default height of each row.\n     * 48 is the default height of a TableRow.\n     */\n    defaultHeight: PropTypes.number,\n\n    /**\n     * When true, support `height=\"auto\"` on children being rendered.\n     * This is somewhat of an expirmental feature.\n     */\n    allowAutoHeight: PropTypes.bool,\n\n    /**\n     * The overscanCount property passed to react-tiny-virtual-list.\n     */\n    overscanCount: PropTypes.number.isRequired,\n\n    /**\n     * When passed, this is used as the `estimatedItemSize` in react-tiny-virtual-list.\n     * Only when `allowAutoHeight` and`useAverageAutoHeightEstimation` are false.\n     */\n    estimatedItemSize: PropTypes.number,\n\n    /**\n     * When allowAutoHeight is true and this prop is true, the estimated height\n     * will be computed based on the average height of auto height rows.\n     */\n    useAverageAutoHeightEstimation: PropTypes.bool,\n\n    /**\n     * The scrollToIndex property passed to react-tiny-virtual-list\n     */\n    scrollToIndex: PropTypes.number,\n    /**\n     * The scrollOffset property passed to react-tiny-virtual-list\n     */\n    scrollOffset: PropTypes.number,\n    /**\n     * The scrollToAlignment property passed to react-tiny-virtual-list\n     */\n    scrollToAlignment: PropTypes.oneOf(['start', 'center', 'end', 'auto']),\n    /**\n     * The onScroll callback passed to react-tiny-virtual-list\n     */\n    onScroll: PropTypes.func\n  }\n\n  static defaultProps = {\n    defaultHeight: 48,\n    allowAutoHeight: false,\n    overscanCount: 5,\n    useAverageAutoHeightEstimation: true\n  }\n\n  state = {\n    isIntegerHeight: false,\n    calculatedHeight: 0\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.height !== state.calculatedHeight) {\n      return {\n        isIntegerHeight: Number.isInteger(props.height)\n      }\n    }\n\n    // Return null to indicate no change to state.\n    return null\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.initializeHelpers()\n\n    // Add a onResize.\n    this.onResize = debounce(this.onResize, 200)\n  }\n\n  componentDidMount() {\n    // Call this to initialize and set\n    this.updateOnResize()\n    window.addEventListener('resize', this.onResize, false)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  initializeHelpers = () => {\n    this.autoHeights = []\n    this.autoHeightRefs = []\n    this.averageAutoHeight = this.props.defaultHeight\n  }\n\n  /**\n   * This function will process all items that have height=\"auto\" set.\n   * It will loop through all refs and get calculate the height.\n   */\n  processAutoHeights = () => {\n    let isUpdated = false\n\n    // This will determine the averageAutoHeight.\n    let total = 0\n    let totalAmount = 0\n\n    // Loop through all of the refs that have height=\"auto\".\n    this.autoHeightRefs.forEach((ref, index) => {\n      // If the height is already calculated, skip it,\n      // but calculate the height for the total.\n      if (this.autoHeights[index]) {\n        total += this.autoHeights[index]\n        totalAmount += 1\n        return\n      }\n\n      // Make sure the ref has a child\n      if (\n        ref &&\n        ref.childNodes &&\n        ref.childNodes[0] &&\n        Number.isInteger(ref.childNodes[0].offsetHeight)\n      ) {\n        const height = ref.childNodes[0].offsetHeight\n\n        // Add to the total to calculate the averageAutoHeight.\n        total += height\n        totalAmount += 1\n\n        // Cache the height.\n        this.autoHeights[index] = height\n\n        // Set the update flag to true.\n        isUpdated = true\n      }\n    })\n\n    // Save the average height.\n    this.averageAutoHeight = total / totalAmount\n\n    // There are some new heights detected that had previously not been calculated.\n    // Call forceUpdate to make sure the virtual list renders again.\n    if (isUpdated) this.forceUpdate()\n  }\n\n  onRef = ref => {\n    this.paneRef = ref\n  }\n\n  onVirtualHelperRef = (index, ref) => {\n    this.autoHeightRefs[index] = ref\n\n    requestAnimationFrame(() => {\n      this.processAutoHeights()\n    })\n  }\n\n  onResize = () => {\n    this.updateOnResize()\n  }\n\n  updateOnResize = () => {\n    this.initializeHelpers()\n\n    // Simply return when we now the height of the pane is fixed.\n    if (this.state.isIntegerHeight) return\n\n    // Return if we are in a weird edge case in which the ref is no longer valid.\n    if (this.paneRef) {\n      const calculatedHeight = this.paneRef.offsetHeight\n\n      if (calculatedHeight > 0) {\n        // Save the calculated height which is needed for the VirtualList.\n        this.setState({\n          calculatedHeight\n        })\n\n        // Prevent updateOnResize being called recursively when there is a valid height.\n        return\n      }\n    }\n\n    // When height is still 0 (or paneRef is not valid) try recursively until success.\n    requestAnimationFrame(() => {\n      this.updateOnResize()\n    })\n  }\n\n  getItemSize = children => {\n    const {\n      allowAutoHeight,\n      useAverageAutoHeightEstimation,\n      defaultHeight\n    } = this.props\n\n    // Prefer to return a array of all heights.\n    if (!allowAutoHeight) {\n      return children.map(child => {\n        if (!React.isValidElement(child)) return defaultHeight\n        const { height } = child.props\n\n        if (Number.isInteger(height)) {\n          return height\n        }\n\n        return defaultHeight\n      })\n    }\n\n    // If allowAutoHeight is true, return a function instead.\n    const itemSizeFn = index => {\n      if (!React.isValidElement(children[index])) return defaultHeight\n      const { height } = children[index].props\n\n      // When the height is number simply, simply return it.\n      if (Number.isInteger(height)) {\n        return height\n      }\n\n      // When allowAutoHeight is set and  the height is set to \"auto\"...\n      if (allowAutoHeight && children[index].props.height === 'auto') {\n        // ... and the height is calculated, return the calculated height.\n        if (this.autoHeights[index]) return this.autoHeights[index]\n\n        // ... if the height is not yet calculated, return the averge\n        if (useAverageAutoHeightEstimation) return this.averageAutoHeight\n      }\n\n      // Return the default height.\n      return defaultHeight\n    }\n\n    return itemSizeFn\n  }\n\n  render() {\n    const {\n      children: inputChildren,\n      height: paneHeight,\n      defaultHeight,\n      allowAutoHeight,\n      overscanCount,\n      estimatedItemSize,\n      useAverageAutoHeightEstimation,\n      scrollToIndex,\n      scrollOffset,\n      scrollToAlignment,\n      onScroll,\n      ...props\n    } = this.props\n\n    // Children always needs to be an array.\n    const children = Array.isArray(inputChildren)\n      ? inputChildren\n      : React.Children.toArray(inputChildren)\n\n    const itemSize = this.getItemSize(children)\n\n    // VirtualList needs a fixed height.\n    const { calculatedHeight, isIntegerHeight } = this.state\n\n    return (\n      <Pane\n        data-evergreen-table-body\n        innerRef={this.onRef}\n        height={paneHeight}\n        flex=\"1\"\n        overflow=\"hidden\"\n        {...props}\n      >\n        <VirtualList\n          height={isIntegerHeight ? paneHeight : calculatedHeight}\n          width=\"100%\"\n          estimatedItemSize={\n            allowAutoHeight && useAverageAutoHeightEstimation\n              ? this.averageAutoHeight\n              : estimatedItemSize || null\n          }\n          itemSize={itemSize}\n          overscanCount={overscanCount}\n          itemCount={React.Children.count(children)}\n          scrollToIndex={scrollToIndex}\n          scrollOffset={scrollOffset}\n          scrollToAlignment={scrollToAlignment}\n          onScroll={onScroll}\n          renderItem={({ index, style }) => {\n            const child = children[index]\n            const key = child.key || index\n            const props = {\n              key,\n              style\n            }\n\n            // If some children are strings by accident, support this gracefully.\n            if (!React.isValidElement(child)) {\n              if (typeof child === 'string') {\n                return <div {...props}>{child}</div>\n              }\n\n              return <div {...props}>&nbsp;</div>\n            }\n\n            // When allowing height=\"auto\" for rows, and a auto height item is\n            // rendered for the first time...\n            if (\n              allowAutoHeight &&\n              React.isValidElement(child) &&\n              child.props.height === 'auto' &&\n              // ... and only when the height is not already been calculated.\n              !this.autoHeights[index]\n            ) {\n              // ... render the item in a helper div, the ref is used to calculate\n              // the height of its children.\n              return (\n                <div\n                  ref={ref => this.onVirtualHelperRef(index, ref)}\n                  data-virtual-index={index}\n                  {...props}\n                  style={{\n                    opacity: 0,\n                    ...props.style\n                  }}\n                >\n                  {child}\n                </div>\n              )\n            }\n\n            // When allowAutoHeight is false, or when the height is known.\n            // Simply render the item.\n            return React.cloneElement(child, props)\n          }}\n        />\n      </Pane>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}