{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { withTheme } from '../../theme';\nimport Text from './Text';\n\nvar Code = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Code, _PureComponent);\n\n  function Code() {\n    _classCallCheck(this, Code);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Code).apply(this, arguments));\n  }\n\n  _createClass(Code, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          appearance = _this$props.appearance,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"appearance\"]);\n\n      var _theme$getCodeProps = theme.getCodeProps(appearance),\n          _theme$getCodeProps$c = _theme$getCodeProps.className,\n          themedClassName = _theme$getCodeProps$c === void 0 ? '' : _theme$getCodeProps$c,\n          themeProps = _objectWithoutProperties(_theme$getCodeProps, [\"className\"]);\n\n      return React.createElement(Text, _extends({\n        is: \"code\",\n        className: cx(className, themedClassName),\n        fontFamily: \"mono\"\n      }, themeProps, props));\n    }\n  }]);\n\n  return Code;\n}(PureComponent);\n\nCode.displayName = \"Code\";\n\n_defineProperty(Code, \"propTypes\", _objectSpread({}, Text.propTypes, {\n  /**\n   * The appearance of the code.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal']).isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(Code, \"defaultProps\", {\n  appearance: 'default'\n});\n\nexport default withTheme(Code);","map":{"version":3,"sources":["../../../src/typography/src/Code.js"],"names":["Code","PureComponent","Text","propTypes","appearance","PropTypes","isRequired","theme","className","string","props","themedClassName","themeProps","cx","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,OAAA,IAAA,MAAA,QAAA;;IAEMA,I;;;;;;;;;;;6BAyBK;AAAA,UAAA,WAAA,GAC4C,KAD5C,KAAA;AAAA,UACCO,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,SADR,GAAA,WAAA,CAAA,SAAA;AAAA,UACmBJ,UADnB,GAAA,WAAA,CAAA,UAAA;AAAA,UACkCM,KADlC,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,YAAA,CAAA,CAAA;;AAAA,UAAA,mBAAA,GAMHH,KAAK,CAALA,YAAAA,CANG,UAMHA,CANG;AAAA,UAAA,qBAAA,GAAA,mBAAA,CAAA,SAAA;AAAA,UAIMI,eAJN,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,UAKFC,UALE,GAAA,wBAAA,CAAA,mBAAA,EAAA,CAAA,WAAA,CAAA,CAAA;;AAQP,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,QAAA,EAAE,EADJ,MAAA;AAEE,QAAA,SAAS,EAAEC,EAAE,CAAA,SAAA,EAFf,eAEe,CAFf;AAGE,QAAA,UAAU,EAAC;AAHb,OAAA,EAAA,UAAA,EADF,KACE,CAAA,CADF;AASD;;;;EA1CgBZ,a;;AAAbD,I,YAAAA,G,MAAAA;;gBAAAA,I,iCAECE,IAAI,CAACC,S;AAER;;;AAGAC,EAAAA,UAAU,EAAEC,SAAS,CAATA,KAAAA,CAAgB,CAAA,SAAA,EAAhBA,SAAgB,CAAhBA,EAAwCC,U;;AAEpD;;;AAGAC,EAAAA,KAAK,EAAEF,SAAS,CAATA,MAAAA,CAAiBC,U;;AAExB;;;;AAIAE,EAAAA,SAAS,EAAEH,SAAS,CAACI;;;gBAlBnBT,I,kBAqBkB;AACpBI,EAAAA,UAAU,EAAE;AADQ,C;;AAwBxB,eAAeU,SAAS,CAAxB,IAAwB,CAAxB","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { withTheme } from '../../theme'\nimport Text from './Text'\n\nclass Code extends PureComponent {\n  static propTypes = {\n    ...Text.propTypes,\n\n    /**\n     * The appearance of the code.\n     */\n    appearance: PropTypes.oneOf(['default', 'minimal']).isRequired,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Class name passed to the button.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    appearance: 'default'\n  }\n\n  render() {\n    const { theme, className, appearance, ...props } = this.props\n\n    const {\n      className: themedClassName = '',\n      ...themeProps\n    } = theme.getCodeProps(appearance)\n\n    return (\n      <Text\n        is=\"code\"\n        className={cx(className, themedClassName)}\n        fontFamily=\"mono\"\n        {...themeProps}\n        {...props}\n      />\n    )\n  }\n}\n\nexport default withTheme(Code)\n"]},"metadata":{},"sourceType":"module"}