{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Pane } from '../../layers';\nimport { withTheme } from '../../theme';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { TableRowProvider } from './TableRowContext';\nimport manageTableRowFocusInteraction from './manageTableRowFocusInteraction';\n\nvar TableRow = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TableRow, _PureComponent);\n\n  function TableRow() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TableRow);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableRow)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (e) {\n      if (typeof _this.props.onClick === 'function') {\n        _this.props.onClick(e);\n      }\n\n      if (_this.props.isSelectable) {\n        if (_this.props.isSelected) {\n          _this.props.onDeselect();\n        } else {\n          _this.props.onSelect();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (e) {\n      if (_this.props.isSelectable) {\n        var key = e.key;\n\n        if (key === 'Enter' || key === ' ') {\n          _this.props.onSelect();\n\n          e.preventDefault();\n        } else if (key === 'ArrowUp' || key === 'ArrowDown') {\n          try {\n            manageTableRowFocusInteraction(key, _this.mainRef);\n          } catch (_) {}\n        } else if (key === 'Escape') {\n          if (_this.mainRef) _this.mainRef.blur();\n        }\n      }\n\n      _this.props.onKeyPress(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRef\", function (ref) {\n      _this.mainRef = ref;\n      safeInvoke(_this.props.innerRef, ref);\n    });\n\n    return _this;\n  }\n\n  _createClass(TableRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          innerRef = _this$props.innerRef,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          height = _this$props.height,\n          children = _this$props.children,\n          intent = _this$props.intent,\n          appearance = _this$props.appearance,\n          _this$props$tabIndex = _this$props.tabIndex,\n          tabIndex = _this$props$tabIndex === void 0 ? -1 : _this$props$tabIndex,\n          onClick = _this$props.onClick,\n          onKeyPress = _this$props.onKeyPress,\n          onSelect = _this$props.onSelect,\n          onDeselect = _this$props.onDeselect,\n          isHighlighted = _this$props.isHighlighted,\n          isSelectable = _this$props.isSelectable,\n          isSelected = _this$props.isSelected,\n          props = _objectWithoutProperties(_this$props, [\"innerRef\", \"theme\", \"className\", \"height\", \"children\", \"intent\", \"appearance\", \"tabIndex\", \"onClick\", \"onKeyPress\", \"onSelect\", \"onDeselect\", \"isHighlighted\", \"isSelectable\", \"isSelected\"]);\n\n      var themedClassName = theme.getRowClassName(appearance, intent);\n      return React.createElement(TableRowProvider, {\n        height: height\n      }, React.createElement(Pane, _extends({\n        innerRef: this.onRef,\n        className: cx(themedClassName, className),\n        display: \"flex\",\n        \"aria-selected\": isHighlighted,\n        \"aria-current\": isSelected,\n        \"data-isselectable\": isSelectable,\n        tabIndex: isSelectable ? tabIndex : undefined,\n        onClick: this.handleClick,\n        onKeyDown: this.handleKeyDown,\n        height: height,\n        borderBottom: \"muted\"\n      }, props), children));\n    }\n  }]);\n\n  return TableRow;\n}(PureComponent);\n\nTableRow.displayName = \"TableRow\";\n\n_defineProperty(TableRow, \"propTypes\", _objectSpread({}, Pane.propTypes, {\n  /**\n   * The height of the row. Remember to add paddings when using \"auto\".\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Makes the TableRow selectable.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * Makes the TableRow selected.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * Manually set the TableRow to be highlighted.\n   */\n  isHighlighted: PropTypes.bool,\n\n  /**\n   * The intent of the alert.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the table row.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(TableRow, \"defaultProps\", {\n  intent: 'none',\n  appearance: 'default',\n  height: 48,\n  onSelect: function onSelect() {},\n  onDeselect: function onDeselect() {},\n  onKeyPress: function onKeyPress() {}\n});\n\nexport default withTheme(TableRow);","map":{"version":3,"sources":["../../../src/table/src/TableRow.js"],"names":["TableRow","PureComponent","Pane","propTypes","height","PropTypes","isRequired","onSelect","func","onDeselect","isSelectable","bool","isSelected","isHighlighted","intent","appearance","theme","className","string","onKeyPress","key","e","manageTableRowFocusInteraction","safeInvoke","innerRef","children","tabIndex","onClick","props","themedClassName","cx","withTheme"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { Pane } from '../../layers'\nimport { withTheme } from '../../theme'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { TableRowProvider } from './TableRowContext'\nimport manageTableRowFocusInteraction from './manageTableRowFocusInteraction'\n\nclass TableRow extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Pane component as the base.\n     */\n    ...Pane.propTypes,\n\n    /**\n     * The height of the row. Remember to add paddings when using \"auto\".\n     */\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n      .isRequired,\n\n    /**\n     * Function that is called on click and enter/space keypress.\n     */\n    onSelect: PropTypes.func,\n\n    /**\n     * Function that is called on click and enter/space keypress.\n     */\n    onDeselect: PropTypes.func,\n\n    /**\n     * Makes the TableRow selectable.\n     */\n    isSelectable: PropTypes.bool,\n\n    /**\n     * Makes the TableRow selected.\n     */\n    isSelected: PropTypes.bool,\n\n    /**\n     * Manually set the TableRow to be highlighted.\n     */\n    isHighlighted: PropTypes.bool,\n\n    /**\n     * The intent of the alert.\n     */\n    intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger'])\n      .isRequired,\n\n    /**\n     * The appearance of the table row. Default theme only support default.\n     */\n    appearance: PropTypes.string.isRequired,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Class name passed to the table row.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    intent: 'none',\n    appearance: 'default',\n    height: 48,\n    onSelect: () => {},\n    onDeselect: () => {},\n    onKeyPress: () => {}\n  }\n\n  handleClick = e => {\n    if (typeof this.props.onClick === 'function') {\n      this.props.onClick(e)\n    }\n\n    if (this.props.isSelectable) {\n      if (this.props.isSelected) {\n        this.props.onDeselect()\n      } else {\n        this.props.onSelect()\n      }\n    }\n  }\n\n  handleKeyDown = e => {\n    if (this.props.isSelectable) {\n      const { key } = e\n      if (key === 'Enter' || key === ' ') {\n        this.props.onSelect()\n        e.preventDefault()\n      } else if (key === 'ArrowUp' || key === 'ArrowDown') {\n        try {\n          manageTableRowFocusInteraction(key, this.mainRef)\n        } catch (_) {}\n      } else if (key === 'Escape') {\n        if (this.mainRef) this.mainRef.blur()\n      }\n    }\n\n    this.props.onKeyPress(e)\n  }\n\n  onRef = ref => {\n    this.mainRef = ref\n    safeInvoke(this.props.innerRef, ref)\n  }\n\n  render() {\n    const {\n      innerRef,\n      theme,\n      className,\n      height,\n      children,\n      intent,\n      appearance,\n      tabIndex = -1,\n\n      // Filter out\n      onClick,\n      onKeyPress,\n      onSelect,\n      onDeselect,\n\n      isHighlighted,\n      isSelectable,\n      isSelected,\n      ...props\n    } = this.props\n    const themedClassName = theme.getRowClassName(appearance, intent)\n\n    return (\n      <TableRowProvider height={height}>\n        <Pane\n          innerRef={this.onRef}\n          className={cx(themedClassName, className)}\n          display=\"flex\"\n          aria-selected={isHighlighted}\n          aria-current={isSelected}\n          data-isselectable={isSelectable}\n          tabIndex={isSelectable ? tabIndex : undefined}\n          onClick={this.handleClick}\n          onKeyDown={this.handleKeyDown}\n          height={height}\n          borderBottom=\"muted\"\n          {...props}\n        >\n          {children}\n        </Pane>\n      </TableRowProvider>\n    )\n  }\n}\n\nexport default withTheme(TableRow)\n"]},"metadata":{},"sourceType":"module"}