{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { TickIcon } from '../../icons';\nimport { withTheme } from '../../theme';\n\nvar MenuOption = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(MenuOption, _React$PureComponent);\n\n  function MenuOption() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MenuOption);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MenuOption)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function () {\n      _this.props.onSelect();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function (e) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        _this.props.onSelect();\n\n        e.preventDefault();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(MenuOption, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          appearance = _this$props.appearance,\n          secondaryText = _this$props.secondaryText,\n          isSelected = _this$props.isSelected;\n      var themedClassName = theme.getMenuItemClassName(appearance, 'none');\n      var textProps = isSelected ? {\n        color: 'selected',\n        fontWeight: 500,\n        marginLeft: 16\n      } : {\n        marginLeft: 44\n      };\n      return React.createElement(Pane, {\n        id: id,\n        role: \"menuitemradio\",\n        tabIndex: 0,\n        className: themedClassName,\n        onClick: this.handleClick,\n        onKeyPress: this.handleKeyPress,\n        \"data-isselectable\": \"true\",\n        \"aria-checked\": isSelected,\n        height: 40,\n        display: \"flex\",\n        alignItems: \"center\"\n      }, isSelected && React.createElement(TickIcon, {\n        \"aria-hidden\": true,\n        color: \"selected\",\n        marginLeft: 16,\n        marginRight: -4,\n        size: 16,\n        flexShrink: 0\n      }), React.createElement(Text, _extends({}, textProps, {\n        marginRight: 16,\n        flex: 1\n      }), children), secondaryText && React.createElement(Text, {\n        marginRight: 16,\n        color: \"muted\"\n      }, secondaryText));\n    }\n  }]);\n\n  return MenuOption;\n}(React.PureComponent);\n\nMenuOption.displayName = \"MenuOption\";\n\n_defineProperty(MenuOption, \"propTypes\", {\n  /**\n   * The id attribute of the menu option.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Function that is called on click and enter/space keypress.\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * The icon before the label.\n   */\n  isSelected: PropTypes.bool,\n\n  /**\n   * The children of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Secondary text shown on the right.\n   */\n  secondaryText: PropTypes.node,\n\n  /**\n   * The default theme only supports one default appearance.\n   */\n  appearance: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n});\n\n_defineProperty(MenuOption, \"defaultProps\", {\n  appearance: 'default',\n  isSelected: false,\n  onClick: function onClick() {},\n  onSelect: function onSelect() {},\n  onKeyPress: function onKeyPress() {}\n});\n\nexport default withTheme(MenuOption);","map":{"version":3,"sources":["../../../src/menu/src/MenuOption.js"],"names":["MenuOption","React","PureComponent","id","PropTypes","onSelect","isSelected","children","secondaryText","appearance","theme","isRequired","onClick","onKeyPress","e","themedClassName","textProps","color","fontWeight","marginLeft","withTheme"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\nimport { TickIcon } from '../../icons'\nimport { withTheme } from '../../theme'\n\nclass MenuOption extends React.PureComponent {\n  static propTypes = {\n    /**\n     * The id attribute of the menu option.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Function that is called on click and enter/space keypress.\n     */\n    onSelect: PropTypes.func,\n\n    /**\n     * The icon before the label.\n     */\n    isSelected: PropTypes.bool,\n\n    /**\n     * The children of the component.\n     */\n    children: PropTypes.node,\n\n    /**\n     * Secondary text shown on the right.\n     */\n    secondaryText: PropTypes.node,\n\n    /**\n     * The default theme only supports one default appearance.\n     */\n    appearance: PropTypes.string.isRequired,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired\n  }\n\n  static defaultProps = {\n    appearance: 'default',\n    isSelected: false,\n    onClick: () => {},\n    onSelect: () => {},\n    onKeyPress: () => {}\n  }\n\n  handleClick = () => {\n    this.props.onSelect()\n  }\n\n  handleKeyPress = e => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      this.props.onSelect()\n      e.preventDefault()\n    }\n  }\n\n  render() {\n    const {\n      id,\n      children,\n      theme,\n      appearance,\n      secondaryText,\n      isSelected\n    } = this.props\n\n    const themedClassName = theme.getMenuItemClassName(appearance, 'none')\n\n    const textProps = isSelected\n      ? {\n          color: 'selected',\n          fontWeight: 500,\n          marginLeft: 16\n        }\n      : { marginLeft: 44 }\n\n    return (\n      <Pane\n        id={id}\n        role=\"menuitemradio\"\n        tabIndex={0}\n        className={themedClassName}\n        onClick={this.handleClick}\n        onKeyPress={this.handleKeyPress}\n        data-isselectable=\"true\"\n        aria-checked={isSelected}\n        height={40}\n        display=\"flex\"\n        alignItems=\"center\"\n      >\n        {isSelected && (\n          <TickIcon\n            aria-hidden\n            color=\"selected\"\n            marginLeft={16}\n            marginRight={-4}\n            size={16}\n            flexShrink={0}\n          />\n        )}\n        <Text {...textProps} marginRight={16} flex={1}>\n          {children}\n        </Text>\n        {secondaryText && (\n          <Text marginRight={16} color=\"muted\">\n            {secondaryText}\n          </Text>\n        )}\n      </Pane>\n    )\n  }\n}\n\nexport default withTheme(MenuOption)\n"]},"metadata":{},"sourceType":"module"}