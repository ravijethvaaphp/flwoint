{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { useTheme } from '../../theme';\n/**\n * This implementation is a remix of the Icon component in Blueprintjs:\n * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15\n * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE\n */\n\nvar TreeShakeableIcon = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 16 : _ref$size,\n      name = _ref.name,\n      title = _ref.title,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      svgPaths16 = _ref.svgPaths16,\n      svgPaths20 = _ref.svgPaths20,\n      svgProps = _objectWithoutProperties(_ref, [\"color\", \"size\", \"name\", \"title\", \"style\", \"svgPaths16\", \"svgPaths20\"]);\n\n  var theme = useTheme();\n  var SIZE_STANDARD = 16;\n  var SIZE_LARGE = 20; // Choose which pixel grid is most appropriate for given icon size\n\n  var pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD;\n  var pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20;\n  var paths = pathStrings.map(function (d, i) {\n    return (// eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"path\", {\n        key: i,\n        d: d,\n        fillRule: \"evenodd\"\n      })\n    );\n  });\n  var viewBox = \"0 0 \".concat(pixelGridSize, \" \").concat(pixelGridSize);\n\n  if (color) {\n    style = _objectSpread({}, style, {\n      fill: theme.getIconColor(color)\n    });\n  }\n\n  return React.createElement(Box, _extends({\n    is: \"svg\" // To allow innerRef to be passed from the consumer this needs to be before svgProps\n    ,\n    innerRef: ref\n  }, svgProps, {\n    \"data-icon\": name,\n    style: style,\n    width: size,\n    height: size,\n    viewBox: viewBox\n  }), title && React.createElement(\"title\", null, title), paths);\n});\nTreeShakeableIcon.propTypes = {\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Name of the icon\n   */\n  name: PropTypes.string,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n\n  /**\n   * CSS style properties.\n   */\n  style: PropTypes.object,\n  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,\n  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default TreeShakeableIcon;","map":{"version":3,"sources":["../../../src/icons/src/Icon.js"],"names":["TreeShakeableIcon","forwardRef","color","size","name","title","style","svgPaths16","svgPaths20","svgProps","theme","useTheme","SIZE_STANDARD","SIZE_LARGE","pixelGridSize","pathStrings","paths","viewBox","fill","ref","PropTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useTheme } from '../../theme'\n\n/**\n * This implementation is a remix of the Icon component in Blueprintjs:\n * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15\n * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE\n */\n\nconst TreeShakeableIcon = forwardRef(\n  (\n    {\n      color = 'currentColor',\n      size = 16,\n      name,\n      title,\n      style = {},\n      svgPaths16,\n      svgPaths20,\n      ...svgProps\n    },\n    ref\n  ) => {\n    const theme = useTheme()\n    const SIZE_STANDARD = 16\n    const SIZE_LARGE = 20\n\n    // Choose which pixel grid is most appropriate for given icon size\n    const pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD\n    const pathStrings =\n      pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20\n    const paths = pathStrings.map((d, i) => (\n      // eslint-disable-next-line react/no-array-index-key\n      <path key={i} d={d} fillRule=\"evenodd\" />\n    ))\n\n    const viewBox = `0 0 ${pixelGridSize} ${pixelGridSize}`\n\n    if (color) {\n      style = { ...style, fill: theme.getIconColor(color) }\n    }\n\n    return (\n      <Box\n        is=\"svg\"\n        // To allow innerRef to be passed from the consumer this needs to be before svgProps\n        innerRef={ref}\n        {...svgProps}\n        data-icon={name}\n        style={style}\n        width={size}\n        height={size}\n        viewBox={viewBox}\n      >\n        {title && <title>{title}</title>}\n        {paths}\n      </Box>\n    )\n  }\n)\n\nTreeShakeableIcon.propTypes = {\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Name of the icon\n   */\n  name: PropTypes.string,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n\n  /**\n   * CSS style properties.\n   */\n  style: PropTypes.object,\n\n  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default TreeShakeableIcon\n"]},"metadata":{},"sourceType":"module"}