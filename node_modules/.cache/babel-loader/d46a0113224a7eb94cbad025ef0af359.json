{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '../../typography';\nimport TableCell from './TableCell';\nvar ellipsis = {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n};\n\nvar TextTableCell = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TextTableCell, _PureComponent);\n\n  function TextTableCell() {\n    _classCallCheck(this, TextTableCell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextTableCell).apply(this, arguments));\n  }\n\n  _createClass(TextTableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          textProps = _this$props.textProps,\n          isNumber = _this$props.isNumber,\n          placeholder = _this$props.placeholder,\n          props = _objectWithoutProperties(_this$props, [\"children\", \"textProps\", \"isNumber\", \"placeholder\"]);\n\n      return React.createElement(TableCell, props, React.createElement(Text, _extends({\n        size: 300,\n        flex: \"1\"\n      }, ellipsis, isNumber ? {\n        fontFamily: 'mono'\n      } : {}, textProps), children));\n    }\n  }]);\n\n  return TextTableCell;\n}(PureComponent);\n\nTextTableCell.displayName = \"TextTableCell\";\n\n_defineProperty(TextTableCell, \"propTypes\", _objectSpread({}, TableCell.propTypes, {\n  /**\n   * Adds fontFamily: mono.\n   */\n  isNumber: PropTypes.bool.isRequired,\n\n  /**\n   * Pass additional props to the Text component.\n   */\n  textProps: PropTypes.object\n}));\n\n_defineProperty(TextTableCell, \"defaultProps\", {\n  isNumber: false\n});\n\nexport { TextTableCell as default };","map":{"version":3,"sources":["../../../src/table/src/TextTableCell.js"],"names":["ellipsis","overflow","textOverflow","whiteSpace","TextTableCell","PureComponent","TableCell","propTypes","isNumber","PropTypes","isRequired","textProps","object","children","placeholder","props","fontFamily"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AACA,OAAA,SAAA,MAAA,aAAA;AAEA,IAAMA,QAAQ,GAAG;AACfC,EAAAA,QAAQ,EADO,QAAA;AAEfC,EAAAA,YAAY,EAFG,UAAA;AAGfC,EAAAA,UAAU,EAAE;AAHG,CAAjB;;IAMqBC,a;;;;;;;;;;;6BAsBV;AAAA,UAAA,WAAA,GAC0D,KAD1D,KAAA;AAAA,UACCS,QADD,GAAA,WAAA,CAAA,QAAA;AAAA,UACWF,SADX,GAAA,WAAA,CAAA,SAAA;AAAA,UACsBH,QADtB,GAAA,WAAA,CAAA,QAAA;AAAA,UACgCM,WADhC,GAAA,WAAA,CAAA,WAAA;AAAA,UACgDC,KADhD,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,UAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,CAAA,CAAA;;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,KAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,QAAA,IAAI,EADN,GAAA;AAEE,QAAA,IAAI,EAAC;AAFP,OAAA,EAAA,QAAA,EAIOP,QAAQ,GAAG;AAAEQ,QAAAA,UAAU,EAAE;AAAd,OAAH,GAJf,EAAA,EAAA,SAAA,CAAA,EAFJ,QAEI,CADF,CADF;AAaD;;;;EAtCwCX,a;;AAAtBD,a,YAAAA,G,eAAAA;;gBAAAA,a,iCAKdE,SAAS,CAACC,S;AAEb;;;AAGAC,EAAAA,QAAQ,EAAEC,SAAS,CAATA,IAAAA,CAAeC,U;;AAEzB;;;AAGAC,EAAAA,SAAS,EAAEF,SAAS,CAACG;;;gBAfJR,a,kBAkBG;AACpBI,EAAAA,QAAQ,EAAE;AADU,C;;SAlBHJ,a","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport TableCell from './TableCell'\n\nconst ellipsis = {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}\n\nexport default class TextTableCell extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TableCell component as the base.\n     */\n    ...TableCell.propTypes,\n\n    /**\n     * Adds fontFamily: mono.\n     */\n    isNumber: PropTypes.bool.isRequired,\n\n    /**\n     * Pass additional props to the Text component.\n     */\n    textProps: PropTypes.object\n  }\n\n  static defaultProps = {\n    isNumber: false\n  }\n\n  render() {\n    const { children, textProps, isNumber, placeholder, ...props } = this.props\n\n    return (\n      <TableCell {...props}>\n        <Text\n          size={300}\n          flex=\"1\"\n          {...ellipsis}\n          {...(isNumber ? { fontFamily: 'mono' } : {})}\n          {...textProps}\n        >\n          {children}\n        </Text>\n      </TableCell>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}