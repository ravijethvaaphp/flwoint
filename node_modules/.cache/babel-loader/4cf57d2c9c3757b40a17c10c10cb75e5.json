{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTheme } from '../../theme';\nimport { Portal } from '../../portal';\nimport { Stack } from '../../stack';\nimport safeInvoke from '../../lib/safe-invoke';\nimport TextTableCell from './TextTableCell';\nimport TableCell from './TableCell';\nimport EditableCellField from './EditableCellField';\n\nvar EditableCell = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(EditableCell, _React$PureComponent);\n\n  function EditableCell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditableCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      value: _this.props.children,\n      isEditing: _this.props.autoFocus\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMainRef\", function (ref) {\n      _this.mainRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOverlayRef\", function (ref) {\n      _this.overlayRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDoubleClick\", function () {\n      if (_this.props.disabled || !_this.props.isSelectable) return;\n\n      _this.setState({\n        isEditing: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (e) {\n      if (_this.props.disabled) return;\n      var key = e.key;\n      /**\n       * When the user presses a character on the keyboard, use that character\n       * as the value in the text field.\n       */\n\n      if (key === 'Enter' || key === 'Shift') {\n        _this.setState({\n          isEditing: true\n        });\n      } else if (key.match(/^[a-z]{0,10}$/) && !e.metaKey && !e.ctrlKey && !e.altKey) {\n        _this.setState(function (prevState) {\n          return {\n            isEditing: true,\n            value: prevState.value + key\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFieldChangeComplete\", function (value) {\n      var _this$props = _this.props,\n          onChange = _this$props.onChange,\n          isSelectable = _this$props.isSelectable;\n\n      _this.setState({\n        isEditing: false,\n        value: value\n      });\n\n      safeInvoke(onChange, value);\n\n      if (_this.mainRef && isSelectable) {\n        _this.mainRef.focus();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFieldCancel\", function () {\n      _this.setState({\n        isEditing: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function () {\n      _this.mainRef.focus();\n    });\n\n    return _this;\n  }\n\n  _createClass(EditableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          theme = _this$props2.theme,\n          size = _this$props2.size,\n          disabled = _this$props2.disabled,\n          placeholder = _this$props2.placeholder,\n          isSelectable = _this$props2.isSelectable,\n          _this$props2$textProp = _this$props2.textProps,\n          textProps = _this$props2$textProp === void 0 ? {} : _this$props2$textProp,\n          props = _objectWithoutProperties(_this$props2, [\"children\", \"theme\", \"size\", \"disabled\", \"placeholder\", \"isSelectable\", \"textProps\"]);\n\n      var _this$state = this.state,\n          isEditing = _this$state.isEditing,\n          value = _this$state.value;\n      var cursor = 'text';\n\n      if (disabled) {\n        cursor = 'not-allowed';\n      } else if (isSelectable) {\n        cursor = 'default';\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(TextTableCell, _extends({\n        innerRef: this.onMainRef,\n        isSelectable: isSelectable,\n        onClick: this.handleClick,\n        onDoubleClick: this.handleDoubleClick,\n        onKeyDown: this.handleKeyDown,\n        cursor: cursor,\n        textProps: _objectSpread({\n          size: size,\n          opacity: disabled || !children && placeholder ? 0.5 : 1\n        }, textProps)\n      }, props), children ? children : placeholder), isEditing && React.createElement(Portal, null, React.createElement(Stack, null, function (zIndex) {\n        return React.createElement(EditableCellField, {\n          zIndex: zIndex,\n          getTargetRef: function getTargetRef() {\n            return _this2.mainRef;\n          },\n          value: value,\n          onEscape: _this2.handleFieldEscape,\n          onChangeComplete: _this2.handleFieldChangeComplete,\n          onCancel: _this2.handleFieldCancel,\n          size: size\n        });\n      })));\n    }\n  }]);\n\n  return EditableCell;\n}(React.PureComponent);\n\nEditableCell.displayName = \"EditableCell\";\n\n_defineProperty(EditableCell, \"propTypes\", _objectSpread({}, TableCell.propTypes, {\n  /*\n   * Makes the TableCell focusable.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool.isRequired,\n\n  /**\n   * When true, the cell can't be edited.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Optional placeholder when children is falsy.\n   */\n  placeholder: PropTypes.node,\n\n  /**\n   * The size used for the TextTableCell and Textarea.\n   */\n  size: PropTypes.oneOf([300, 400]).isRequired,\n\n  /**\n   * This is the value of the cell.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Function called when value changes. (value: string) => void.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, the cell will initialize in the editing state.\n   */\n  autoFocus: PropTypes.bool\n}));\n\n_defineProperty(EditableCell, \"defaultProps\", {\n  size: 300,\n  isSelectable: true,\n  autoFocus: false\n});\n\nexport default withTheme(EditableCell);","map":{"version":3,"sources":["../../../src/table/src/EditableCell.js"],"names":["EditableCell","React","PureComponent","TableCell","propTypes","isSelectable","PropTypes","isRequired","disabled","bool","placeholder","node","size","children","onChange","func","autoFocus","value","isEditing","key","e","prevState","safeInvoke","theme","textProps","props","cursor","opacity","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,MAAA,QAAA,cAAA;AACA,SAAA,KAAA,QAAA,aAAA;AACA,OAAA,UAAA,MAAA,uBAAA;AACA,OAAA,aAAA,MAAA,iBAAA;AACA,OAAA,SAAA,MAAA,aAAA;AACA,OAAA,iBAAA,MAAA,qBAAA;;IAEMA,Y;;;;;;;;;;;;;;;;4DAkDI;AACNiB,MAAAA,KAAK,EAAE,KAAA,CAAA,KAAA,CADD,QAAA;AAENC,MAAAA,SAAS,EAAE,KAAA,CAAA,KAAA,CAAWF;AAFhB,K;;gEAKI,UAAA,GAAA,EAAO;AACjB,MAAA,KAAA,CAAA,OAAA,GAAA,GAAA;;;mEAGa,UAAA,GAAA,EAAO;AACpB,MAAA,KAAA,CAAA,UAAA,GAAA,GAAA;;;wEAGkB,YAAM;AACxB,UAAI,KAAA,CAAA,KAAA,CAAA,QAAA,IAAuB,CAAC,KAAA,CAAA,KAAA,CAA5B,YAAA,EAAqD;;AAErD,MAAA,KAAA,CAAA,QAAA,CAAc;AACZE,QAAAA,SAAS,EAAE;AADC,OAAd;;;oEAKc,UAAA,CAAA,EAAK;AACnB,UAAI,KAAA,CAAA,KAAA,CAAJ,QAAA,EAAyB;AADN,UAEXC,GAFW,GAEHC,CAFG,CAAA,GAAA;AAInB;;;;;AAIA,UAAID,GAAG,KAAHA,OAAAA,IAAmBA,GAAG,KAA1B,OAAA,EAAwC;AACtC,QAAA,KAAA,CAAA,QAAA,CAAc;AACZD,UAAAA,SAAS,EAAE;AADC,SAAd;AADF,OAAA,MAIO,IACLC,GAAG,CAAHA,KAAAA,CAAAA,eAAAA,KACA,CAACC,CAAC,CADFD,OAAAA,IAEA,CAACC,CAAC,CAFFD,OAAAA,IAGA,CAACC,CAAC,CAJG,MAAA,EAKL;AACA,QAAA,KAAA,CAAA,QAAA,CAAc,UAAA,SAAA,EAAS;AAAA,iBAAK;AAC1BF,YAAAA,SAAS,EADiB,IAAA;AAE1BD,YAAAA,KAAK,EAAEI,SAAS,CAATA,KAAAA,GAAkBF;AAFC,WAAL;AAAvB,SAAA;AAID;;;gFAGyB,UAAA,KAAA,EAAS;AAAA,UAAA,WAAA,GACA,KAAA,CADA,KAAA;AAAA,UAC3BL,QAD2B,GAAA,WAAA,CAAA,QAAA;AAAA,UACjBT,YADiB,GAAA,WAAA,CAAA,YAAA;;AAGnC,MAAA,KAAA,CAAA,QAAA,CAAc;AACZa,QAAAA,SAAS,EADG,KAAA;AAEZD,QAAAA,KAAK,EAALA;AAFY,OAAd;;AAKAK,MAAAA,UAAU,CAAA,QAAA,EAAVA,KAAU,CAAVA;;AAEA,UAAI,KAAA,CAAA,OAAA,IAAJ,YAAA,EAAkC;AAChC,QAAA,KAAA,CAAA,OAAA,CAAA,KAAA;AACD;;;wEAGiB,YAAM;AACxB,MAAA,KAAA,CAAA,QAAA,CAAc;AAAEJ,QAAAA,SAAS,EAAE;AAAb,OAAd;;;kEAGY,YAAM;AAClB,MAAA,KAAA,CAAA,OAAA,CAAA,KAAA;;;;;;;;6BAGO;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,YAAA,GAUH,KAVG,KAAA;AAAA,UAELL,QAFK,GAAA,YAAA,CAAA,QAAA;AAAA,UAGLU,KAHK,GAAA,YAAA,CAAA,KAAA;AAAA,UAILX,IAJK,GAAA,YAAA,CAAA,IAAA;AAAA,UAKLJ,QALK,GAAA,YAAA,CAAA,QAAA;AAAA,UAMLE,WANK,GAAA,YAAA,CAAA,WAAA;AAAA,UAOLL,YAPK,GAAA,YAAA,CAAA,YAAA;AAAA,UAAA,qBAAA,GAAA,YAAA,CAAA,SAAA;AAAA,UAQLmB,SARK,GAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,qBAAA;AAAA,UASFC,KATE,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,cAAA,EAAA,WAAA,CAAA,CAAA;;AAAA,UAAA,WAAA,GAWsB,KAXtB,KAAA;AAAA,UAWCP,SAXD,GAAA,WAAA,CAAA,SAAA;AAAA,UAWYD,KAXZ,GAAA,WAAA,CAAA,KAAA;AAaP,UAAIS,MAAM,GAAV,MAAA;;AACA,UAAA,QAAA,EAAc;AACZA,QAAAA,MAAM,GAANA,aAAAA;AADF,OAAA,MAEO,IAAA,YAAA,EAAkB;AACvBA,QAAAA,MAAM,GAANA,SAAAA;AACD;;AAED,aACE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;AACE,QAAA,QAAQ,EAAE,KADZ,SAAA;AAEE,QAAA,YAAY,EAFd,YAAA;AAGE,QAAA,OAAO,EAAE,KAHX,WAAA;AAIE,QAAA,aAAa,EAAE,KAJjB,iBAAA;AAKE,QAAA,SAAS,EAAE,KALb,aAAA;AAME,QAAA,MAAM,EANR,MAAA;AAOE,QAAA,SAAS,EAAA,aAAA,CAAA;AACPd,UAAAA,IAAI,EADG,IAAA;AAEPe,UAAAA,OAAO,EAAEnB,QAAQ,IAAK,CAAA,QAAA,IAAbA,WAAAA,GAAAA,GAAAA,GAA+C;AAFjD,SAAA,EAAA,SAAA;AAPX,OAAA,EAAA,KAAA,CAAA,EAcGK,QAAQ,GAAA,QAAA,GAfb,WACE,CADF,EAiBGK,SAAS,IACR,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EACG,UAAA,MAAA,EAAM;AAAA,eACL,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,UAAA,MAAM,EADR,MAAA;AAEE,UAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,mBAAM,MAAI,CAAV,OAAA;AAFhB,WAAA;AAGE,UAAA,KAAK,EAHP,KAAA;AAIE,UAAA,QAAQ,EAAE,MAAI,CAJhB,iBAAA;AAKE,UAAA,gBAAgB,EAAE,MAAI,CALxB,yBAAA;AAME,UAAA,QAAQ,EAAE,MAAI,CANhB,iBAAA;AAOE,UAAA,IAAI,EAAEN;AAPR,SAAA,CADK;AArBjB,OAoBQ,CADF,CAlBJ,CADF;AAqCD;;;;EAhLwBX,KAAK,CAACC,a;;AAA3BF,Y,YAAAA,G,cAAAA;;gBAAAA,Y,iCAKCG,SAAS,CAACC,S;AAEb;;;;AAIAC,EAAAA,YAAY,EAAEC,SAAS,CAATA,IAAAA,CAAeC,U;;AAE7B;;;AAGAC,EAAAA,QAAQ,EAAEF,SAAS,CAACG,I;;AAEpB;;;AAGAC,EAAAA,WAAW,EAAEJ,SAAS,CAACK,I;;AAEvB;;;AAGAC,EAAAA,IAAI,EAAEN,SAAS,CAATA,KAAAA,CAAgB,CAAA,GAAA,EAAhBA,GAAgB,CAAhBA,EAA4BC,U;;AAElC;;;AAGAM,EAAAA,QAAQ,EAAEP,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAAhDA,MAAoB,CAApBA,C;;AAEV;;;AAGAQ,EAAAA,QAAQ,EAAER,SAAS,CAACS,I;;AAEpB;;;AAGAC,EAAAA,SAAS,EAAEV,SAAS,CAACG;;;gBAzCnBT,Y,kBA4CkB;AACpBY,EAAAA,IAAI,EADgB,GAAA;AAEpBP,EAAAA,YAAY,EAFQ,IAAA;AAGpBW,EAAAA,SAAS,EAAE;AAHS,C;;AAuIxB,eAAeY,SAAS,CAAxB,YAAwB,CAAxB","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withTheme } from '../../theme'\nimport { Portal } from '../../portal'\nimport { Stack } from '../../stack'\nimport safeInvoke from '../../lib/safe-invoke'\nimport TextTableCell from './TextTableCell'\nimport TableCell from './TableCell'\nimport EditableCellField from './EditableCellField'\n\nclass EditableCell extends React.PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TableCell component as the base.\n     */\n    ...TableCell.propTypes,\n\n    /*\n     * Makes the TableCell focusable.\n     * Will add tabIndex={-1 || this.props.tabIndex}.\n     */\n    isSelectable: PropTypes.bool.isRequired,\n\n    /**\n     * When true, the cell can't be edited.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Optional placeholder when children is falsy.\n     */\n    placeholder: PropTypes.node,\n\n    /**\n     * The size used for the TextTableCell and Textarea.\n     */\n    size: PropTypes.oneOf([300, 400]).isRequired,\n\n    /**\n     * This is the value of the cell.\n     */\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * Function called when value changes. (value: string) => void.\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * When true, the cell will initialize in the editing state.\n     */\n    autoFocus: PropTypes.bool\n  }\n\n  static defaultProps = {\n    size: 300,\n    isSelectable: true,\n    autoFocus: false\n  }\n\n  state = {\n    value: this.props.children,\n    isEditing: this.props.autoFocus\n  }\n\n  onMainRef = ref => {\n    this.mainRef = ref\n  }\n\n  onOverlayRef = ref => {\n    this.overlayRef = ref\n  }\n\n  handleDoubleClick = () => {\n    if (this.props.disabled || !this.props.isSelectable) return\n\n    this.setState({\n      isEditing: true\n    })\n  }\n\n  handleKeyDown = e => {\n    if (this.props.disabled) return\n    const { key } = e\n\n    /**\n     * When the user presses a character on the keyboard, use that character\n     * as the value in the text field.\n     */\n    if (key === 'Enter' || key === 'Shift') {\n      this.setState({\n        isEditing: true\n      })\n    } else if (\n      key.match(/^[a-z]{0,10}$/) &&\n      !e.metaKey &&\n      !e.ctrlKey &&\n      !e.altKey\n    ) {\n      this.setState(prevState => ({\n        isEditing: true,\n        value: prevState.value + key\n      }))\n    }\n  }\n\n  handleFieldChangeComplete = value => {\n    const { onChange, isSelectable } = this.props\n\n    this.setState({\n      isEditing: false,\n      value\n    })\n\n    safeInvoke(onChange, value)\n\n    if (this.mainRef && isSelectable) {\n      this.mainRef.focus()\n    }\n  }\n\n  handleFieldCancel = () => {\n    this.setState({ isEditing: false })\n  }\n\n  handleClick = () => {\n    this.mainRef.focus()\n  }\n\n  render() {\n    const {\n      children,\n      theme,\n      size,\n      disabled,\n      placeholder,\n      isSelectable,\n      textProps = {},\n      ...props\n    } = this.props\n    const { isEditing, value } = this.state\n\n    let cursor = 'text'\n    if (disabled) {\n      cursor = 'not-allowed'\n    } else if (isSelectable) {\n      cursor = 'default'\n    }\n\n    return (\n      <React.Fragment>\n        <TextTableCell\n          innerRef={this.onMainRef}\n          isSelectable={isSelectable}\n          onClick={this.handleClick}\n          onDoubleClick={this.handleDoubleClick}\n          onKeyDown={this.handleKeyDown}\n          cursor={cursor}\n          textProps={{\n            size,\n            opacity: disabled || (!children && placeholder) ? 0.5 : 1,\n            ...textProps\n          }}\n          {...props}\n        >\n          {children ? children : placeholder}\n        </TextTableCell>\n        {isEditing && (\n          <Portal>\n            <Stack>\n              {zIndex => (\n                <EditableCellField\n                  zIndex={zIndex}\n                  getTargetRef={() => this.mainRef}\n                  value={value}\n                  onEscape={this.handleFieldEscape}\n                  onChangeComplete={this.handleFieldChangeComplete}\n                  onCancel={this.handleFieldCancel}\n                  size={size}\n                />\n              )}\n            </Stack>\n          </Portal>\n        )}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default withTheme(EditableCell)\n"]},"metadata":{},"sourceType":"module"}