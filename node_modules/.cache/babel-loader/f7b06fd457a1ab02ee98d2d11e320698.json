{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash.debounce';\nimport { withTheme } from '../../theme';\nimport { SelectMenu } from '../../select-menu';\nimport { CaretDownIcon } from '../../icons';\nimport TextTableCell from './TextTableCell';\nimport TableCell from './TableCell';\nvar MIN_SELECT_MENU_WIDTH = 240;\n\nvar SelectMenuCell = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(SelectMenuCell, _React$PureComponent);\n\n  function SelectMenuCell(props) {\n    var _this;\n\n    _classCallCheck(this, SelectMenuCell);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SelectMenuCell).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      targetWidth: MIN_SELECT_MENU_WIDTH,\n      shouldClickToggle: false,\n      isFocused: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function () {\n      _this.updateOnResize();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateOnResize\", function () {\n      if (!_this.mainRef) return;\n      var targetWidth = _this.mainRef.offsetWidth;\n\n      _this.setState({\n        targetWidth: Math.max(MIN_SELECT_MENU_WIDTH, targetWidth)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMainRef\", function (getRef, ref) {\n      _this.mainRef = ref;\n      getRef(ref);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onOverlayRef\", function (ref) {\n      _this.overlayRef = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (toggle, isShown, e) {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!isShown && _this.props.isSelectable && !_this.props.disabled) {\n          toggle();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDoubleClick\", function (toggle, isShown) {\n      if (!isShown && _this.props.isSelectable && !_this.props.disabled) {\n        toggle();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (toggle, isShown) {\n      var shouldClickToggle = _this.state.shouldClickToggle;\n\n      if (!shouldClickToggle && !isShown) {\n        _this.setState({\n          shouldClickToggle: true\n        });\n\n        return;\n      }\n\n      if (_this.props.isSelectable && !_this.props.disabled) {\n        toggle();\n\n        _this.setState({\n          shouldClickToggle: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function () {\n      _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      _this.setState({\n        shouldClickToggle: false,\n        isFocused: false\n      });\n    });\n\n    _this.onResize = debounce(_this.onResize, 200);\n    return _this;\n  }\n\n  _createClass(SelectMenuCell, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Call this to initialize and set\n      this.updateOnResize();\n      window.addEventListener('resize', this.onResize, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          size = _this$props.size,\n          selectMenuProps = _this$props.selectMenuProps,\n          disabled = _this$props.disabled,\n          placeholder = _this$props.placeholder,\n          isSelectable = _this$props.isSelectable,\n          _this$props$textProps = _this$props.textProps,\n          textProps = _this$props$textProps === void 0 ? {} : _this$props$textProps,\n          props = _objectWithoutProperties(_this$props, [\"children\", \"theme\", \"size\", \"selectMenuProps\", \"disabled\", \"placeholder\", \"isSelectable\", \"textProps\"]);\n\n      var _this$state = this.state,\n          targetWidth = _this$state.targetWidth,\n          isFocused = _this$state.isFocused;\n      var cursor = 'default';\n\n      if (disabled) {\n        cursor = 'not-allowed';\n      } else if (isSelectable) {\n        if (isFocused) {\n          cursor = 'pointer';\n        } else {\n          cursor = 'default';\n        }\n      } else {\n        cursor = 'text';\n      }\n\n      return React.createElement(SelectMenu, _extends({\n        width: targetWidth\n      }, selectMenuProps), function (_ref) {\n        var toggle = _ref.toggle,\n            getRef = _ref.getRef,\n            isShown = _ref.isShown;\n        return React.createElement(TextTableCell, _extends({\n          innerRef: _this2.onMainRef.bind(null, getRef),\n          onClick: _this2.handleClick.bind(null, toggle, isShown),\n          onFocus: _this2.handleFocus.bind(null, toggle, isShown),\n          onBlur: _this2.handleBlur,\n          isSelectable: isSelectable && !disabled,\n          rightView: isSelectable ? React.createElement(CaretDownIcon, {\n            color: \"muted\"\n          }) : null,\n          \"aria-haspopup\": true,\n          \"aria-expanded\": isShown,\n          cursor: isShown ? 'pointer' : cursor,\n          textProps: _objectSpread({\n            size: size,\n            opacity: disabled || !children && placeholder ? 0.5 : 1\n          }, textProps),\n          onKeyDown: _this2.handleKeyDown.bind(null, toggle, isShown),\n          onDoubleClick: _this2.handleDoubleClick.bind(null, toggle, isShown)\n        }, props), children ? children : placeholder);\n      });\n    }\n  }]);\n\n  return SelectMenuCell;\n}(React.PureComponent);\n\nSelectMenuCell.displayName = \"SelectMenuCell\";\n\n_defineProperty(SelectMenuCell, \"propTypes\", _objectSpread({}, TableCell.propTypes, {\n  /*\n   * Makes the TableCell focusable.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool.isRequired,\n\n  /**\n   * When true, the cell can't be edited.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Optional placeholder when children is falsy.\n   */\n  placeholder: PropTypes.node,\n\n  /**\n   * The size used for the TextTableCell and Textarea.\n   */\n  size: PropTypes.oneOf([300, 400]).isRequired,\n  selectMenuProps: PropTypes.object\n}));\n\n_defineProperty(SelectMenuCell, \"defaultProps\", {\n  size: 300,\n  isSelectable: true\n});\n\nexport default withTheme(SelectMenuCell);","map":{"version":3,"sources":["../../../src/table/src/SelectMenuCell.js"],"names":["MIN_SELECT_MENU_WIDTH","SelectMenuCell","React","PureComponent","TableCell","propTypes","isSelectable","PropTypes","isRequired","disabled","bool","placeholder","node","size","selectMenuProps","object","targetWidth","shouldClickToggle","isFocused","debounce","window","Math","getRef","e","toggle","children","theme","textProps","props","cursor","isShown","opacity","withTheme"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport debounce from 'lodash.debounce'\nimport { withTheme } from '../../theme'\nimport { SelectMenu } from '../../select-menu'\nimport { CaretDownIcon } from '../../icons'\nimport TextTableCell from './TextTableCell'\nimport TableCell from './TableCell'\n\nconst MIN_SELECT_MENU_WIDTH = 240\n\nclass SelectMenuCell extends React.PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TableCell component as the base.\n     */\n    ...TableCell.propTypes,\n\n    /*\n     * Makes the TableCell focusable.\n     * Will add tabIndex={-1 || this.props.tabIndex}.\n     */\n    isSelectable: PropTypes.bool.isRequired,\n\n    /**\n     * When true, the cell can't be edited.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Optional placeholder when children is falsy.\n     */\n    placeholder: PropTypes.node,\n\n    /**\n     * The size used for the TextTableCell and Textarea.\n     */\n    size: PropTypes.oneOf([300, 400]).isRequired,\n\n    selectMenuProps: PropTypes.object\n  }\n\n  static defaultProps = {\n    size: 300,\n    isSelectable: true\n  }\n\n  state = {\n    targetWidth: MIN_SELECT_MENU_WIDTH,\n    shouldClickToggle: false,\n    isFocused: false\n  }\n\n  constructor(props) {\n    super(props)\n    this.onResize = debounce(this.onResize, 200)\n  }\n\n  componentDidMount() {\n    // Call this to initialize and set\n    this.updateOnResize()\n    window.addEventListener('resize', this.onResize, false)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  onResize = () => {\n    this.updateOnResize()\n  }\n\n  updateOnResize = () => {\n    if (!this.mainRef) return\n    const targetWidth = this.mainRef.offsetWidth\n    this.setState({\n      targetWidth: Math.max(MIN_SELECT_MENU_WIDTH, targetWidth)\n    })\n  }\n\n  onMainRef = (getRef, ref) => {\n    this.mainRef = ref\n    getRef(ref)\n  }\n\n  onOverlayRef = ref => {\n    this.overlayRef = ref\n  }\n\n  handleKeyDown = (toggle, isShown, e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      e.stopPropagation()\n\n      if (!isShown && this.props.isSelectable && !this.props.disabled) {\n        toggle()\n      }\n    }\n  }\n\n  handleDoubleClick = (toggle, isShown) => {\n    if (!isShown && this.props.isSelectable && !this.props.disabled) {\n      toggle()\n    }\n  }\n\n  handleClick = (toggle, isShown) => {\n    const { shouldClickToggle } = this.state\n\n    if (!shouldClickToggle && !isShown) {\n      this.setState({\n        shouldClickToggle: true\n      })\n      return\n    }\n\n    if (this.props.isSelectable && !this.props.disabled) {\n      toggle()\n      this.setState({\n        shouldClickToggle: true\n      })\n    }\n  }\n\n  handleFocus = () => {\n    this.setState({\n      isFocused: true\n    })\n  }\n\n  handleBlur = () => {\n    this.setState({\n      shouldClickToggle: false,\n      isFocused: false\n    })\n  }\n\n  render() {\n    const {\n      children,\n      theme,\n      size,\n      selectMenuProps,\n      disabled,\n      placeholder,\n      isSelectable,\n      textProps = {},\n      ...props\n    } = this.props\n    const { targetWidth, isFocused } = this.state\n\n    let cursor = 'default'\n    if (disabled) {\n      cursor = 'not-allowed'\n    } else if (isSelectable) {\n      if (isFocused) {\n        cursor = 'pointer'\n      } else {\n        cursor = 'default'\n      }\n    } else {\n      cursor = 'text'\n    }\n\n    return (\n      <SelectMenu width={targetWidth} {...selectMenuProps}>\n        {({ toggle, getRef, isShown }) => {\n          return (\n            <TextTableCell\n              innerRef={this.onMainRef.bind(null, getRef)}\n              onClick={this.handleClick.bind(null, toggle, isShown)}\n              onFocus={this.handleFocus.bind(null, toggle, isShown)}\n              onBlur={this.handleBlur}\n              isSelectable={isSelectable && !disabled}\n              rightView={isSelectable ? <CaretDownIcon color=\"muted\" /> : null}\n              aria-haspopup\n              aria-expanded={isShown}\n              cursor={isShown ? 'pointer' : cursor}\n              textProps={{\n                size,\n                opacity: disabled || (!children && placeholder) ? 0.5 : 1,\n                ...textProps\n              }}\n              onKeyDown={this.handleKeyDown.bind(null, toggle, isShown)}\n              onDoubleClick={this.handleDoubleClick.bind(null, toggle, isShown)}\n              {...props}\n            >\n              {children ? children : placeholder}\n            </TextTableCell>\n          )\n        }}\n      </SelectMenu>\n    )\n  }\n}\n\nexport default withTheme(SelectMenuCell)\n"]},"metadata":{},"sourceType":"module"}