{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { css } from 'glamor';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { withTheme } from '../../theme';\nvar loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n});\nvar loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n});\nvar outerClass = css({\n  animation: \"\".concat(loadingKeyframes, \" 2s linear infinite\")\n}).toString();\n\nvar innerClass = function innerClass(color) {\n  return css({\n    strokeDashoffset: 600,\n    strokeDasharray: 300,\n    strokeWidth: 12,\n    strokeMiterlimit: 10,\n    strokeLinecap: 'round',\n    animation: \"\".concat(loadingCircleKeyframes, \" 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite\"),\n    stroke: color,\n    fill: 'transparent'\n  }).toString();\n};\n\nvar Spinner = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Spinner, _PureComponent);\n\n  function Spinner(_ref) {\n    var _this;\n\n    var delay = _ref.delay;\n\n    _classCallCheck(this, Spinner);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Spinner).call(this));\n    _this.state = {\n      isVisible: delay === 0\n    };\n    return _this;\n  }\n\n  _createClass(Spinner, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isVisible) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          size = _this$props.size,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"size\"]);\n\n      return React.createElement(Box, _extends({\n        width: size,\n        height: size,\n        lineHeight: 0\n      }, props), React.createElement(Box, {\n        is: \"svg\",\n        className: outerClass,\n        x: \"0px\",\n        y: \"0px\",\n        viewBox: \"0 0 150 150\"\n      }, React.createElement(Box, {\n        is: \"circle\",\n        className: innerClass(theme.spinnerColor),\n        cx: \"75\",\n        cy: \"75\",\n        r: \"60\"\n      })));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var delay = this.props.delay;\n\n      if (delay > 0) {\n        this.delayTimer = setTimeout(function () {\n          _this2.setState({\n            isVisible: true\n          });\n        }, delay);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this.delayTimer);\n    }\n  }]);\n\n  return Spinner;\n}(PureComponent);\n\nSpinner.displayName = \"Spinner\";\n\n_defineProperty(Spinner, \"propTypes\", _objectSpread({}, Box.propTypes, {\n  /**\n   * Delay after which spinner should be visible.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * The size of the spinner.\n   */\n  size: PropTypes.number.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(Spinner, \"defaultProps\", {\n  size: 40,\n  delay: 0\n});\n\nexport default withTheme(Spinner);","map":{"version":3,"sources":["../../../src/spinner/src/Spinner.js"],"names":["loadingKeyframes","transform","loadingCircleKeyframes","strokeDashoffset","outerClass","animation","innerClass","strokeDasharray","strokeWidth","strokeMiterlimit","strokeLinecap","stroke","fill","Spinner","PureComponent","Box","propTypes","delay","PropTypes","number","size","isRequired","theme","isVisible","props","setTimeout","clearTimeout","withTheme"],"mappings":"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","sourcesContent":["import { css } from 'glamor'\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { withTheme } from '../../theme'\n\nconst loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n})\n\nconst loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n})\n\nconst outerClass = css({\n  animation: `${loadingKeyframes} 2s linear infinite`\n}).toString()\n\nconst innerClass = color =>\n  css({\n    strokeDashoffset: 600,\n    strokeDasharray: 300,\n    strokeWidth: 12,\n    strokeMiterlimit: 10,\n    strokeLinecap: 'round',\n    animation: `${loadingCircleKeyframes} 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite`,\n    stroke: color,\n    fill: 'transparent'\n  }).toString()\n\nclass Spinner extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Box component as the base.\n     */\n    ...Box.propTypes,\n\n    /**\n     * Delay after which spinner should be visible.\n     */\n    delay: PropTypes.number,\n\n    /**\n     * The size of the spinner.\n     */\n    size: PropTypes.number.isRequired,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired\n  }\n\n  static defaultProps = {\n    size: 40,\n    delay: 0\n  }\n\n  constructor({ delay }) {\n    super()\n\n    this.state = {\n      isVisible: delay === 0\n    }\n  }\n\n  render() {\n    if (!this.state.isVisible) {\n      return null\n    }\n\n    const { theme, size, ...props } = this.props\n    return (\n      <Box width={size} height={size} lineHeight={0} {...props}>\n        <Box\n          is=\"svg\"\n          className={outerClass}\n          x=\"0px\"\n          y=\"0px\"\n          viewBox=\"0 0 150 150\"\n        >\n          <Box\n            is=\"circle\"\n            className={innerClass(theme.spinnerColor)}\n            cx=\"75\"\n            cy=\"75\"\n            r=\"60\"\n          />\n        </Box>\n      </Box>\n    )\n  }\n\n  componentDidMount() {\n    const { delay } = this.props\n\n    if (delay > 0) {\n      this.delayTimer = setTimeout(() => {\n        this.setState({\n          isVisible: true\n        })\n      }, delay)\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.delayTimer)\n  }\n}\n\nexport default withTheme(Spinner)\n"]},"metadata":{},"sourceType":"module"}