{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Button } from '../../buttons';\nimport { TextInput } from '../../text-input';\nimport safeInvoke from '../../lib/safe-invoke';\nexport var CLASS_PREFIX = 'evergreen-file-picker';\n\nvar FilePicker = /*#__PURE__*/function (_PureComponent) {\n  _inherits(FilePicker, _PureComponent);\n\n  function FilePicker() {\n    var _this;\n\n    _classCallCheck(this, FilePicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilePicker).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"fileInputRef\", function (node) {\n      _this.fileInput = node;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFileChange\", function (e) {\n      // Firefox returns the same array instance each time for some reason\n      var files = _toConsumableArray(e.target.files);\n\n      _this.setState({\n        files: files\n      });\n\n      safeInvoke(_this.props.onChange, files);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleButtonClick\", function () {\n      _this.fileInput.click();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (e) {\n      // Setting e.target.files to an array fails. It must be a FileList\n      if (e && e.target) e.target.files = _this.fileInput && _this.fileInput.files;\n      safeInvoke(_this.props.onBlur, e);\n    });\n\n    _this.state = {\n      files: []\n    };\n    return _this;\n  }\n\n  _createClass(FilePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          name = _this$props.name,\n          accept = _this$props.accept,\n          required = _this$props.required,\n          multiple = _this$props.multiple,\n          disabled = _this$props.disabled,\n          capture = _this$props.capture,\n          height = _this$props.height,\n          onChange = _this$props.onChange,\n          placeholder = _this$props.placeholder,\n          props = _objectWithoutProperties(_this$props, [\"name\", \"accept\", \"required\", \"multiple\", \"disabled\", \"capture\", \"height\", \"onChange\", \"placeholder\"]);\n\n      var files = this.state.files;\n      var inputValue;\n\n      if (files.length === 0) {\n        inputValue = '';\n      } else if (files.length === 1) {\n        inputValue = files[0].name;\n      } else {\n        inputValue = \"\".concat(files.length, \" files\");\n      }\n\n      var buttonText;\n\n      if (files.length === 0) {\n        buttonText = 'Select file';\n      } else if (files.length === 1) {\n        buttonText = 'Replace file';\n      } else {\n        buttonText = 'Replace files';\n      }\n\n      return React.createElement(Box, _extends({\n        display: \"flex\",\n        className: \"\".concat(CLASS_PREFIX, \"-root\")\n      }, props), React.createElement(Box, {\n        innerRef: this.fileInputRef,\n        className: \"\".concat(CLASS_PREFIX, \"-file-input\"),\n        is: \"input\",\n        type: \"file\",\n        name: name,\n        accept: accept,\n        required: required,\n        multiple: multiple,\n        disabled: disabled,\n        capture: capture,\n        onChange: this.handleFileChange,\n        display: \"none\"\n      }), React.createElement(TextInput, {\n        className: \"\".concat(CLASS_PREFIX, \"-text-input\"),\n        readOnly: true,\n        value: inputValue,\n        placeholder: placeholder // There's a weird specifity issue when there's two differently sized inputs on the page\n        ,\n        borderTopRightRadius: \"0 !important\",\n        borderBottomRightRadius: \"0 !important\",\n        height: height,\n        flex: 1,\n        textOverflow: \"ellipsis\",\n        onBlur: this.handleBlur\n      }), React.createElement(Button, {\n        className: \"\".concat(CLASS_PREFIX, \"-button\"),\n        onClick: this.handleButtonClick,\n        disabled: disabled,\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n        height: height,\n        flexShrink: 0,\n        type: \"button\",\n        onBlur: this.handleBlur\n      }, buttonText));\n    }\n  }]);\n\n  return FilePicker;\n}(PureComponent);\n\nFilePicker.displayName = \"FilePicker\";\n\n_defineProperty(FilePicker, \"propTypes\", {\n  /**\n   * Name attribute of the input.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The accept attribute of the input.\n   */\n  accept: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /**\n   * When true, the file picker is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * When true, accept multiple files.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * When true, the filepicker is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The capture attribute of the input.\n   */\n  capture: PropTypes.bool,\n\n  /**\n   * The height of the file picker.\n   */\n  height: PropTypes.number,\n\n  /**\n   * Function called when onChange is fired\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Function called when onBlur is fired\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Placeholder of the text input\n   */\n  placeholder: PropTypes.string\n});\n\n_defineProperty(FilePicker, \"defaultProps\", {\n  placeholder: 'Select a file to uploadâ€¦'\n});\n\nexport { FilePicker as default };","map":{"version":3,"sources":["../../../src/file-picker/src/FilePicker.js"],"names":["CLASS_PREFIX","FilePicker","PureComponent","name","PropTypes","accept","required","multiple","disabled","capture","height","onChange","onBlur","placeholder","string","files","props","inputValue","buttonText","handleBlur","e","safeInvoke"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { Button } from '../../buttons'\nimport { TextInput } from '../../text-input'\nimport safeInvoke from '../../lib/safe-invoke'\n\nexport const CLASS_PREFIX = 'evergreen-file-picker'\n\nexport default class FilePicker extends PureComponent {\n  static propTypes = {\n    /**\n     * Name attribute of the input.\n     */\n    name: PropTypes.string,\n\n    /**\n     * The accept attribute of the input.\n     */\n    accept: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.string)\n    ]),\n\n    /**\n     * When true, the file picker is required.\n     */\n    required: PropTypes.bool,\n\n    /**\n     * When true, accept multiple files.\n     */\n    multiple: PropTypes.bool,\n\n    /**\n     * When true, the filepicker is disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * The capture attribute of the input.\n     */\n    capture: PropTypes.bool,\n\n    /**\n     * The height of the file picker.\n     */\n    height: PropTypes.number,\n\n    /**\n     * Function called when onChange is fired\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * Function called when onBlur is fired\n     */\n    onBlur: PropTypes.func,\n\n    /**\n     * Placeholder of the text input\n     */\n    placeholder: PropTypes.string\n  }\n\n  static defaultProps = {\n    placeholder: 'Select a file to uploadâ€¦'\n  }\n\n  constructor() {\n    super()\n\n    this.state = {\n      files: []\n    }\n  }\n\n  render() {\n    const {\n      name,\n      accept,\n      required,\n      multiple,\n      disabled,\n      capture,\n      height,\n      onChange, // Remove onChange from props\n      placeholder,\n      ...props\n    } = this.props\n    const { files } = this.state\n\n    let inputValue\n    if (files.length === 0) {\n      inputValue = ''\n    } else if (files.length === 1) {\n      inputValue = files[0].name\n    } else {\n      inputValue = `${files.length} files`\n    }\n\n    let buttonText\n    if (files.length === 0) {\n      buttonText = 'Select file'\n    } else if (files.length === 1) {\n      buttonText = 'Replace file'\n    } else {\n      buttonText = 'Replace files'\n    }\n\n    return (\n      <Box display=\"flex\" className={`${CLASS_PREFIX}-root`} {...props}>\n        <Box\n          innerRef={this.fileInputRef}\n          className={`${CLASS_PREFIX}-file-input`}\n          is=\"input\"\n          type=\"file\"\n          name={name}\n          accept={accept}\n          required={required}\n          multiple={multiple}\n          disabled={disabled}\n          capture={capture}\n          onChange={this.handleFileChange}\n          display=\"none\"\n        />\n\n        <TextInput\n          className={`${CLASS_PREFIX}-text-input`}\n          readOnly\n          value={inputValue}\n          placeholder={placeholder}\n          // There's a weird specifity issue when there's two differently sized inputs on the page\n          borderTopRightRadius=\"0 !important\"\n          borderBottomRightRadius=\"0 !important\"\n          height={height}\n          flex={1}\n          textOverflow=\"ellipsis\"\n          onBlur={this.handleBlur}\n        />\n\n        <Button\n          className={`${CLASS_PREFIX}-button`}\n          onClick={this.handleButtonClick}\n          disabled={disabled}\n          borderTopLeftRadius={0}\n          borderBottomLeftRadius={0}\n          height={height}\n          flexShrink={0}\n          type=\"button\"\n          onBlur={this.handleBlur}\n        >\n          {buttonText}\n        </Button>\n      </Box>\n    )\n  }\n\n  fileInputRef = node => {\n    this.fileInput = node\n  }\n\n  handleFileChange = e => {\n    // Firefox returns the same array instance each time for some reason\n    const files = [...e.target.files]\n\n    this.setState({ files })\n\n    safeInvoke(this.props.onChange, files)\n  }\n\n  handleButtonClick = () => {\n    this.fileInput.click()\n  }\n\n  handleBlur = e => {\n    // Setting e.target.files to an array fails. It must be a FileList\n    if (e && e.target) e.target.files = this.fileInput && this.fileInput.files\n\n    safeInvoke(this.props.onBlur, e)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}