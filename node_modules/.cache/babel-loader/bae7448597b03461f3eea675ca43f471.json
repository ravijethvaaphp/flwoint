{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { withTheme } from '../../theme';\nimport Text from './Text';\n\nvar Link = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Link, _PureComponent);\n\n  function Link() {\n    _classCallCheck(this, Link);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Link).apply(this, arguments));\n  }\n\n  _createClass(Link, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          color = _this$props.color,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"color\"]);\n\n      var themedClassName = theme.getLinkClassName(color);\n      return React.createElement(Text, _extends({\n        is: \"a\",\n        className: cx(className, themedClassName),\n        textDecoration: \"underline\",\n        color: null\n      }, props));\n    }\n  }]);\n\n  return Link;\n}(PureComponent);\n\nLink.displayName = \"Link\";\n\n_defineProperty(Link, \"propTypes\", _objectSpread({}, Text.propTypes, {\n  /**\n   * This attribute names a relationship of the linked document to the current document.\n   * Common use case is: rel=\"noopener noreferrer\".\n   */\n  rel: PropTypes.string,\n\n  /**\n   * Specifies the URL of the linked resource. A URL might be absolute or relative.\n   */\n  href: PropTypes.string,\n\n  /**\n   * Target atrribute, common use case is target=\"_blank.\"\n   */\n  target: PropTypes.string,\n\n  /**\n   * The color (and styling) of the Link. Can be default, blue, green or neutral.\n   */\n  color: PropTypes.string.isRequired,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the link.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(Link, \"defaultProps\", {\n  color: 'default'\n});\n\nexport default withTheme(Link);","map":{"version":3,"sources":["../../../src/typography/src/Link.js"],"names":["Link","PureComponent","Text","propTypes","rel","PropTypes","string","href","target","color","isRequired","theme","className","props","themedClassName","cx","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,EAAA,MAAA,YAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,OAAA,IAAA,MAAA,QAAA;;IAEMA,I;;;;;;;;;;;6BAyCK;AAAA,UAAA,WAAA,GACuC,KADvC,KAAA;AAAA,UACCW,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQC,SADR,GAAA,WAAA,CAAA,SAAA;AAAA,UACmBH,KADnB,GAAA,WAAA,CAAA,KAAA;AAAA,UAC6BI,KAD7B,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CAAA;;AAGP,UAAMC,eAAe,GAAGH,KAAK,CAALA,gBAAAA,CAAxB,KAAwBA,CAAxB;AAEA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,QAAA,EAAE,EADJ,GAAA;AAEE,QAAA,SAAS,EAAEI,EAAE,CAAA,SAAA,EAFf,eAEe,CAFf;AAGE,QAAA,cAAc,EAHhB,WAAA;AAIE,QAAA,KAAK,EAAE;AAJT,OAAA,EADF,KACE,CAAA,CADF;AASD;;;;EAvDgBd,a;;AAAbD,I,YAAAA,G,MAAAA;;gBAAAA,I,iCAECE,IAAI,CAACC,S;AAER;;;;AAIAC,EAAAA,GAAG,EAAEC,SAAS,CAACC,M;;AAEf;;;AAGAC,EAAAA,IAAI,EAAEF,SAAS,CAACC,M;;AAEhB;;;AAGAE,EAAAA,MAAM,EAAEH,SAAS,CAACC,M;;AAElB;;;AAGAG,EAAAA,KAAK,EAAEJ,SAAS,CAATA,MAAAA,CAAiBK,U;;AAExB;;;AAGAC,EAAAA,KAAK,EAAEN,SAAS,CAATA,MAAAA,CAAiBK,U;;AAExB;;;;AAIAE,EAAAA,SAAS,EAAEP,SAAS,CAACC;;;gBAlCnBN,I,kBAqCkB;AACpBS,EAAAA,KAAK,EAAE;AADa,C;;AAqBxB,eAAeO,SAAS,CAAxB,IAAwB,CAAxB","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { withTheme } from '../../theme'\nimport Text from './Text'\n\nclass Link extends PureComponent {\n  static propTypes = {\n    ...Text.propTypes,\n\n    /**\n     * This attribute names a relationship of the linked document to the current document.\n     * Common use case is: rel=\"noopener noreferrer\".\n     */\n    rel: PropTypes.string,\n\n    /**\n     * Specifies the URL of the linked resource. A URL might be absolute or relative.\n     */\n    href: PropTypes.string,\n\n    /**\n     * Target atrribute, common use case is target=\"_blank.\"\n     */\n    target: PropTypes.string,\n\n    /**\n     * The color (and styling) of the Link. Can be default, blue, green or neutral.\n     */\n    color: PropTypes.string.isRequired,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Class name passed to the link.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    color: 'default'\n  }\n\n  render() {\n    const { theme, className, color, ...props } = this.props\n\n    const themedClassName = theme.getLinkClassName(color)\n\n    return (\n      <Text\n        is=\"a\"\n        className={cx(className, themedClassName)}\n        textDecoration=\"underline\"\n        color={null}\n        {...props}\n      />\n    )\n  }\n}\n\nexport default withTheme(Link)\n"]},"metadata":{},"sourceType":"module"}