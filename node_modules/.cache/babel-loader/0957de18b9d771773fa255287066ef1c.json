{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { toaster } from '../../toaster';\nimport { withTheme } from '../../theme';\nimport { Pane } from '../../layers';\nimport safeInvoke from '../../lib/safe-invoke';\nimport { TableRowConsumer } from './TableRowContext';\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction';\n\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return;\n  }\n\n  if (typeof override === 'function') {\n    override();\n    return;\n  }\n\n  if (typeof override === 'string') {\n    document.querySelector(override).focus();\n    return;\n  } // This needs to be the node, not a React ref.\n\n\n  override.focus();\n}\n\nvar TableCell = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TableCell, _PureComponent);\n\n  function TableCell() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TableCell);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (e) {\n      var _this$props$arrowKeys = _this.props.arrowKeysOverrides,\n          arrowKeysOverrides = _this$props$arrowKeys === void 0 ? {} : _this$props$arrowKeys;\n\n      if (_this.props.isSelectable) {\n        var key = e.key;\n\n        if (key === 'ArrowUp' || key === 'ArrowDown' || key === 'ArrowLeft' || key === 'ArrowRight') {\n          e.preventDefault();\n\n          try {\n            // Support arrow key overrides.\n            var override = arrowKeysOverrides[key.slice('Arrow'.length).toLowerCase()];\n            if (override === false) return;\n            if (override) return executeArrowKeyOverride(override);\n            manageTableCellFocusInteraction(key, _this.mainRef);\n          } catch (error) {\n            toaster.danger('Keyboard interaction not possible');\n            console.error('Keyboard interaction not possible', error);\n          }\n        } else if (key === 'Escape') {\n          _this.mainRef.blur();\n        }\n      }\n\n      safeInvoke(_this.props.onKeyDown, e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRef\", function (ref) {\n      _this.mainRef = ref;\n      safeInvoke(_this.props.innerRef, ref);\n    });\n\n    return _this;\n  }\n\n  _createClass(TableCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          innerRef = _this$props.innerRef,\n          theme = _this$props.theme,\n          children = _this$props.children,\n          appearance = _this$props.appearance,\n          onClick = _this$props.onClick,\n          onKeyPress = _this$props.onKeyPress,\n          onKeyDown = _this$props.onKeyDown,\n          isSelectable = _this$props.isSelectable,\n          _this$props$tabIndex = _this$props.tabIndex,\n          tabIndex = _this$props$tabIndex === void 0 ? -1 : _this$props$tabIndex,\n          className = _this$props.className,\n          rightView = _this$props.rightView,\n          arrowKeysOverrides = _this$props.arrowKeysOverrides,\n          props = _objectWithoutProperties(_this$props, [\"innerRef\", \"theme\", \"children\", \"appearance\", \"onClick\", \"onKeyPress\", \"onKeyDown\", \"isSelectable\", \"tabIndex\", \"className\", \"rightView\", \"arrowKeysOverrides\"]);\n\n      var themedClassName = theme.getTableCellClassName(appearance);\n      return React.createElement(TableRowConsumer, null, function (height) {\n        return React.createElement(Pane, _extends({\n          innerRef: _this2.onRef,\n          height: height,\n          className: cx(themedClassName, className),\n          tabIndex: isSelectable ? tabIndex : undefined,\n          \"data-isselectable\": isSelectable,\n          onClick: onClick,\n          onKeyDown: _this2.handleKeyDown\n        }, TableCell.styles, props), children, rightView ? rightView : null);\n      });\n    }\n  }]);\n\n  return TableCell;\n}(PureComponent);\n\nTableCell.displayName = \"TableCell\";\n\n_defineProperty(TableCell, \"propTypes\", _objectSpread({}, Pane.propTypes, {\n  /*\n   * Makes the TableCell focusable. Used by EditableCell.\n   * Will add tabIndex={-1 || this.props.tabIndex}.\n   */\n  isSelectable: PropTypes.bool,\n\n  /**\n   * The appearance of the table row. Default theme only support default.\n   */\n  appearance: PropTypes.string.isRequired,\n\n  /**\n   * Optional node to be placed on the right side of the table cell.\n   * Useful for icons and icon buttons.\n   */\n  rightView: PropTypes.node,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Advanced arrow keys overrides for selectable cells.\n   * A string will be used as a selector.\n   */\n  arrowKeysOverrides: PropTypes.shape({\n    up: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    down: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    left: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])]),\n    right: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element, PropTypes.oneOf([false])])\n  }),\n\n  /**\n   * Class name passed to the table cell.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(TableCell, \"defaultProps\", {\n  appearance: 'default'\n});\n\n_defineProperty(TableCell, \"styles\", {\n  paddingX: 12,\n  boxSizing: 'border-box',\n  flex: 1,\n  display: 'flex',\n  alignItems: 'center',\n  flexShrink: 0,\n  overflow: 'hidden'\n});\n\nexport default withTheme(TableCell);","map":{"version":3,"sources":["../../../src/table/src/TableCell.js"],"names":["override","document","TableCell","PureComponent","Pane","propTypes","isSelectable","PropTypes","bool","appearance","isRequired","rightView","node","theme","arrowKeysOverrides","up","down","left","right","className","string","paddingX","boxSizing","flex","display","alignItems","flexShrink","overflow","key","e","executeArrowKeyOverride","manageTableCellFocusInteraction","toaster","console","safeInvoke","innerRef","children","onClick","onKeyPress","onKeyDown","tabIndex","props","themedClassName","cx","handleKeyDown","withTheme"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { toaster } from '../../toaster'\nimport { withTheme } from '../../theme'\nimport { Pane } from '../../layers'\nimport safeInvoke from '../../lib/safe-invoke'\nimport { TableRowConsumer } from './TableRowContext'\nimport manageTableCellFocusInteraction from './manageTableCellFocusInteraction'\n\nfunction executeArrowKeyOverride(override) {\n  if (!override) {\n    return\n  }\n\n  if (typeof override === 'function') {\n    override()\n    return\n  }\n\n  if (typeof override === 'string') {\n    document.querySelector(override).focus()\n    return\n  }\n\n  // This needs to be the node, not a React ref.\n  override.focus()\n}\n\nclass TableCell extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Pane component as the base.\n     */\n    ...Pane.propTypes,\n\n    /*\n     * Makes the TableCell focusable. Used by EditableCell.\n     * Will add tabIndex={-1 || this.props.tabIndex}.\n     */\n    isSelectable: PropTypes.bool,\n\n    /**\n     * The appearance of the table row. Default theme only support default.\n     */\n    appearance: PropTypes.string.isRequired,\n\n    /**\n     * Optional node to be placed on the right side of the table cell.\n     * Useful for icons and icon buttons.\n     */\n    rightView: PropTypes.node,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Advanced arrow keys overrides for selectable cells.\n     * A string will be used as a selector.\n     */\n    arrowKeysOverrides: PropTypes.shape({\n      up: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.oneOf([false])\n      ]),\n      down: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.oneOf([false])\n      ]),\n      left: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.oneOf([false])\n      ]),\n      right: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n        PropTypes.oneOf([false])\n      ])\n    }),\n\n    /**\n     * Class name passed to the table cell.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    appearance: 'default'\n  }\n\n  static styles = {\n    paddingX: 12,\n    boxSizing: 'border-box',\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    flexShrink: 0,\n    overflow: 'hidden'\n  }\n\n  handleKeyDown = e => {\n    const { arrowKeysOverrides = {} } = this.props\n\n    if (this.props.isSelectable) {\n      const { key } = e\n      if (\n        key === 'ArrowUp' ||\n        key === 'ArrowDown' ||\n        key === 'ArrowLeft' ||\n        key === 'ArrowRight'\n      ) {\n        e.preventDefault()\n        try {\n          // Support arrow key overrides.\n          const override =\n            arrowKeysOverrides[key.slice('Arrow'.length).toLowerCase()]\n          if (override === false) return\n          if (override) return executeArrowKeyOverride(override)\n\n          manageTableCellFocusInteraction(key, this.mainRef)\n        } catch (error) {\n          toaster.danger('Keyboard interaction not possible')\n          console.error('Keyboard interaction not possible', error)\n        }\n      } else if (key === 'Escape') {\n        this.mainRef.blur()\n      }\n    }\n\n    safeInvoke(this.props.onKeyDown, e)\n  }\n\n  onRef = ref => {\n    this.mainRef = ref\n    safeInvoke(this.props.innerRef, ref)\n  }\n\n  render() {\n    const {\n      innerRef,\n      theme,\n      children,\n      appearance,\n      onClick,\n      onKeyPress,\n      onKeyDown,\n      isSelectable,\n      tabIndex = -1,\n      className,\n      rightView,\n      arrowKeysOverrides,\n      ...props\n    } = this.props\n\n    const themedClassName = theme.getTableCellClassName(appearance)\n\n    return (\n      <TableRowConsumer>\n        {height => {\n          return (\n            <Pane\n              innerRef={this.onRef}\n              height={height}\n              className={cx(themedClassName, className)}\n              tabIndex={isSelectable ? tabIndex : undefined}\n              data-isselectable={isSelectable}\n              onClick={onClick}\n              onKeyDown={this.handleKeyDown}\n              {...TableCell.styles}\n              {...props}\n            >\n              {children}\n              {rightView ? rightView : null}\n            </Pane>\n          )\n        }}\n      </TableRowConsumer>\n    )\n  }\n}\n\nexport default withTheme(TableCell)\n"]},"metadata":{},"sourceType":"module"}