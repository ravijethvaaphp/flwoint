{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { css } from 'glamor';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport { Image } from '../../image';\nimport { Text } from '../../typography';\nimport { withTheme } from '../../theme';\nimport globalGetInitials from './utils/getInitials';\nimport globalHash from './utils/hash';\nvar isObjectFitSupported = typeof document !== 'undefined' && 'objectFit' in document.documentElement.style;\nvar initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString();\n\nvar Avatar = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Avatar, _PureComponent);\n\n  function Avatar(props, context) {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Avatar).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleError\", function () {\n      _this.setState({\n        imageHasFailedLoading: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getColorProps\", function () {\n      var _this$props = _this.props,\n          isSolid = _this$props.isSolid,\n          theme = _this$props.theme,\n          color = _this$props.color,\n          propsHashValue = _this$props.hashValue,\n          name = _this$props.name;\n\n      if (color === 'automatic') {\n        var hashValue = globalHash(propsHashValue || name);\n        return theme.getAvatarProps({\n          isSolid: isSolid,\n          color: color,\n          hashValue: hashValue\n        });\n      }\n\n      return theme.getAvatarProps({\n        isSolid: isSolid,\n        color: color\n      });\n    });\n\n    _this.state = {\n      imageHasFailedLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          theme = _this$props2.theme,\n          src = _this$props2.src,\n          size = _this$props2.size,\n          name = _this$props2.name,\n          isSolid = _this$props2.isSolid,\n          propsHashValue = _this$props2.hashValue,\n          getInitials = _this$props2.getInitials,\n          propsColor = _this$props2.color,\n          forceShowInitials = _this$props2.forceShowInitials,\n          sizeLimitOneCharacter = _this$props2.sizeLimitOneCharacter,\n          props = _objectWithoutProperties(_this$props2, [\"theme\", \"src\", \"size\", \"name\", \"isSolid\", \"hashValue\", \"getInitials\", \"color\", \"forceShowInitials\", \"sizeLimitOneCharacter\"]);\n\n      var imageHasFailedLoading = this.state.imageHasFailedLoading;\n      var imageUnavailable = !src || imageHasFailedLoading;\n      var initialsFontSize = \"\".concat(theme.getAvatarInitialsFontSize(size, sizeLimitOneCharacter), \"px\");\n      var initials = getInitials(name);\n\n      if (size <= sizeLimitOneCharacter) {\n        initials = initials.slice(0, 1);\n      }\n\n      var colorProps = this.getColorProps();\n      return React.createElement(Box, _extends({\n        width: size,\n        height: size,\n        overflow: \"hidden\",\n        borderRadius: 9999,\n        position: \"relative\",\n        display: \"inline-flex\",\n        flexShrink: 0,\n        justifyContent: \"center\",\n        backgroundColor: colorProps.backgroundColor,\n        title: name\n      }, props), (imageUnavailable || forceShowInitials) && React.createElement(Text, {\n        className: initialsStyleClass,\n        fontSize: initialsFontSize,\n        lineHeight: initialsFontSize,\n        width: size,\n        height: size,\n        color: colorProps.color\n      }, initials), !imageUnavailable && React.createElement(Image, {\n        style: {\n          objectFit: 'cover'\n        } // Unsupported by ui-box directly\n        ,\n        width: isObjectFitSupported ? '100%' : 'auto' // Fallback to old behaviour on IE\n        ,\n        height: \"100%\",\n        src: src,\n        onError: this.handleError\n      }));\n    }\n  }]);\n\n  return Avatar;\n}(PureComponent);\n\nAvatar.displayName = \"Avatar\";\n\n_defineProperty(Avatar, \"propTypes\", {\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid: PropTypes.bool,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string.isRequired,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n});\n\n_defineProperty(Avatar, \"defaultProps\", {\n  color: 'automatic',\n  size: 24,\n  isSolid: false,\n  getInitials: globalGetInitials,\n  forceShowInitials: false,\n  sizeLimitOneCharacter: 20\n});\n\nexport default withTheme(Avatar);","map":{"version":3,"sources":["../../../src/avatar/src/Avatar.js"],"names":["isObjectFitSupported","document","initialsStyleClass","top","position","display","alignItems","justifyContent","lineHeight","Avatar","PureComponent","src","PropTypes","size","name","hashValue","isSolid","color","getInitials","forceShowInitials","sizeLimitOneCharacter","theme","isRequired","imageHasFailedLoading","propsHashValue","globalHash","propsColor","props","imageUnavailable","initialsFontSize","initials","colorProps","objectFit","handleError","withTheme"],"mappings":"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","sourcesContent":["import { css } from 'glamor'\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { Image } from '../../image'\nimport { Text } from '../../typography'\nimport { withTheme } from '../../theme'\nimport globalGetInitials from './utils/getInitials'\nimport globalHash from './utils/hash'\n\nconst isObjectFitSupported =\n  typeof document !== 'undefined' &&\n  'objectFit' in document.documentElement.style\n\nconst initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString()\n\nclass Avatar extends PureComponent {\n  static propTypes = {\n    /**\n     * The src attribute of the image.\n     * When it's not available, render initials instead.\n     */\n    src: PropTypes.string,\n\n    /**\n     * The size of the avatar.\n     */\n    size: PropTypes.number,\n\n    /**\n     * The name used for the initials and title attribute.\n     */\n    name: PropTypes.string,\n\n    /**\n     * The value used for the hash function.\n     * The name is used as the hashValue by default.\n     * When dealing with anonymous users you should use the id instead.\n     */\n    hashValue: PropTypes.string,\n\n    /**\n     * When true, render a solid avatar.\n     */\n    isSolid: PropTypes.bool,\n\n    /**\n     * The color used for the avatar.\n     * When the value is `automatic`, use the hash function to determine the color.\n     */\n    color: PropTypes.string.isRequired,\n\n    /**\n     * Function to get the initials based on the name.\n     */\n    getInitials: PropTypes.func,\n\n    /**\n     * When true, force show the initials.\n     * This is useful in some cases when using Gravatar and transparent pngs.\n     */\n    forceShowInitials: PropTypes.bool,\n\n    /**\n     * When the size is smaller than this number, use a single initial for the avatar.\n     */\n    sizeLimitOneCharacter: PropTypes.number,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired\n  }\n\n  static defaultProps = {\n    color: 'automatic',\n    size: 24,\n    isSolid: false,\n    getInitials: globalGetInitials,\n    forceShowInitials: false,\n    sizeLimitOneCharacter: 20\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.state = { imageHasFailedLoading: false }\n  }\n\n  handleError = () => {\n    this.setState({ imageHasFailedLoading: true })\n  }\n\n  getColorProps = () => {\n    const {\n      isSolid,\n      theme,\n      color,\n      hashValue: propsHashValue,\n      name\n    } = this.props\n\n    if (color === 'automatic') {\n      const hashValue = globalHash(propsHashValue || name)\n      return theme.getAvatarProps({ isSolid, color, hashValue })\n    }\n\n    return theme.getAvatarProps({ isSolid, color })\n  }\n\n  render() {\n    const {\n      theme,\n\n      src,\n      size,\n      name,\n      isSolid,\n      hashValue: propsHashValue,\n      getInitials,\n      color: propsColor,\n      forceShowInitials,\n      sizeLimitOneCharacter,\n      ...props\n    } = this.props\n\n    const { imageHasFailedLoading } = this.state\n    const imageUnavailable = !src || imageHasFailedLoading\n    const initialsFontSize = `${theme.getAvatarInitialsFontSize(\n      size,\n      sizeLimitOneCharacter\n    )}px`\n\n    let initials = getInitials(name)\n    if (size <= sizeLimitOneCharacter) {\n      initials = initials.slice(0, 1)\n    }\n\n    const colorProps = this.getColorProps()\n\n    return (\n      <Box\n        width={size}\n        height={size}\n        overflow=\"hidden\"\n        borderRadius={9999}\n        position=\"relative\"\n        display=\"inline-flex\"\n        flexShrink={0}\n        justifyContent=\"center\"\n        backgroundColor={colorProps.backgroundColor}\n        title={name}\n        {...props}\n      >\n        {(imageUnavailable || forceShowInitials) && (\n          <Text\n            className={initialsStyleClass}\n            fontSize={initialsFontSize}\n            lineHeight={initialsFontSize}\n            width={size}\n            height={size}\n            color={colorProps.color}\n          >\n            {initials}\n          </Text>\n        )}\n        {!imageUnavailable && (\n          <Image\n            style={{ objectFit: 'cover' }} // Unsupported by ui-box directly\n            width={isObjectFitSupported ? '100%' : 'auto'} // Fallback to old behaviour on IE\n            height=\"100%\"\n            src={src}\n            onError={this.handleError}\n          />\n        )}\n      </Box>\n    )\n  }\n}\n\nexport default withTheme(Avatar)\n"]},"metadata":{},"sourceType":"module"}