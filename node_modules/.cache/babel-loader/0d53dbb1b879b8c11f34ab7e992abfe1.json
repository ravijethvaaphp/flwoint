{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { css } from 'glamor';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\nimport { SearchIcon } from '../../icons';\nimport TableHeaderCell from './TableHeaderCell';\nvar invisibleInputClass = css({\n  border: 'none',\n  backgroundColor: 'transparent',\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n  WebkitFontSmoothing: 'antialiased',\n  '&:focus': {\n    outline: 'none'\n  },\n  '&::placeholder': {\n    color: \"rgba(67, 90, 111, 0.7)\"\n  }\n}).toString();\n\nvar SearchTableHeaderCell = /*#__PURE__*/function (_PureComponent) {\n  _inherits(SearchTableHeaderCell, _PureComponent);\n\n  function SearchTableHeaderCell() {\n    _classCallCheck(this, SearchTableHeaderCell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SearchTableHeaderCell).apply(this, arguments));\n  }\n\n  _createClass(SearchTableHeaderCell, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          children = _this$props.children,\n          _onChange = _this$props.onChange,\n          autoFocus = _this$props.autoFocus,\n          spellCheck = _this$props.spellCheck,\n          placeholder = _this$props.placeholder,\n          icon = _this$props.icon,\n          props = _objectWithoutProperties(_this$props, [\"value\", \"children\", \"onChange\", \"autoFocus\", \"spellCheck\", \"placeholder\", \"icon\"]);\n\n      return React.createElement(TableHeaderCell, props, React.createElement(Icon, {\n        icon: icon,\n        color: \"muted\",\n        marginLeft: 2,\n        marginRight: 10,\n        size: 12\n      }), React.createElement(Text, {\n        is: \"input\",\n        size: 300,\n        flex: \"1\",\n        className: invisibleInputClass,\n        value: value,\n        onChange: function onChange(e) {\n          return _onChange(e.target.value);\n        },\n        autoFocus: autoFocus,\n        spellCheck: spellCheck,\n        fontWeight: 500,\n        marginLeft: -2,\n        paddingLeft: 0,\n        placeholder: placeholder\n      }));\n    }\n  }]);\n\n  return SearchTableHeaderCell;\n}(PureComponent);\n\nSearchTableHeaderCell.displayName = \"SearchTableHeaderCell\";\n\n_defineProperty(SearchTableHeaderCell, \"propTypes\", _objectSpread({}, TableHeaderCell.propTypes, {\n  /**\n   * The value of the input.\n   */\n  value: PropTypes.string,\n\n  /**\n   * Handler to be called when the input changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Sets whether the component should be automatically focused on component render.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * Sets whether to apply spell checking to the content.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * Text to display in the input if the input is empty.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Icon to display in the input.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.string])\n}));\n\n_defineProperty(SearchTableHeaderCell, \"defaultProps\", {\n  onChange: function onChange() {},\n  spellCheck: true,\n  placeholder: 'Filter...',\n  icon: SearchIcon\n});\n\nexport { SearchTableHeaderCell as default };","map":{"version":3,"sources":["../../../src/table/src/SearchTableHeaderCell.js"],"names":["invisibleInputClass","border","backgroundColor","WebkitAppearance","MozAppearance","WebkitFontSmoothing","outline","color","SearchTableHeaderCell","PureComponent","TableHeaderCell","propTypes","value","PropTypes","string","onChange","func","autoFocus","bool","spellCheck","placeholder","icon","SearchIcon","children","props","e"],"mappings":"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","sourcesContent":["import { css } from 'glamor'\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Text } from '../../typography'\nimport { Icon } from '../../icon'\nimport { SearchIcon } from '../../icons'\nimport TableHeaderCell from './TableHeaderCell'\n\nconst invisibleInputClass = css({\n  border: 'none',\n  backgroundColor: 'transparent',\n  WebkitAppearance: 'none',\n  MozAppearance: 'none',\n  WebkitFontSmoothing: 'antialiased',\n\n  '&:focus': {\n    outline: 'none'\n  },\n\n  '&::placeholder': {\n    color: `rgba(67, 90, 111, 0.7)`\n  }\n}).toString()\n\nexport default class SearchTableHeaderCell extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TableHeaderCell component as the base.\n     */\n    ...TableHeaderCell.propTypes,\n\n    /**\n     * The value of the input.\n     */\n    value: PropTypes.string,\n\n    /**\n     * Handler to be called when the input changes.\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * Sets whether the component should be automatically focused on component render.\n     */\n    autoFocus: PropTypes.bool,\n\n    /**\n     * Sets whether to apply spell checking to the content.\n     */\n    spellCheck: PropTypes.bool,\n\n    /**\n     * Text to display in the input if the input is empty.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * Icon to display in the input.\n     */\n    icon: PropTypes.oneOfType([\n      PropTypes.elementType,\n      PropTypes.element,\n      PropTypes.string\n    ])\n  }\n\n  static defaultProps = {\n    onChange: () => {},\n    spellCheck: true,\n    placeholder: 'Filter...',\n    icon: SearchIcon\n  }\n\n  render() {\n    const {\n      value,\n      children,\n      onChange,\n      autoFocus,\n      spellCheck,\n      placeholder,\n      icon,\n      ...props\n    } = this.props\n\n    return (\n      <TableHeaderCell {...props}>\n        <Icon\n          icon={icon}\n          color=\"muted\"\n          marginLeft={2}\n          marginRight={10}\n          size={12}\n        />\n        <Text\n          is=\"input\"\n          size={300}\n          flex=\"1\"\n          className={invisibleInputClass}\n          value={value}\n          onChange={e => onChange(e.target.value)}\n          autoFocus={autoFocus}\n          spellCheck={spellCheck}\n          fontWeight={500}\n          marginLeft={-2}\n          paddingLeft={0}\n          placeholder={placeholder}\n        />\n      </TableHeaderCell>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}