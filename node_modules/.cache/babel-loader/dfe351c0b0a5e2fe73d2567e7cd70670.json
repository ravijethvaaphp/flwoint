{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { spacing, dimensions, position, layout } from 'ui-box';\nimport { withTheme } from '../../theme';\nimport { Pane } from '../../layers';\nimport { Text } from '../../typography';\nimport { Icon } from '../../icon';\n\nvar InlineAlert = /*#__PURE__*/function (_PureComponent) {\n  _inherits(InlineAlert, _PureComponent);\n\n  function InlineAlert() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InlineAlert);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InlineAlert)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"getIconForIntent\", function (intent) {\n      var theme = _this.props.theme;\n      return React.createElement(Icon, _extends({\n        size: 14,\n        marginTop: 2\n      }, theme.getIconForIntent(intent)));\n    });\n\n    return _this;\n  }\n\n  _createClass(InlineAlert, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          children = _this$props.children,\n          intent = _this$props.intent,\n          hasIcon = _this$props.hasIcon,\n          size = _this$props.size,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"children\", \"intent\", \"hasIcon\", \"size\"]);\n\n      return React.createElement(Pane, _extends({\n        alignItems: \"center\",\n        display: \"flex\"\n      }, props), hasIcon && React.createElement(Pane, {\n        display: \"inline\",\n        marginRight: 8\n      }, this.getIconForIntent(intent)), React.createElement(Text, {\n        size: size,\n        fontWeight: 500\n      }, children));\n    }\n  }]);\n\n  return InlineAlert;\n}(PureComponent);\n\nInlineAlert.displayName = \"InlineAlert\";\n\n_defineProperty(InlineAlert, \"propTypes\", _objectSpread({}, spacing.propTypes, {}, position.propTypes, {}, layout.propTypes, {}, dimensions.propTypes, {\n  /**\n   * The content of the alert.\n   */\n  children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n  /**\n   * The intent of the alert. This should always be set explicitly.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,\n\n  /**\n   * When true, show a icon on the left matching the type.\n   * There is no point not showing this.\n   */\n  hasIcon: PropTypes.bool,\n\n  /**\n   * The size of the Text.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired\n}));\n\n_defineProperty(InlineAlert, \"defaultProps\", {\n  intent: 'none',\n  hasIcon: true,\n  size: 400\n});\n\nexport default withTheme(InlineAlert);","map":{"version":3,"sources":["../../../src/alert/src/InlineAlert.js"],"names":["InlineAlert","PureComponent","spacing","propTypes","position","layout","dimensions","children","PropTypes","intent","isRequired","hasIcon","bool","size","number","theme","props","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,aAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,SAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,MAAA,QAAA,QAAA;AACA,SAAA,SAAA,QAAA,aAAA;AACA,SAAA,IAAA,QAAA,cAAA;AACA,SAAA,IAAA,QAAA,kBAAA;AACA,SAAA,IAAA,QAAA,YAAA;;IAEMA,W;;;;;;;;;;;;;;;;uEA4Ce,UAAA,MAAA,EAAU;AAAA,UACnBe,KADmB,GACT,KAAA,CADS,KACT,CADS,KAAA;AAG3B,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,QAAA,IAAI,EAAV,EAAA;AAAgB,QAAA,SAAS,EAAE;AAA3B,OAAA,EAAkCA,KAAK,CAALA,gBAAAA,CAAzC,MAAyCA,CAAlC,CAAA,CAAP;;;;;;;;6BAGO;AAAA,UAAA,WAAA,GACsD,KADtD,KAAA;AAAA,UACCA,KADD,GAAA,WAAA,CAAA,KAAA;AAAA,UACQR,QADR,GAAA,WAAA,CAAA,QAAA;AAAA,UACkBE,MADlB,GAAA,WAAA,CAAA,MAAA;AAAA,UAC0BE,OAD1B,GAAA,WAAA,CAAA,OAAA;AAAA,UACmCE,IADnC,GAAA,WAAA,CAAA,IAAA;AAAA,UAC4CG,KAD5C,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,CAAA,CAAA;;AAGP,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAM,QAAA,UAAU,EAAhB,QAAA;AAA0B,QAAA,OAAO,EAAC;AAAlC,OAAA,EAAA,KAAA,CAAA,EACGL,OAAO,IACN,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,OAAO,EAAb,QAAA;AAAuB,QAAA,WAAW,EAAE;AAApC,OAAA,EACG,KAAA,gBAAA,CAHP,MAGO,CADH,CAFJ,EAME,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,QAAA,IAAI,EAAV,IAAA;AAAkB,QAAA,UAAU,EAAE;AAA9B,OAAA,EAPJ,QAOI,CANF,CADF;AAYD;;;;EAjEuBV,a;;AAApBD,W,YAAAA,G,aAAAA;;gBAAAA,W,iCAKCE,OAAO,CAACC,S,MACRC,QAAQ,CAACD,S,MACTE,MAAM,CAACF,S,MACPG,UAAU,CAACH,S;AAEd;;;AAGAI,EAAAA,QAAQ,EAAEC,SAAS,CAATA,SAAAA,CAAoB,CAACA,SAAS,CAAV,MAAA,EAAmBA,SAAS,CAAhDA,IAAoB,CAApBA,C;;AAEV;;;AAGAC,EAAAA,MAAM,EAAED,SAAS,CAATA,KAAAA,CAAgB,CAAA,MAAA,EAAA,SAAA,EAAA,SAAA,EAAhBA,QAAgB,CAAhBA,EACLE,U;;AAEH;;;;AAIAC,EAAAA,OAAO,EAAEH,SAAS,CAACI,I;;AAEnB;;;AAGAC,EAAAA,IAAI,EAAEL,SAAS,CAACM,M;;AAEhB;;;AAGAC,EAAAA,KAAK,EAAEP,SAAS,CAATA,MAAAA,CAAiBE;;;gBAnCtBV,W,kBAsCkB;AACpBS,EAAAA,MAAM,EADc,MAAA;AAEpBE,EAAAA,OAAO,EAFa,IAAA;AAGpBE,EAAAA,IAAI,EAAE;AAHc,C;;AA8BxB,eAAeI,SAAS,CAAxB,WAAwB,CAAxB","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { spacing, dimensions, position, layout } from 'ui-box'\nimport { withTheme } from '../../theme'\nimport { Pane } from '../../layers'\nimport { Text } from '../../typography'\nimport { Icon } from '../../icon'\n\nclass InlineAlert extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes some Box APIs.\n     */\n    ...spacing.propTypes,\n    ...position.propTypes,\n    ...layout.propTypes,\n    ...dimensions.propTypes,\n\n    /**\n     * The content of the alert.\n     */\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\n    /**\n     * The intent of the alert. This should always be set explicitly.\n     */\n    intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger'])\n      .isRequired,\n\n    /**\n     * When true, show a icon on the left matching the type.\n     * There is no point not showing this.\n     */\n    hasIcon: PropTypes.bool,\n\n    /**\n     * The size of the Text.\n     */\n    size: PropTypes.number,\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired\n  }\n\n  static defaultProps = {\n    intent: 'none',\n    hasIcon: true,\n    size: 400\n  }\n\n  getIconForIntent = intent => {\n    const { theme } = this.props\n\n    return <Icon size={14} marginTop={2} {...theme.getIconForIntent(intent)} />\n  }\n\n  render() {\n    const { theme, children, intent, hasIcon, size, ...props } = this.props\n\n    return (\n      <Pane alignItems=\"center\" display=\"flex\" {...props}>\n        {hasIcon && (\n          <Pane display=\"inline\" marginRight={8}>\n            {this.getIconForIntent(intent)}\n          </Pane>\n        )}\n        <Text size={size} fontWeight={500}>\n          {children}\n        </Text>\n      </Pane>\n    )\n  }\n}\n\nexport default withTheme(InlineAlert)\n"]},"metadata":{},"sourceType":"module"}