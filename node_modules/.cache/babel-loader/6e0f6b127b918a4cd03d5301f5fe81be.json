{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from 'ui-box';\nimport cx from 'classnames';\nimport { Text } from '../../typography';\nimport { withTheme } from '../../theme';\nimport { majorScale } from '../../scales';\nimport safeInvoke from '../../lib/safe-invoke';\nimport Tag from './Tag';\nvar inputId = 1;\nvar GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n};\n\nvar TagInput = /*#__PURE__*/function (_React$Component) {\n  _inherits(TagInput, _React$Component);\n\n  function TagInput() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TagInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TagInput)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      inputValue: '',\n      isFocused: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", \"TagInput-\".concat(inputId++));\n\n    _defineProperty(_assertThisInitialized(_this), \"addTags\", function () {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var _this$props = _this.props,\n          onAdd = _this$props.onAdd,\n          onChange = _this$props.onChange,\n          values = _this$props.values;\n\n      var newValues = _this.getValues(value);\n\n      var shouldClearInput = safeInvoke(onAdd, newValues);\n\n      if (typeof onChange === 'function') {\n        shouldClearInput = shouldClearInput || onChange(values.concat(newValues));\n      }\n\n      if (shouldClearInput !== false) {\n        _this.setState({\n          inputValue: ''\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getValues\", function () {\n      var inputValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var separator = _this.props.separator;\n      return separator ? inputValue.split(separator).map(function (v) {\n        return v.trim();\n      }).filter(function (v) {\n        return v.length > 0;\n      }) : [inputValue];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBackspaceToRemove\", function () {\n      var values = _this.props.values; // Delete last item in values\n\n      _this.removeTagAtIndex(values.length - 1);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function (event) {\n      var container = event.target; // Use raf so that the dom has time to update `activeElement`\n\n      requestAnimationFrame(function () {\n        if (!container.contains(document.activeElement)) {\n          if (_this.props.addOnBlur && _this.state.inputValue) {\n            _this.addTags(_this.state.inputValue);\n          }\n\n          _this.setState({\n            isFocused: false\n          });\n        }\n      });\n      safeInvoke(_this.props.onBlur, event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputChange\", function (event) {\n      _this.setState({\n        inputValue: event.target.value\n      });\n\n      safeInvoke(_this.props.onInputChange, event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInputFocus\", function (event) {\n      _this.setState({\n        isFocused: true\n      });\n\n      safeInvoke(_this.props.onFocus, event);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (event) {\n      var _event$target = event.target,\n          selectionEnd = _event$target.selectionEnd,\n          value = _event$target.value;\n      var key = GET_KEY_FOR_TAG_DELIMITER[_this.props.tagSubmitKey];\n\n      if (event.key === key) {\n        // Prevent Enter keypresses from submitting forms since they have special powers inside TagInput\n        event.preventDefault();\n\n        _this.addTags(value);\n      } else if (event.key === 'Backspace' && selectionEnd === 0) {\n        _this.handleBackspaceToRemove(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRemoveTag\", function (event) {\n      // Using data attribute to simplify callback logic -- one handler for all children\n      var index = Number(event.currentTarget.parentElement.getAttribute('data-tag-index'));\n\n      _this.removeTagAtIndex(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"maybeRenderTag\", function (tag, index) {\n      if (!tag) {\n        return null;\n      }\n\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          tagProps = _this$props2.tagProps;\n      var props = safeInvoke(tagProps, tag, index) || tagProps;\n      return React.createElement(Tag, _extends({\n        key: \"\".concat(tag, \":\").concat(index),\n        \"data-tag-index\": index,\n        marginRight: majorScale(1),\n        marginY: \"6px\",\n        onRemove: disabled ? null : _this.handleRemoveTag,\n        isRemovable: !disabled\n      }, props), tag);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTagAtIndex\", function (index) {\n      var _this$props3 = _this.props,\n          onChange = _this$props3.onChange,\n          onRemove = _this$props3.onRemove,\n          values = _this$props3.values;\n      safeInvoke(onRemove, values[index], index); // Remove item at index as a new array\n\n      var newValues = values.filter(function (_, i) {\n        return i !== index;\n      });\n      safeInvoke(onChange, newValues);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setRef\", function (node) {\n      _this.input = node;\n      safeInvoke(_this.props.inputRef, node);\n    });\n\n    return _this;\n  }\n\n  _createClass(TagInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          addOnBlur = _this$props4.addOnBlur,\n          className = _this$props4.className,\n          disabled = _this$props4.disabled,\n          height = _this$props4.height,\n          inputProps = _this$props4.inputProps,\n          inputRef = _this$props4.inputRef,\n          onAdd = _this$props4.onAdd,\n          onChange = _this$props4.onChange,\n          onInputChange = _this$props4.onInputChange,\n          onRemove = _this$props4.onRemove,\n          separator = _this$props4.separator,\n          tagProps = _this$props4.tagProps,\n          theme = _this$props4.theme,\n          values = _this$props4.values,\n          props = _objectWithoutProperties(_this$props4, [\"addOnBlur\", \"className\", \"disabled\", \"height\", \"inputProps\", \"inputRef\", \"onAdd\", \"onChange\", \"onInputChange\", \"onRemove\", \"separator\", \"tagProps\", \"theme\", \"values\"]);\n\n      var _this$state = this.state,\n          inputValue = _this$state.inputValue,\n          isFocused = _this$state.isFocused;\n      var themedContainerClassName = theme.getTagInputClassName('default');\n      var themedInputClassName = theme.getTextInputClassName('none');\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      return React.createElement(Box, _extends({\n        \"aria-disabled\": disabled || undefined,\n        \"aria-activedescendant\": isFocused ? this.id : undefined,\n        borderRadius: borderRadius,\n        className: cx(themedContainerClassName, className),\n        paddingLeft: Math.round(height / 3.2),\n        paddingRight: Math.round(height / 3.2),\n        paddingY: \"2px\"\n      }, props, {\n        onBlur: this.handleBlur\n      }), values.map(this.maybeRenderTag), React.createElement(Text, _extends({\n        is: \"input\",\n        id: this.id,\n        color: disabled ? 'muted' : undefined,\n        disabled: disabled,\n        flexGrow: \"1\",\n        height: height - 4,\n        size: textSize,\n        type: \"text\",\n        value: inputValue\n      }, inputProps, {\n        className: themedInputClassName,\n        ref: this.setRef,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        onKeyDown: this.handleKeyDown\n      })));\n    }\n  }]);\n\n  return TagInput;\n}(React.Component);\n\nTagInput.displayName = \"TagInput\";\n\n_defineProperty(TagInput, \"propTypes\", {\n  /** Whether or not the inputValue should be added to the tags when the input blurs. */\n  addOnBlur: PropTypes.bool,\n\n  /** The class name to apply to the container component. */\n  className: PropTypes.string,\n\n  /** Whether or not the input should be disabled. */\n  disabled: PropTypes.bool,\n\n  /** The vertical size of the input */\n  height: PropTypes.number,\n\n  /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n  inputProps: PropTypes.object,\n\n  /**\n   * Ref handler for the input element.\n   * (input: HTMLInputElement | null) => void\n   */\n  inputRef: PropTypes.func,\n\n  /**\n   * Callback invoked when new tags are added.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onAdd: PropTypes.func,\n\n  /**\n   * Callback invoked when focus on the input blurs.\n   * (event) => void\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback invoked when the tag values change.\n   * Returning `false` will prevent clearing the input.\n   * (values: Array) => void | false\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback invoked when the input receives focus.\n   * (event) => void\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n   * (event) => void\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback invoked when a tag is removed.\n   * Receives value and index of removed tag.\n   * (value: string | node, index: number) => void\n   */\n  onRemove: PropTypes.func,\n\n  /** Value or RegExp to split on pasted text or on enter keypress */\n  separator: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp), PropTypes.oneOf([false])]),\n\n  /** Provide props to tag component (actually `Badge`, for now). */\n  tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n\n  /** Key to press in order to submit a new tag while typing.  */\n  tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /** Controlled tag values. Each value is rendered inside a tag. */\n  values: PropTypes.arrayOf(PropTypes.node)\n});\n\n_defineProperty(TagInput, \"defaultProps\", {\n  addOnBlur: false,\n  disabled: false,\n  height: 32,\n  separator: /[,\\n\\r]/,\n  values: [],\n  tagSubmitKey: 'enter',\n  tagProps: {}\n});\n\nexport default withTheme(TagInput);","map":{"version":3,"sources":["../../../src/tag-input/src/TagInput.js"],"names":["inputId","GET_KEY_FOR_TAG_DELIMITER","enter","space","TagInput","React","Component","addOnBlur","PropTypes","className","disabled","height","inputProps","inputRef","onAdd","onBlur","onChange","onFocus","onInputChange","onRemove","separator","tagProps","tagSubmitKey","theme","values","inputValue","isFocused","value","newValues","shouldClearInput","safeInvoke","v","container","event","requestAnimationFrame","document","selectionEnd","key","index","Number","props","majorScale","i","themedContainerClassName","themedInputClassName","textSize","borderRadius","cx","Math","handleBlur","handleKeyDown","withTheme"],"mappings":"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","sourcesContent":["/**\n * @overview TagInput accepts multiple values that can be individually removed\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport cx from 'classnames'\nimport { Text } from '../../typography'\nimport { withTheme } from '../../theme'\nimport { majorScale } from '../../scales'\nimport safeInvoke from '../../lib/safe-invoke'\nimport Tag from './Tag'\n\nlet inputId = 1\n\nconst GET_KEY_FOR_TAG_DELIMITER = {\n  enter: 'Enter',\n  space: ' '\n}\n\nclass TagInput extends React.Component {\n  static propTypes = {\n    /** Whether or not the inputValue should be added to the tags when the input blurs. */\n    addOnBlur: PropTypes.bool,\n    /** The class name to apply to the container component. */\n    className: PropTypes.string,\n    /** Whether or not the input should be disabled. */\n    disabled: PropTypes.bool,\n    /** The vertical size of the input */\n    height: PropTypes.number,\n    /** Props to pass to the input component. Note that `ref` and `key` are not supported. See `inputRef`. */\n    inputProps: PropTypes.object,\n    /**\n     * Ref handler for the input element.\n     * (input: HTMLInputElement | null) => void\n     */\n    inputRef: PropTypes.func,\n    /**\n     * Callback invoked when new tags are added.\n     * Returning `false` will prevent clearing the input.\n     * (values: Array) => void | false\n     */\n    onAdd: PropTypes.func,\n    /**\n     * Callback invoked when focus on the input blurs.\n     * (event) => void\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback invoked when the tag values change.\n     * Returning `false` will prevent clearing the input.\n     * (values: Array) => void | false\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback invoked when the input receives focus.\n     * (event) => void\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback invoked when the value of the input is changed. Shorthand for `inputProps={{ onChange }}`.\n     * (event) => void\n     */\n    onInputChange: PropTypes.func,\n    /**\n     * Callback invoked when a tag is removed.\n     * Receives value and index of removed tag.\n     * (value: string | node, index: number) => void\n     */\n    onRemove: PropTypes.func,\n    /** Value or RegExp to split on pasted text or on enter keypress */\n    separator: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.instanceOf(RegExp),\n      PropTypes.oneOf([false])\n    ]),\n    /** Provide props to tag component (actually `Badge`, for now). */\n    tagProps: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    /** Key to press in order to submit a new tag while typing.  */\n    tagSubmitKey: PropTypes.oneOf(['enter', 'space']),\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n    /** Controlled tag values. Each value is rendered inside a tag. */\n    values: PropTypes.arrayOf(PropTypes.node)\n  }\n\n  static defaultProps = {\n    addOnBlur: false,\n    disabled: false,\n    height: 32,\n    separator: /[,\\n\\r]/,\n    values: [],\n    tagSubmitKey: 'enter',\n    tagProps: {}\n  }\n\n  state = {\n    inputValue: '',\n    isFocused: false\n  }\n\n  id = `TagInput-${inputId++}`\n\n  addTags = (value = '') => {\n    const { onAdd, onChange, values } = this.props\n    const newValues = this.getValues(value)\n    let shouldClearInput = safeInvoke(onAdd, newValues)\n\n    if (typeof onChange === 'function') {\n      shouldClearInput = shouldClearInput || onChange(values.concat(newValues))\n    }\n\n    if (shouldClearInput !== false) {\n      this.setState({ inputValue: '' })\n    }\n  }\n\n  getValues = (inputValue = '') => {\n    const { separator } = this.props\n\n    return separator\n      ? inputValue\n          .split(separator)\n          .map(v => v.trim())\n          .filter(v => v.length > 0)\n      : [inputValue]\n  }\n\n  handleBackspaceToRemove = () => {\n    const { values } = this.props\n\n    // Delete last item in values\n    this.removeTagAtIndex(values.length - 1)\n  }\n\n  handleBlur = event => {\n    const container = event.target\n\n    // Use raf so that the dom has time to update `activeElement`\n    requestAnimationFrame(() => {\n      if (!container.contains(document.activeElement)) {\n        if (this.props.addOnBlur && this.state.inputValue) {\n          this.addTags(this.state.inputValue)\n        }\n\n        this.setState({ isFocused: false })\n      }\n    })\n\n    safeInvoke(this.props.onBlur, event)\n  }\n\n  handleInputChange = event => {\n    this.setState({ inputValue: event.target.value })\n    safeInvoke(this.props.onInputChange, event)\n  }\n\n  handleInputFocus = event => {\n    this.setState({ isFocused: true })\n    safeInvoke(this.props.onFocus, event)\n  }\n\n  handleKeyDown = event => {\n    const { selectionEnd, value } = event.target\n\n    const key = GET_KEY_FOR_TAG_DELIMITER[this.props.tagSubmitKey]\n\n    if (event.key === key) {\n      // Prevent Enter keypresses from submitting forms since they have special powers inside TagInput\n      event.preventDefault()\n      this.addTags(value)\n    } else if (event.key === 'Backspace' && selectionEnd === 0) {\n      this.handleBackspaceToRemove(event)\n    }\n  }\n\n  handleRemoveTag = event => {\n    // Using data attribute to simplify callback logic -- one handler for all children\n    const index = Number(\n      event.currentTarget.parentElement.getAttribute('data-tag-index')\n    )\n    this.removeTagAtIndex(index)\n  }\n\n  maybeRenderTag = (tag, index) => {\n    if (!tag) {\n      return null\n    }\n\n    const { disabled, tagProps } = this.props\n    const props = safeInvoke(tagProps, tag, index) || tagProps\n\n    return (\n      <Tag\n        key={`${tag}:${index}`}\n        data-tag-index={index}\n        marginRight={majorScale(1)}\n        marginY=\"6px\"\n        onRemove={disabled ? null : this.handleRemoveTag}\n        isRemovable={!disabled}\n        {...props}\n      >\n        {tag}\n      </Tag>\n    )\n  }\n\n  removeTagAtIndex = index => {\n    const { onChange, onRemove, values } = this.props\n    safeInvoke(onRemove, values[index], index)\n\n    // Remove item at index as a new array\n    const newValues = values.filter((_, i) => i !== index)\n    safeInvoke(onChange, newValues)\n  }\n\n  setRef = node => {\n    this.input = node\n    safeInvoke(this.props.inputRef, node)\n  }\n\n  render() {\n    const {\n      addOnBlur,\n      className,\n      disabled,\n      height,\n      inputProps,\n      inputRef,\n      onAdd,\n      onChange,\n      onInputChange,\n      onRemove,\n      separator,\n      tagProps,\n      theme,\n      values,\n      ...props\n    } = this.props\n\n    const { inputValue, isFocused } = this.state\n\n    const themedContainerClassName = theme.getTagInputClassName('default')\n    const themedInputClassName = theme.getTextInputClassName('none')\n    const textSize = theme.getTextSizeForControlHeight(height)\n    const borderRadius = theme.getBorderRadiusForControlHeight(height)\n\n    return (\n      <Box\n        aria-disabled={disabled || undefined}\n        aria-activedescendant={isFocused ? this.id : undefined}\n        borderRadius={borderRadius}\n        className={cx(themedContainerClassName, className)}\n        paddingLeft={Math.round(height / 3.2)}\n        paddingRight={Math.round(height / 3.2)}\n        paddingY=\"2px\"\n        {...props}\n        onBlur={this.handleBlur}\n      >\n        {values.map(this.maybeRenderTag)}\n        <Text\n          is=\"input\"\n          id={this.id}\n          color={disabled ? 'muted' : undefined}\n          disabled={disabled}\n          flexGrow=\"1\"\n          height={height - 4}\n          size={textSize}\n          type=\"text\"\n          value={inputValue}\n          {...inputProps}\n          className={themedInputClassName}\n          ref={this.setRef}\n          onChange={this.handleInputChange}\n          onFocus={this.handleInputFocus}\n          onKeyDown={this.handleKeyDown}\n        />\n      </Box>\n    )\n  }\n}\n\nexport default withTheme(TagInput)\n"]},"metadata":{},"sourceType":"module"}