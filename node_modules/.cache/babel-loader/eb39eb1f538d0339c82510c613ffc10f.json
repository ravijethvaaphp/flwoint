{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Text } from '../../typography';\nimport { withTheme } from '../../theme';\n\nvar TextInput = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TextInput, _PureComponent);\n\n  function TextInput() {\n    _classCallCheck(this, TextInput);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextInput).apply(this, arguments));\n  }\n\n  _createClass(TextInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          className = _this$props.className,\n          width = _this$props.width,\n          height = _this$props.height,\n          disabled = _this$props.disabled,\n          required = _this$props.required,\n          isInvalid = _this$props.isInvalid,\n          appearance = _this$props.appearance,\n          placeholder = _this$props.placeholder,\n          spellCheck = _this$props.spellCheck,\n          props = _objectWithoutProperties(_this$props, [\"theme\", \"className\", \"width\", \"height\", \"disabled\", \"required\", \"isInvalid\", \"appearance\", \"placeholder\", \"spellCheck\"]);\n\n      var themedClassName = theme.getTextInputClassName(appearance);\n      var textSize = theme.getTextSizeForControlHeight(height);\n      var borderRadius = theme.getBorderRadiusForControlHeight(height);\n      return React.createElement(Text, _extends({\n        is: \"input\",\n        className: cx(themedClassName, className),\n        type: \"text\",\n        size: textSize,\n        width: width,\n        height: height,\n        required: required,\n        disabled: disabled,\n        placeholder: placeholder,\n        paddingLeft: Math.round(height / 3.2),\n        paddingRight: Math.round(height / 3.2),\n        borderRadius: borderRadius,\n        spellCheck: spellCheck,\n        \"aria-invalid\": isInvalid\n      }, disabled ? {\n        color: 'muted'\n      } : {}, props));\n    }\n  }]);\n\n  return TextInput;\n}(PureComponent);\n\nTextInput.displayName = \"TextInput\";\n\n_defineProperty(TextInput, \"propTypes\", _objectSpread({}, Text.propTypes, {\n  /**\n   * Makes the input element required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Sets visual styling of _only_ the text input to be \"invalid\".\n   * Note that this does not effect any `validationMessage`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Use the native spell check functionality of the browser.\n   */\n  spellCheck: PropTypes.bool,\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The appearance of the TextInput.\n   */\n  appearance: PropTypes.string,\n\n  /**\n   * The width of the TextInput.\n   */\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Theme provided by ThemeProvider.\n   */\n  theme: PropTypes.object.isRequired,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}));\n\n_defineProperty(TextInput, \"defaultProps\", {\n  appearance: 'default',\n  height: 32,\n  width: 280,\n  disabled: false,\n  isInvalid: false,\n  spellCheck: true\n});\n\nexport default withTheme(TextInput);","map":{"version":3,"sources":["../../../src/text-input/src/TextInput.js"],"names":["TextInput","PureComponent","Text","propTypes","required","PropTypes","bool","disabled","isInvalid","spellCheck","placeholder","string","appearance","width","theme","isRequired","className","height","props","themedClassName","textSize","borderRadius","cx","Math","color","withTheme"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { Text } from '../../typography'\nimport { withTheme } from '../../theme'\n\nclass TextInput extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the Text component as the base.\n     */\n    ...Text.propTypes,\n\n    /**\n     * Makes the input element required.\n     */\n    required: PropTypes.bool,\n\n    /**\n     * Makes the input element disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Sets visual styling of _only_ the text input to be \"invalid\".\n     * Note that this does not effect any `validationMessage`.\n     */\n    isInvalid: PropTypes.bool,\n\n    /**\n     * Use the native spell check functionality of the browser.\n     */\n    spellCheck: PropTypes.bool,\n\n    /**\n     * The placeholder text when there is no value present.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * The appearance of the TextInput.\n     */\n    appearance: PropTypes.string,\n\n    /**\n     * The width of the TextInput.\n     */\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n    /**\n     * Theme provided by ThemeProvider.\n     */\n    theme: PropTypes.object.isRequired,\n\n    /**\n     * Class name passed to the button.\n     * Only use if you know what you are doing.\n     */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    appearance: 'default',\n    height: 32,\n    width: 280,\n    disabled: false,\n    isInvalid: false,\n    spellCheck: true\n  }\n\n  render() {\n    const {\n      theme,\n      className,\n\n      width,\n      height,\n      disabled,\n      required,\n      isInvalid,\n      appearance,\n      placeholder,\n      spellCheck,\n      ...props\n    } = this.props\n    const themedClassName = theme.getTextInputClassName(appearance)\n    const textSize = theme.getTextSizeForControlHeight(height)\n    const borderRadius = theme.getBorderRadiusForControlHeight(height)\n\n    return (\n      <Text\n        is=\"input\"\n        className={cx(themedClassName, className)}\n        type=\"text\"\n        size={textSize}\n        width={width}\n        height={height}\n        required={required}\n        disabled={disabled}\n        placeholder={placeholder}\n        paddingLeft={Math.round(height / 3.2)}\n        paddingRight={Math.round(height / 3.2)}\n        borderRadius={borderRadius}\n        spellCheck={spellCheck}\n        aria-invalid={isInvalid}\n        {...(disabled ? { color: 'muted' } : {})}\n        {...props}\n      />\n    )\n  }\n}\n\nexport default withTheme(TextInput)\n"]},"metadata":{},"sourceType":"module"}