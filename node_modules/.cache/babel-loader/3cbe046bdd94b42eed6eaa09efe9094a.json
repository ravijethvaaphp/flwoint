{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { splitBoxProps } from 'ui-box';\nimport { FormField } from '../../form-field';\nimport TextInput from './TextInput';\nvar idCounter = 0;\n\nvar TextInputField = /*#__PURE__*/function (_PureComponent) {\n  _inherits(TextInputField, _PureComponent);\n\n  function TextInputField() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextInputField);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextInputField)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      id: (_this.props.id || idCounter++).toString()\n    });\n\n    return _this;\n  }\n\n  _createClass(TextInputField, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          unusedId = _this$props.id,\n          hint = _this$props.hint,\n          label = _this$props.label,\n          description = _this$props.description,\n          validationMessage = _this$props.validationMessage,\n          inputHeight = _this$props.inputHeight,\n          inputWidth = _this$props.inputWidth,\n          disabled = _this$props.disabled,\n          required = _this$props.required,\n          isInvalid = _this$props.isInvalid,\n          appearance = _this$props.appearance,\n          placeholder = _this$props.placeholder,\n          spellCheck = _this$props.spellCheck,\n          props = _objectWithoutProperties(_this$props, [\"id\", \"hint\", \"label\", \"description\", \"validationMessage\", \"inputHeight\", \"inputWidth\", \"disabled\", \"required\", \"isInvalid\", \"appearance\", \"placeholder\", \"spellCheck\"]);\n\n      var id = \"TextInputField-\".concat(this.state.id);\n      /**\n       * Split the wrapper props from the input props.\n       */\n\n      var _splitBoxProps = splitBoxProps(props),\n          matchedProps = _splitBoxProps.matchedProps,\n          remainingProps = _splitBoxProps.remainingProps;\n\n      return React.createElement(FormField, _extends({\n        marginBottom: 24,\n        label: label,\n        isRequired: required,\n        hint: hint,\n        description: description,\n        validationMessage: validationMessage,\n        labelFor: id\n      }, matchedProps), React.createElement(TextInput, _extends({\n        id: id,\n        width: inputWidth,\n        height: inputHeight,\n        disabled: disabled,\n        required: required,\n        isInvalid: isInvalid,\n        appearance: appearance,\n        placeholder: placeholder,\n        spellCheck: spellCheck\n      }, remainingProps)));\n    }\n  }]);\n\n  return TextInputField;\n}(PureComponent);\n\nTextInputField.displayName = \"TextInputField\";\n\n_defineProperty(TextInputField, \"propTypes\", _objectSpread({}, TextInput.propTypes, {}, FormField.propTypes, {\n  /**\n   * The label used above the input element.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Whether or not to show an asterix after the label.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * An optional description of the field under the label, above the input element.\n   */\n  description: PropTypes.node,\n\n  /**\n   * An optional hint under the input element.\n   */\n  hint: PropTypes.node,\n\n  /**\n   * If a validation message is passed it is shown under the input element\n   * and above the hint. This is unaffected by `isInvalid`.\n   */\n  validationMessage: PropTypes.node,\n\n  /**\n   * The height of the input element.\n   */\n  inputHeight: PropTypes.number,\n\n  /**\n   * The width of the input width.\n   */\n  inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n}));\n\n_defineProperty(TextInputField, \"defaultProps\", {\n  /**\n   * The input width should be as wide as the form field.\n   */\n  inputWidth: '100%',\n  inputHeight: 32\n});\n\nexport { TextInputField as default };","map":{"version":3,"sources":["../../../src/text-input/src/TextInputField.js"],"names":["idCounter","TextInputField","PureComponent","TextInput","propTypes","FormField","label","PropTypes","isRequired","required","bool","description","node","hint","validationMessage","inputHeight","number","inputWidth","id","unusedId","disabled","isInvalid","appearance","placeholder","spellCheck","props","matchedProps","remainingProps","splitBoxProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { splitBoxProps } from 'ui-box'\nimport { FormField } from '../../form-field'\nimport TextInput from './TextInput'\n\nlet idCounter = 0\n\nexport default class TextInputField extends PureComponent {\n  static propTypes = {\n    /**\n     * Composes the TextInput component as the base.\n     */\n    ...TextInput.propTypes,\n    ...FormField.propTypes,\n\n    /**\n     * The label used above the input element.\n     */\n    label: PropTypes.node.isRequired,\n\n    /**\n     * Whether or not to show an asterix after the label.\n     */\n    required: PropTypes.bool,\n\n    /**\n     * An optional description of the field under the label, above the input element.\n     */\n    description: PropTypes.node,\n\n    /**\n     * An optional hint under the input element.\n     */\n    hint: PropTypes.node,\n\n    /**\n     * If a validation message is passed it is shown under the input element\n     * and above the hint. This is unaffected by `isInvalid`.\n     */\n    validationMessage: PropTypes.node,\n\n    /**\n     * The height of the input element.\n     */\n    inputHeight: PropTypes.number,\n\n    /**\n     * The width of the input width.\n     */\n    inputWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  }\n\n  static defaultProps = {\n    /**\n     * The input width should be as wide as the form field.\n     */\n    inputWidth: '100%',\n    inputHeight: 32\n  }\n\n  state = {\n    id: (this.props.id || idCounter++).toString()\n  }\n\n  render() {\n    const {\n      // We are using the id from the state\n      id: unusedId,\n\n      // FormField props\n      hint,\n      label,\n      description,\n      validationMessage,\n\n      // TextInput props\n      inputHeight,\n      inputWidth,\n      disabled,\n      required,\n      isInvalid,\n      appearance,\n      placeholder,\n      spellCheck,\n\n      // Rest props are spread on the FormField\n      ...props\n    } = this.props\n\n    const id = `TextInputField-${this.state.id}`\n\n    /**\n     * Split the wrapper props from the input props.\n     */\n    const { matchedProps, remainingProps } = splitBoxProps(props)\n\n    return (\n      <FormField\n        marginBottom={24}\n        label={label}\n        isRequired={required}\n        hint={hint}\n        description={description}\n        validationMessage={validationMessage}\n        labelFor={id}\n        {...matchedProps}\n      >\n        <TextInput\n          id={id}\n          width={inputWidth}\n          height={inputHeight}\n          disabled={disabled}\n          required={required}\n          isInvalid={isInvalid}\n          appearance={appearance}\n          placeholder={placeholder}\n          spellCheck={spellCheck}\n          {...remainingProps}\n        />\n      </FormField>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}