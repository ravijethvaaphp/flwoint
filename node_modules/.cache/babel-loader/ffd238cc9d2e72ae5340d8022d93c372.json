{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Box, { dimensions, spacing, position, layout } from 'ui-box';\nimport { Autocomplete } from '../../autocomplete';\nimport { TextInput } from '../../text-input';\nimport { IconButton } from '../../buttons';\nimport deprecated from '../../lib/deprecated';\nimport { CaretDownIcon } from '../../icons';\n\nvar Combobox = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Combobox, _PureComponent);\n\n  function Combobox(props, context) {\n    var _this;\n\n    _classCallCheck(this, Combobox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Combobox).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStateChange\", function (changes) {\n      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n        if (!changes.isOpen) {\n          _this.setState({\n            isOpenedByButton: false\n          });\n        }\n      }\n    });\n\n    _this.state = {\n      isOpenedByButton: false\n    };\n    return _this;\n  }\n\n  _createClass(Combobox, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          items = _this$props.items,\n          selectedItem = _this$props.selectedItem,\n          defaultSelectedItem = _this$props.defaultSelectedItem,\n          initialSelectedItem = _this$props.initialSelectedItem,\n          itemToString = _this$props.itemToString,\n          width = _this$props.width,\n          height = _this$props.height,\n          onChange = _this$props.onChange,\n          placeholder = _this$props.placeholder,\n          inputProps = _this$props.inputProps,\n          buttonProps = _this$props.buttonProps,\n          openOnFocus = _this$props.openOnFocus,\n          autocompleteProps = _this$props.autocompleteProps,\n          isLoading = _this$props.isLoading,\n          props = _objectWithoutProperties(_this$props, [\"items\", \"selectedItem\", \"defaultSelectedItem\", \"initialSelectedItem\", \"itemToString\", \"width\", \"height\", \"onChange\", \"placeholder\", \"inputProps\", \"buttonProps\", \"openOnFocus\", \"autocompleteProps\", \"isLoading\"]);\n\n      var disabled = props.disabled || isLoading;\n      return React.createElement(Autocomplete, _extends({\n        items: items,\n        selectedItem: selectedItem,\n        initialSelectedItem: initialSelectedItem || defaultSelectedItem,\n        itemToString: itemToString,\n        onChange: onChange,\n        onStateChange: this.handleStateChange,\n        isFilterDisabled: this.state.isOpenedByButton\n      }, autocompleteProps), function (_ref) {\n        var getRef = _ref.getRef,\n            isShown = _ref.isShown,\n            openMenu = _ref.openMenu,\n            inputValue = _ref.inputValue,\n            getInputProps = _ref.getInputProps,\n            getToggleButtonProps = _ref.getToggleButtonProps,\n            clearSelection = _ref.clearSelection;\n        return React.createElement(Box, _extends({\n          innerRef: function innerRef(ref) {\n            return getRef(ref);\n          },\n          display: \"inline-flex\",\n          width: width\n        }, props), React.createElement(TextInput, _extends({\n          width: 0,\n          flex: 1,\n          height: height,\n          value: inputValue,\n          borderTopRightRadius: 0,\n          borderBottomRightRadius: 0,\n          disabled: disabled\n        }, getInputProps(_objectSpread({}, inputProps, {\n          placeholder: placeholder,\n          onFocus: function onFocus() {\n            if (openOnFocus) openMenu();\n          },\n          onChange: function onChange(e) {\n            if (_this2.state.isOpenedByButton) {\n              _this2.setState({\n                isOpenedByButton: false\n              });\n            }\n\n            if (e.target.value.trim() === '') {\n              // Prevent the selected item from sticking around\n              clearSelection();\n            }\n          }\n        })))), React.createElement(IconButton, _extends({\n          color: \"muted\",\n          icon: isLoading ? null : CaretDownIcon,\n          appearance: \"default\",\n          height: height,\n          marginLeft: -1,\n          paddingLeft: isLoading ? 12 : 0,\n          paddingRight: 0,\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0,\n          disabled: disabled,\n          isLoading: isLoading\n        }, getToggleButtonProps(_objectSpread({}, buttonProps, {\n          onClick: function onClick() {\n            if (!isShown) {\n              _this2.setState({\n                isOpenedByButton: true\n              });\n            }\n          }\n        })))));\n      });\n    }\n  }]);\n\n  return Combobox;\n}(PureComponent);\n\nCombobox.displayName = \"Combobox\";\n\n_defineProperty(Combobox, \"propTypes\", _objectSpread({}, dimensions.propTypes, {}, spacing.propTypes, {}, position.propTypes, {}, layout.propTypes, {\n  /**\n   * The options to show in the menu.\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * The selected item when controlled.\n   */\n  selectedItem: PropTypes.any,\n\n  /**\n   * Function called when value changes.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * When true, open the autocomplete on focus.\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Default selected item when uncontrolled.\n   */\n  initialSelectedItem: PropTypes.any,\n\n  /**\n   * Default selected item when uncontrolled (deprecated)\n   */\n  defaultSelectedItem: deprecated(PropTypes.any, 'Use \"initialSelectedItem\" instead.'),\n\n  /**\n   * The placeholder text when there is no value present.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * In case the array of items is not an array of strings,\n   * this function is used on each item to return the string that will be shown on the filter\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * Properties forwarded to the input. Use with caution.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the button. Use with caution.\n   */\n  buttonProps: PropTypes.object,\n\n  /**\n   * Properties forwarded to the autocomplete component. Use with caution.\n   */\n  autocompleteProps: PropTypes.object,\n\n  /**\n   * Makes the input element disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * When true, show a loading spinner. This also disables the button.\n   */\n  isLoading: PropTypes.bool\n}));\n\n_defineProperty(Combobox, \"defaultProps\", {\n  width: 240,\n  openOnFocus: false,\n  disabled: false,\n  isLoading: false\n});\n\nexport { Combobox as default };","map":{"version":3,"sources":["../../../src/combobox/src/Combobox.js"],"names":["Combobox","PureComponent","dimensions","propTypes","spacing","position","layout","items","PropTypes","isRequired","selectedItem","any","onChange","func","openOnFocus","bool","initialSelectedItem","defaultSelectedItem","deprecated","placeholder","string","itemToString","inputProps","object","buttonProps","autocompleteProps","disabled","isLoading","width","isOpenedByButton","Object","changes","height","props","getRef","isShown","openMenu","inputValue","getInputProps","getToggleButtonProps","clearSelection","onFocus","e","onClick"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport Box, { dimensions, spacing, position, layout } from 'ui-box'\nimport { Autocomplete } from '../../autocomplete'\nimport { TextInput } from '../../text-input'\nimport { IconButton } from '../../buttons'\nimport deprecated from '../../lib/deprecated'\nimport { CaretDownIcon } from '../../icons'\n\nexport default class Combobox extends PureComponent {\n  static propTypes = {\n    /**\n     * Implements some APIs from ui-box.\n     */\n    ...dimensions.propTypes,\n    ...spacing.propTypes,\n    ...position.propTypes,\n    ...layout.propTypes,\n\n    /**\n     * The options to show in the menu.\n     */\n    items: PropTypes.array.isRequired,\n\n    /**\n     * The selected item when controlled.\n     */\n    selectedItem: PropTypes.any,\n\n    /**\n     * Function called when value changes.\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * When true, open the autocomplete on focus.\n     */\n    openOnFocus: PropTypes.bool,\n\n    /**\n     * Default selected item when uncontrolled.\n     */\n    initialSelectedItem: PropTypes.any,\n\n    /**\n     * Default selected item when uncontrolled (deprecated)\n     */\n    defaultSelectedItem: deprecated(\n      PropTypes.any,\n      'Use \"initialSelectedItem\" instead.'\n    ),\n\n    /**\n     * The placeholder text when there is no value present.\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * In case the array of items is not an array of strings,\n     * this function is used on each item to return the string that will be shown on the filter\n     */\n    itemToString: PropTypes.func,\n\n    /**\n     * Properties forwarded to the input. Use with caution.\n     */\n    inputProps: PropTypes.object,\n\n    /**\n     * Properties forwarded to the button. Use with caution.\n     */\n    buttonProps: PropTypes.object,\n\n    /**\n     * Properties forwarded to the autocomplete component. Use with caution.\n     */\n    autocompleteProps: PropTypes.object,\n\n    /**\n     * Makes the input element disabled.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * When true, show a loading spinner. This also disables the button.\n     */\n    isLoading: PropTypes.bool\n  }\n\n  static defaultProps = {\n    width: 240,\n    openOnFocus: false,\n    disabled: false,\n    isLoading: false\n  }\n\n  constructor(props, context) {\n    super(props, context)\n    this.state = {\n      isOpenedByButton: false\n    }\n  }\n\n  handleStateChange = changes => {\n    if (Object.prototype.hasOwnProperty.call(changes, 'isOpen')) {\n      if (!changes.isOpen) {\n        this.setState({ isOpenedByButton: false })\n      }\n    }\n  }\n\n  render() {\n    const {\n      items,\n      selectedItem,\n      defaultSelectedItem, // Deprecated\n      initialSelectedItem,\n      itemToString,\n      width,\n      height,\n      onChange,\n      placeholder,\n      inputProps,\n      buttonProps,\n      openOnFocus,\n      autocompleteProps,\n      isLoading,\n      ...props\n    } = this.props\n\n    const disabled = props.disabled || isLoading\n\n    return (\n      <Autocomplete\n        items={items}\n        selectedItem={selectedItem}\n        initialSelectedItem={initialSelectedItem || defaultSelectedItem}\n        itemToString={itemToString}\n        onChange={onChange}\n        onStateChange={this.handleStateChange}\n        isFilterDisabled={this.state.isOpenedByButton}\n        {...autocompleteProps}\n      >\n        {({\n          getRef,\n          isShown,\n          openMenu,\n          inputValue,\n          getInputProps,\n          getToggleButtonProps,\n          clearSelection\n        }) => (\n          <Box\n            innerRef={ref => getRef(ref)}\n            display=\"inline-flex\"\n            width={width}\n            {...props}\n          >\n            <TextInput\n              width={0}\n              flex={1}\n              height={height}\n              value={inputValue}\n              borderTopRightRadius={0}\n              borderBottomRightRadius={0}\n              disabled={disabled}\n              {...getInputProps({\n                ...inputProps,\n                placeholder,\n                onFocus: () => {\n                  if (openOnFocus) openMenu()\n                },\n                onChange: e => {\n                  if (this.state.isOpenedByButton) {\n                    this.setState({\n                      isOpenedByButton: false\n                    })\n                  }\n\n                  if (e.target.value.trim() === '') {\n                    // Prevent the selected item from sticking around\n                    clearSelection()\n                  }\n                }\n              })}\n            />\n            <IconButton\n              color=\"muted\"\n              icon={isLoading ? null : CaretDownIcon}\n              appearance=\"default\"\n              height={height}\n              marginLeft={-1}\n              paddingLeft={isLoading ? 12 : 0}\n              paddingRight={0}\n              borderTopLeftRadius={0}\n              borderBottomLeftRadius={0}\n              disabled={disabled}\n              isLoading={isLoading}\n              {...getToggleButtonProps({\n                ...buttonProps,\n                onClick: () => {\n                  if (!isShown) {\n                    this.setState({ isOpenedByButton: true })\n                  }\n                }\n              })}\n            />\n          </Box>\n        )}\n      </Autocomplete>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}