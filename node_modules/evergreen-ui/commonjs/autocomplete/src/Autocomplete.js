"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fuzzaldrinPlus = _interopRequireDefault(require("fuzzaldrin-plus"));

var _downshift = _interopRequireDefault(require("downshift"));

var _reactTinyVirtualList = _interopRequireDefault(require("react-tiny-virtual-list"));

var _popover = require("../../popover");

var _constants = require("../../constants");

var _typography = require("../../typography");

var _layers = require("../../layers");

var _deprecated = _interopRequireDefault(require("../../lib/deprecated"));

var _AutocompleteItem = _interopRequireDefault(require("./AutocompleteItem"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var fuzzyFilter = function fuzzyFilter(itemToString) {
  if (itemToString) {
    return function (items, input) {
      var wrappedItems = items.map(function (item) {
        return {
          key: itemToString(item),
          item: item
        };
      });
      return _fuzzaldrinPlus["default"].filter(wrappedItems, input, {
        key: 'key'
      }).map(function (_ref) {
        var item = _ref.item;
        return item;
      });
    };
  }

  return function (items, input) {
    return _fuzzaldrinPlus["default"].filter(items, input);
  };
};

var noop = function noop() {};

var autocompleteItemRenderer = function autocompleteItemRenderer(props) {
  return _react["default"].createElement(_AutocompleteItem["default"], props);
};

autocompleteItemRenderer.displayName = "autocompleteItemRenderer";

// https://github.com/paypal/downshift/issues/164
var Autocomplete =
/*#__PURE__*/
function (_PureComponent) {
  (0, _inherits2["default"])(Autocomplete, _PureComponent);

  function Autocomplete() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, Autocomplete);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(Autocomplete)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      targetWidth: 0
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "stateReducer", function (state, changes) {
      var items = _this.props.items;

      if (Object.prototype.hasOwnProperty.call(changes, 'isOpen') && changes.isOpen) {
        return _objectSpread({}, changes, {
          highlightedIndex: items.indexOf(state.selectedItem)
        });
      }

      return changes;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderResults", function (_ref2) {
      var width = _ref2.width,
          inputValue = _ref2.inputValue,
          highlightedIndex = _ref2.highlightedIndex,
          selectedItem = _ref2.selectedItem,
          getItemProps = _ref2.getItemProps,
          getMenuProps = _ref2.getMenuProps;
      var _this$props = _this.props,
          title = _this$props.title,
          itemSize = _this$props.itemSize,
          itemsFilter = _this$props.itemsFilter,
          originalItems = _this$props.items,
          itemToString = _this$props.itemToString,
          _renderItem = _this$props.renderItem,
          popoverMaxHeight = _this$props.popoverMaxHeight,
          isFilterDisabled = _this$props.isFilterDisabled;
      var filter = itemsFilter || fuzzyFilter(itemToString);
      var items = isFilterDisabled || inputValue.trim() === '' ? originalItems : filter(originalItems, inputValue);
      if (items.length === 0) return null; // Pass the actual DOM ref to downshift, this fixes touch support

      var menuProps = getMenuProps();
      menuProps.innerRef = menuProps.ref;
      delete menuProps.ref;
      return _react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
        width: width
      }, menuProps), title && _react["default"].createElement(_layers.Pane, {
        padding: 8,
        borderBottom: "muted"
      }, _react["default"].createElement(_typography.Heading, {
        size: 100
      }, title)), items.length > 0 && _react["default"].createElement(_reactTinyVirtualList["default"], {
        width: "100%",
        height: Math.min(items.length * itemSize, popoverMaxHeight),
        itemSize: itemSize,
        itemCount: items.length,
        scrollToIndex: highlightedIndex || 0,
        overscanCount: 3,
        scrollToAlignment: "auto",
        renderItem: function renderItem(_ref3) {
          var index = _ref3.index,
              style = _ref3.style;
          var item = items[index];
          var itemString = itemToString(item);
          return _renderItem(getItemProps({
            item: item,
            key: itemString,
            index: index,
            style: style,
            children: itemString,
            isSelected: itemToString(selectedItem) === itemString,
            isHighlighted: highlightedIndex === index
          }));
        }
      }));
    });
    return _this;
  }

  (0, _createClass2["default"])(Autocomplete, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        targetWidth: this.targetRef.getBoundingClientRect().width
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          itemSize = _this$props2.itemSize,
          position = _this$props2.position,
          renderItem = _this$props2.renderItem,
          itemsFilter = _this$props2.itemsFilter,
          popoverMaxHeight = _this$props2.popoverMaxHeight,
          popoverMinWidth = _this$props2.popoverMinWidth,
          defaultSelectedItem = _this$props2.defaultSelectedItem,
          initialSelectedItem = _this$props2.initialSelectedItem,
          defaultInputValue = _this$props2.defaultInputValue,
          initialInputValue = _this$props2.initialInputValue,
          getButtonProps = _this$props2.getButtonProps,
          getToggleButtonProps = _this$props2.getToggleButtonProps,
          props = (0, _objectWithoutProperties2["default"])(_this$props2, ["children", "itemSize", "position", "renderItem", "itemsFilter", "popoverMaxHeight", "popoverMinWidth", "defaultSelectedItem", "initialSelectedItem", "defaultInputValue", "initialInputValue", "getButtonProps", "getToggleButtonProps"]);
      return _react["default"].createElement(_downshift["default"], (0, _extends2["default"])({
        initialSelectedItem: initialSelectedItem || defaultSelectedItem,
        initialInputValue: initialInputValue || defaultInputValue,
        getToggleButtonProps: getToggleButtonProps || getButtonProps,
        stateReducer: this.stateReducer,
        scrollIntoView: noop
      }, props), function (_ref4) {
        var isShown = _ref4.isOpen,
            inputValue = _ref4.inputValue,
            getItemProps = _ref4.getItemProps,
            getMenuProps = _ref4.getMenuProps,
            selectedItem = _ref4.selectedItem,
            highlightedIndex = _ref4.highlightedIndex,
            getRootProps = _ref4.getRootProps,
            restDownshiftProps = (0, _objectWithoutProperties2["default"])(_ref4, ["isOpen", "inputValue", "getItemProps", "getMenuProps", "selectedItem", "highlightedIndex", "getRootProps"]);
        return _react["default"].createElement(_layers.Pane, (0, _extends2["default"])({
          width: "100%"
        }, getRootProps({
          refKey: 'innerRef'
        })), _react["default"].createElement(_popover.Popover, {
          bringFocusInside: false,
          isShown: isShown,
          minWidth: popoverMinWidth,
          position: position || (_this2.state.targetWidth < popoverMinWidth ? _constants.Position.BOTTOM_LEFT : _constants.Position.BOTTOM),
          content: function content() {
            return _this2.renderResults({
              width: Math.max(_this2.state.targetWidth, popoverMinWidth),
              inputValue: inputValue,
              getItemProps: getItemProps,
              getMenuProps: getMenuProps,
              selectedItem: selectedItem,
              highlightedIndex: highlightedIndex
            });
          },
          minHeight: 0,
          animationDuration: 0
        }, function (_ref5) {
          var isShownPopover = _ref5.isShown,
              toggle = _ref5.toggle,
              _getRef = _ref5.getRef;
          return children(_objectSpread({
            isShown: isShownPopover,
            toggle: toggle,
            getRef: function getRef(ref) {
              // Use the ref internally to determine the width
              _this2.targetRef = ref;

              _getRef(ref);
            },
            inputValue: inputValue,
            selectedItem: selectedItem,
            highlightedIndex: highlightedIndex
          }, restDownshiftProps));
        }));
      });
    }
  }]);
  return Autocomplete;
}(_react.PureComponent);

exports["default"] = Autocomplete;
Autocomplete.displayName = "Autocomplete";
(0, _defineProperty2["default"])(Autocomplete, "propTypes", _objectSpread({
  /**
   * This prop can be either a string or a Node.
   * It will provide a title for the items
   */
  title: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /**
   * An array of items to be used as options for the select
   */
  items: _propTypes["default"].array.isRequired,

  /**
   * The selected Item to be shown on the autocomplete
   */
  selectedItem: _propTypes["default"].any,

  /**
   * The selected item to be selected & shown by default on the autocomplete (deprecated)
   */
  defaultSelectedItem: (0, _deprecated["default"])(_propTypes["default"].any, 'Use "initialSelectedItem" instead.'),

  /**
   * The selected item to be selected & shown by default on the autocomplete (deprecated)
   */
  defaultInputValue: (0, _deprecated["default"])(_propTypes["default"].any, 'Use "initialInputValue" instead.'),

  /**
   * In case the array of items is not an array of strings,
   * this function is used on each item to return the string that will be shown on the filter
   */
  itemToString: _propTypes["default"].func.isRequired,

  /**
   * Function that will render the 'filter' component.
   */
  children: _propTypes["default"].func.isRequired,

  /**
   * The height of each item in the list
   * Because the list is virtualized this is required beforehand.
   */
  itemSize: _propTypes["default"].number,

  /**
   * Function that returns a component to render the item
   */
  renderItem: _propTypes["default"].func,

  /**
   * The position of the Popover the Autocomplete is rendered in.
   */
  position: _propTypes["default"].oneOf([_constants.Position.TOP, _constants.Position.TOP_LEFT, _constants.Position.TOP_RIGHT, _constants.Position.BOTTOM, _constants.Position.BOTTOM_LEFT, _constants.Position.BOTTOM_RIGHT, _constants.Position.LEFT, _constants.Position.RIGHT]),

  /**
   * A function that is used to filter the items.
   * It should return a subset of the initial items.
   * By default the "fuzzaldrin-plus" package is used.
   */
  itemsFilter: _propTypes["default"].func,

  /**
   * Prop that enables and disables filtering
   * True: Enables Filtering
   * False: Disables Filtering
   */
  isFilterDisabled: _propTypes["default"].bool,

  /**
   * Defines the minimum height the results container will be
   */
  popoverMinWidth: _propTypes["default"].number,

  /**
   * Defines the maximum height the results container will be
   */
  popoverMaxHeight: _propTypes["default"].number,

  /**
   * The selected item to be selected & shown by default on the autocomplete (deprecated)
   */
  getButtonProps: (0, _deprecated["default"])(_propTypes["default"].func, 'Use "getToggleButtonProps" instead.')
}, _downshift["default"].propTypes));
(0, _defineProperty2["default"])(Autocomplete, "defaultProps", {
  itemToString: function itemToString(i) {
    return i ? String(i) : '';
  },
  itemSize: 32,
  isFilterDisabled: false,
  popoverMinWidth: 240,
  popoverMaxHeight: 240,
  renderItem: autocompleteItemRenderer
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,