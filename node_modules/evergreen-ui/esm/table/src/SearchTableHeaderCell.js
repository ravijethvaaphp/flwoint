import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { css } from 'glamor';
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Text } from '../../typography';
import { Icon } from '../../icon';
import { SearchIcon } from '../../icons';
import TableHeaderCell from './TableHeaderCell';
var invisibleInputClass = css({
  border: 'none',
  backgroundColor: 'transparent',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  WebkitFontSmoothing: 'antialiased',
  '&:focus': {
    outline: 'none'
  },
  '&::placeholder': {
    color: "rgba(67, 90, 111, 0.7)"
  }
}).toString();

var SearchTableHeaderCell =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(SearchTableHeaderCell, _PureComponent);

  function SearchTableHeaderCell() {
    _classCallCheck(this, SearchTableHeaderCell);

    return _possibleConstructorReturn(this, _getPrototypeOf(SearchTableHeaderCell).apply(this, arguments));
  }

  _createClass(SearchTableHeaderCell, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          children = _this$props.children,
          _onChange = _this$props.onChange,
          autoFocus = _this$props.autoFocus,
          spellCheck = _this$props.spellCheck,
          placeholder = _this$props.placeholder,
          icon = _this$props.icon,
          props = _objectWithoutProperties(_this$props, ["value", "children", "onChange", "autoFocus", "spellCheck", "placeholder", "icon"]);

      return React.createElement(TableHeaderCell, props, React.createElement(Icon, {
        icon: icon,
        color: "muted",
        marginLeft: 2,
        marginRight: 10,
        size: 12
      }), React.createElement(Text, {
        is: "input",
        size: 300,
        flex: "1",
        className: invisibleInputClass,
        value: value,
        onChange: function onChange(e) {
          return _onChange(e.target.value);
        },
        autoFocus: autoFocus,
        spellCheck: spellCheck,
        fontWeight: 500,
        marginLeft: -2,
        paddingLeft: 0,
        placeholder: placeholder
      }));
    }
  }]);

  return SearchTableHeaderCell;
}(PureComponent);

SearchTableHeaderCell.displayName = "SearchTableHeaderCell";

_defineProperty(SearchTableHeaderCell, "propTypes", _objectSpread({}, TableHeaderCell.propTypes, {
  /**
   * The value of the input.
   */
  value: PropTypes.string,

  /**
   * Handler to be called when the input changes.
   */
  onChange: PropTypes.func,

  /**
   * Sets whether the component should be automatically focused on component render.
   */
  autoFocus: PropTypes.bool,

  /**
   * Sets whether to apply spell checking to the content.
   */
  spellCheck: PropTypes.bool,

  /**
   * Text to display in the input if the input is empty.
   */
  placeholder: PropTypes.string,

  /**
   * Icon to display in the input.
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.string])
}));

_defineProperty(SearchTableHeaderCell, "defaultProps", {
  onChange: function onChange() {},
  spellCheck: true,
  placeholder: 'Filter...',
  icon: SearchIcon
});

export { SearchTableHeaderCell as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvU2VhcmNoVGFibGVIZWFkZXJDZWxsLmpzIl0sIm5hbWVzIjpbImNzcyIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlRleHQiLCJJY29uIiwiU2VhcmNoSWNvbiIsIlRhYmxlSGVhZGVyQ2VsbCIsImludmlzaWJsZUlucHV0Q2xhc3MiLCJib3JkZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJXZWJraXRBcHBlYXJhbmNlIiwiTW96QXBwZWFyYW5jZSIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJvdXRsaW5lIiwiY29sb3IiLCJ0b1N0cmluZyIsIlNlYXJjaFRhYmxlSGVhZGVyQ2VsbCIsInByb3BzIiwidmFsdWUiLCJjaGlsZHJlbiIsIm9uQ2hhbmdlIiwiYXV0b0ZvY3VzIiwic3BlbGxDaGVjayIsInBsYWNlaG9sZGVyIiwiaWNvbiIsImUiLCJ0YXJnZXQiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJmdW5jIiwiYm9vbCIsIm9uZU9mVHlwZSIsImVsZW1lbnRUeXBlIiwiZWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsU0FBU0EsR0FBVCxRQUFvQixRQUFwQjtBQUNBLE9BQU9DLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsa0JBQXJCO0FBQ0EsU0FBU0MsSUFBVCxRQUFxQixZQUFyQjtBQUNBLFNBQVNDLFVBQVQsUUFBMkIsYUFBM0I7QUFDQSxPQUFPQyxlQUFQLE1BQTRCLG1CQUE1QjtBQUVBLElBQU1DLG1CQUFtQixHQUFHUixHQUFHLENBQUM7QUFDOUJTLEVBQUFBLE1BQU0sRUFBRSxNQURzQjtBQUU5QkMsRUFBQUEsZUFBZSxFQUFFLGFBRmE7QUFHOUJDLEVBQUFBLGdCQUFnQixFQUFFLE1BSFk7QUFJOUJDLEVBQUFBLGFBQWEsRUFBRSxNQUplO0FBSzlCQyxFQUFBQSxtQkFBbUIsRUFBRSxhQUxTO0FBTzlCLGFBQVc7QUFDVEMsSUFBQUEsT0FBTyxFQUFFO0FBREEsR0FQbUI7QUFXOUIsb0JBQWtCO0FBQ2hCQyxJQUFBQSxLQUFLO0FBRFc7QUFYWSxDQUFELENBQUgsQ0FjekJDLFFBZHlCLEVBQTVCOztJQWdCcUJDLHFCOzs7Ozs7Ozs7Ozs7OzZCQWlEVjtBQUFBLHdCQVVILEtBQUtDLEtBVkY7QUFBQSxVQUVMQyxLQUZLLGVBRUxBLEtBRks7QUFBQSxVQUdMQyxRQUhLLGVBR0xBLFFBSEs7QUFBQSxVQUlMQyxTQUpLLGVBSUxBLFFBSks7QUFBQSxVQUtMQyxTQUxLLGVBS0xBLFNBTEs7QUFBQSxVQU1MQyxVQU5LLGVBTUxBLFVBTks7QUFBQSxVQU9MQyxXQVBLLGVBT0xBLFdBUEs7QUFBQSxVQVFMQyxJQVJLLGVBUUxBLElBUks7QUFBQSxVQVNGUCxLQVRFOztBQVlQLGFBQ0Usb0JBQUMsZUFBRCxFQUFxQkEsS0FBckIsRUFDRSxvQkFBQyxJQUFEO0FBQ0UsUUFBQSxJQUFJLEVBQUVPLElBRFI7QUFFRSxRQUFBLEtBQUssRUFBQyxPQUZSO0FBR0UsUUFBQSxVQUFVLEVBQUUsQ0FIZDtBQUlFLFFBQUEsV0FBVyxFQUFFLEVBSmY7QUFLRSxRQUFBLElBQUksRUFBRTtBQUxSLFFBREYsRUFRRSxvQkFBQyxJQUFEO0FBQ0UsUUFBQSxFQUFFLEVBQUMsT0FETDtBQUVFLFFBQUEsSUFBSSxFQUFFLEdBRlI7QUFHRSxRQUFBLElBQUksRUFBQyxHQUhQO0FBSUUsUUFBQSxTQUFTLEVBQUVqQixtQkFKYjtBQUtFLFFBQUEsS0FBSyxFQUFFVyxLQUxUO0FBTUUsUUFBQSxRQUFRLEVBQUUsa0JBQUFPLENBQUM7QUFBQSxpQkFBSUwsU0FBUSxDQUFDSyxDQUFDLENBQUNDLE1BQUYsQ0FBU1IsS0FBVixDQUFaO0FBQUEsU0FOYjtBQU9FLFFBQUEsU0FBUyxFQUFFRyxTQVBiO0FBUUUsUUFBQSxVQUFVLEVBQUVDLFVBUmQ7QUFTRSxRQUFBLFVBQVUsRUFBRSxHQVRkO0FBVUUsUUFBQSxVQUFVLEVBQUUsQ0FBQyxDQVZmO0FBV0UsUUFBQSxXQUFXLEVBQUUsQ0FYZjtBQVlFLFFBQUEsV0FBVyxFQUFFQztBQVpmLFFBUkYsQ0FERjtBQXlCRDs7OztFQXRGZ0R0QixhOztBQUE5QmUscUI7O2dCQUFBQSxxQixpQ0FLZFYsZUFBZSxDQUFDcUIsUztBQUVuQjs7O0FBR0FULEVBQUFBLEtBQUssRUFBRWhCLFNBQVMsQ0FBQzBCLE07O0FBRWpCOzs7QUFHQVIsRUFBQUEsUUFBUSxFQUFFbEIsU0FBUyxDQUFDMkIsSTs7QUFFcEI7OztBQUdBUixFQUFBQSxTQUFTLEVBQUVuQixTQUFTLENBQUM0QixJOztBQUVyQjs7O0FBR0FSLEVBQUFBLFVBQVUsRUFBRXBCLFNBQVMsQ0FBQzRCLEk7O0FBRXRCOzs7QUFHQVAsRUFBQUEsV0FBVyxFQUFFckIsU0FBUyxDQUFDMEIsTTs7QUFFdkI7OztBQUdBSixFQUFBQSxJQUFJLEVBQUV0QixTQUFTLENBQUM2QixTQUFWLENBQW9CLENBQ3hCN0IsU0FBUyxDQUFDOEIsV0FEYyxFQUV4QjlCLFNBQVMsQ0FBQytCLE9BRmMsRUFHeEIvQixTQUFTLENBQUMwQixNQUhjLENBQXBCOzs7Z0JBbkNXWixxQixrQkEwQ0c7QUFDcEJJLEVBQUFBLFFBQVEsRUFBRSxvQkFBTSxDQUFFLENBREU7QUFFcEJFLEVBQUFBLFVBQVUsRUFBRSxJQUZRO0FBR3BCQyxFQUFBQSxXQUFXLEVBQUUsV0FITztBQUlwQkMsRUFBQUEsSUFBSSxFQUFFbkI7QUFKYyxDOztTQTFDSFcscUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InXG5pbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJ1xuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uL3R5cG9ncmFwaHknXG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi4vLi4vaWNvbidcbmltcG9ydCB7IFNlYXJjaEljb24gfSBmcm9tICcuLi8uLi9pY29ucydcbmltcG9ydCBUYWJsZUhlYWRlckNlbGwgZnJvbSAnLi9UYWJsZUhlYWRlckNlbGwnXG5cbmNvbnN0IGludmlzaWJsZUlucHV0Q2xhc3MgPSBjc3Moe1xuICBib3JkZXI6ICdub25lJyxcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgV2Via2l0Rm9udFNtb290aGluZzogJ2FudGlhbGlhc2VkJyxcblxuICAnJjpmb2N1cyc6IHtcbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfSxcblxuICAnJjo6cGxhY2Vob2xkZXInOiB7XG4gICAgY29sb3I6IGByZ2JhKDY3LCA5MCwgMTExLCAwLjcpYFxuICB9XG59KS50b1N0cmluZygpXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaFRhYmxlSGVhZGVyQ2VsbCBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSBUYWJsZUhlYWRlckNlbGwgY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgICAqL1xuICAgIC4uLlRhYmxlSGVhZGVyQ2VsbC5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIGlucHV0LlxuICAgICAqL1xuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgaW5wdXQgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBzaG91bGQgYmUgYXV0b21hdGljYWxseSBmb2N1c2VkIG9uIGNvbXBvbmVudCByZW5kZXIuXG4gICAgICovXG4gICAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0byBhcHBseSBzcGVsbCBjaGVja2luZyB0byB0aGUgY29udGVudC5cbiAgICAgKi9cbiAgICBzcGVsbENoZWNrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAgIC8qKlxuICAgICAqIFRleHQgdG8gZGlzcGxheSBpbiB0aGUgaW5wdXQgaWYgdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgICAqL1xuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogSWNvbiB0byBkaXNwbGF5IGluIHRoZSBpbnB1dC5cbiAgICAgKi9cbiAgICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIFByb3BUeXBlcy5lbGVtZW50LFxuICAgICAgUHJvcFR5cGVzLnN0cmluZ1xuICAgIF0pXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIG9uQ2hhbmdlOiAoKSA9PiB7fSxcbiAgICBzcGVsbENoZWNrOiB0cnVlLFxuICAgIHBsYWNlaG9sZGVyOiAnRmlsdGVyLi4uJyxcbiAgICBpY29uOiBTZWFyY2hJY29uXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgc3BlbGxDaGVjayxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgaWNvbixcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIHJldHVybiAoXG4gICAgICA8VGFibGVIZWFkZXJDZWxsIHsuLi5wcm9wc30+XG4gICAgICAgIDxJY29uXG4gICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICBjb2xvcj1cIm11dGVkXCJcbiAgICAgICAgICBtYXJnaW5MZWZ0PXsyfVxuICAgICAgICAgIG1hcmdpblJpZ2h0PXsxMH1cbiAgICAgICAgICBzaXplPXsxMn1cbiAgICAgICAgLz5cbiAgICAgICAgPFRleHRcbiAgICAgICAgICBpcz1cImlucHV0XCJcbiAgICAgICAgICBzaXplPXszMDB9XG4gICAgICAgICAgZmxleD1cIjFcIlxuICAgICAgICAgIGNsYXNzTmFtZT17aW52aXNpYmxlSW5wdXRDbGFzc31cbiAgICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gb25DaGFuZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIGF1dG9Gb2N1cz17YXV0b0ZvY3VzfVxuICAgICAgICAgIHNwZWxsQ2hlY2s9e3NwZWxsQ2hlY2t9XG4gICAgICAgICAgZm9udFdlaWdodD17NTAwfVxuICAgICAgICAgIG1hcmdpbkxlZnQ9ey0yfVxuICAgICAgICAgIHBhZGRpbmdMZWZ0PXswfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgLz5cbiAgICAgIDwvVGFibGVIZWFkZXJDZWxsPlxuICAgIClcbiAgfVxufVxuIl19