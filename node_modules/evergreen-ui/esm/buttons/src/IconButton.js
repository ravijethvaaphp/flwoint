import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { dimensions, spacing, position, layout } from 'ui-box';
import { Icon } from '../../icon';
import { withTheme } from '../../theme';
import Button from './Button';

var IconButton =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(IconButton, _PureComponent);

  function IconButton() {
    _classCallCheck(this, IconButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(IconButton).apply(this, arguments));
  }

  _createClass(IconButton, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          theme = _this$props.theme,
          icon = _this$props.icon,
          iconSize = _this$props.iconSize,
          height = _this$props.height,
          intent = _this$props.intent,
          props = _objectWithoutProperties(_this$props, ["theme", "icon", "iconSize", "height", "intent"]);

      var size = iconSize || theme.getIconSizeForIconButton(height);
      return React.createElement(Button, _extends({
        intent: intent,
        height: height,
        width: height,
        paddingLeft: 0,
        paddingRight: 0,
        display: "flex",
        justifyContent: "center"
      }, props), React.createElement(Icon, {
        icon: icon,
        size: size,
        color: intent === 'none' ? 'default' : 'currentColor'
      }));
    }
  }]);

  return IconButton;
}(PureComponent);

IconButton.displayName = "IconButton";

_defineProperty(IconButton, "propTypes", _objectSpread({}, dimensions.propTypes, {}, spacing.propTypes, {}, position.propTypes, {}, layout.propTypes, {
  /**
   * Name of the icon, or an icon element to render.
   * This prop is required because it determines the content of the component, but it can
   * be explicitly set to falsy values to render nothing.
   *
   * - If `null` or `undefined` or `false`, this component will render nothing.
   * - If given an IconName string literal, it will render the corresponding Evergreen icon
   * - If given a valid React element reference, it will be rendered with the other icon props
   * - Any other value will be returned as a pass-through (as if you didn't use `<Icon />`)
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.string]),

  /**
   * Specifies an explicit icon size instead of the default value
   */
  iconSize: PropTypes.number,

  /**
   * The intent of the button.
   */
  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']).isRequired,

  /**
   * The appearance of the button.
   */
  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']).isRequired,

  /**
   * Forcefully set the active state of a button.
   * Useful in conjuction with a Popover.
   */
  isActive: PropTypes.bool,

  /**
   * When true, the button is disabled.
   * isLoading also sets the button to disabled.
   */
  disabled: PropTypes.bool,

  /**
   * Theme provided by ThemeProvider.
   */
  theme: PropTypes.object.isRequired,

  /**
   * Class name passed to the button.
   * Only use if you know what you are doing.
   */
  className: PropTypes.string
}));

_defineProperty(IconButton, "defaultProps", {
  intent: 'none',
  appearance: 'default',
  height: 32
});

export default withTheme(IconButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9idXR0b25zL3NyYy9JY29uQnV0dG9uLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsImRpbWVuc2lvbnMiLCJzcGFjaW5nIiwicG9zaXRpb24iLCJsYXlvdXQiLCJJY29uIiwid2l0aFRoZW1lIiwiQnV0dG9uIiwiSWNvbkJ1dHRvbiIsInByb3BzIiwidGhlbWUiLCJpY29uIiwiaWNvblNpemUiLCJoZWlnaHQiLCJpbnRlbnQiLCJzaXplIiwiZ2V0SWNvblNpemVGb3JJY29uQnV0dG9uIiwicHJvcFR5cGVzIiwib25lT2ZUeXBlIiwiZWxlbWVudFR5cGUiLCJlbGVtZW50Iiwic3RyaW5nIiwibnVtYmVyIiwib25lT2YiLCJpc1JlcXVpcmVkIiwiYXBwZWFyYW5jZSIsImlzQWN0aXZlIiwiYm9vbCIsImRpc2FibGVkIiwib2JqZWN0IiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsYUFBaEIsUUFBcUMsT0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsU0FBU0MsVUFBVCxFQUFxQkMsT0FBckIsRUFBOEJDLFFBQTlCLEVBQXdDQyxNQUF4QyxRQUFzRCxRQUF0RDtBQUNBLFNBQVNDLElBQVQsUUFBcUIsWUFBckI7QUFDQSxTQUFTQyxTQUFULFFBQTBCLGFBQTFCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixVQUFuQjs7SUFFTUMsVTs7Ozs7Ozs7Ozs7Ozs2QkFvRks7QUFBQSx3QkFDcUQsS0FBS0MsS0FEMUQ7QUFBQSxVQUNDQyxLQURELGVBQ0NBLEtBREQ7QUFBQSxVQUNRQyxJQURSLGVBQ1FBLElBRFI7QUFBQSxVQUNjQyxRQURkLGVBQ2NBLFFBRGQ7QUFBQSxVQUN3QkMsTUFEeEIsZUFDd0JBLE1BRHhCO0FBQUEsVUFDZ0NDLE1BRGhDLGVBQ2dDQSxNQURoQztBQUFBLFVBQzJDTCxLQUQzQzs7QUFFUCxVQUFNTSxJQUFJLEdBQUdILFFBQVEsSUFBSUYsS0FBSyxDQUFDTSx3QkFBTixDQUErQkgsTUFBL0IsQ0FBekI7QUFFQSxhQUNFLG9CQUFDLE1BQUQ7QUFDRSxRQUFBLE1BQU0sRUFBRUMsTUFEVjtBQUVFLFFBQUEsTUFBTSxFQUFFRCxNQUZWO0FBR0UsUUFBQSxLQUFLLEVBQUVBLE1BSFQ7QUFJRSxRQUFBLFdBQVcsRUFBRSxDQUpmO0FBS0UsUUFBQSxZQUFZLEVBQUUsQ0FMaEI7QUFNRSxRQUFBLE9BQU8sRUFBQyxNQU5WO0FBT0UsUUFBQSxjQUFjLEVBQUM7QUFQakIsU0FRTUosS0FSTixHQVVFLG9CQUFDLElBQUQ7QUFDRSxRQUFBLElBQUksRUFBRUUsSUFEUjtBQUVFLFFBQUEsSUFBSSxFQUFFSSxJQUZSO0FBR0UsUUFBQSxLQUFLLEVBQUVELE1BQU0sS0FBSyxNQUFYLEdBQW9CLFNBQXBCLEdBQWdDO0FBSHpDLFFBVkYsQ0FERjtBQWtCRDs7OztFQTFHc0JmLGE7O0FBQW5CUyxVOztnQkFBQUEsVSxpQ0FLQ1AsVUFBVSxDQUFDZ0IsUyxNQUtYZixPQUFPLENBQUNlLFMsTUFLUmQsUUFBUSxDQUFDYyxTLE1BS1RiLE1BQU0sQ0FBQ2EsUztBQUVWOzs7Ozs7Ozs7O0FBVUFOLEVBQUFBLElBQUksRUFBRVgsU0FBUyxDQUFDa0IsU0FBVixDQUFvQixDQUN4QmxCLFNBQVMsQ0FBQ21CLFdBRGMsRUFFeEJuQixTQUFTLENBQUNvQixPQUZjLEVBR3hCcEIsU0FBUyxDQUFDcUIsTUFIYyxDQUFwQixDOztBQU1OOzs7QUFHQVQsRUFBQUEsUUFBUSxFQUFFWixTQUFTLENBQUNzQixNOztBQUVwQjs7O0FBR0FSLEVBQUFBLE1BQU0sRUFBRWQsU0FBUyxDQUFDdUIsS0FBVixDQUFnQixDQUFDLE1BQUQsRUFBUyxTQUFULEVBQW9CLFNBQXBCLEVBQStCLFFBQS9CLENBQWhCLEVBQ0xDLFU7O0FBRUg7OztBQUdBQyxFQUFBQSxVQUFVLEVBQUV6QixTQUFTLENBQUN1QixLQUFWLENBQWdCLENBQUMsU0FBRCxFQUFZLFNBQVosRUFBdUIsU0FBdkIsQ0FBaEIsRUFBbURDLFU7O0FBRS9EOzs7O0FBSUFFLEVBQUFBLFFBQVEsRUFBRTFCLFNBQVMsQ0FBQzJCLEk7O0FBRXBCOzs7O0FBSUFDLEVBQUFBLFFBQVEsRUFBRTVCLFNBQVMsQ0FBQzJCLEk7O0FBRXBCOzs7QUFHQWpCLEVBQUFBLEtBQUssRUFBRVYsU0FBUyxDQUFDNkIsTUFBVixDQUFpQkwsVTs7QUFFeEI7Ozs7QUFJQU0sRUFBQUEsU0FBUyxFQUFFOUIsU0FBUyxDQUFDcUI7OztnQkEzRW5CYixVLGtCQThFa0I7QUFDcEJNLEVBQUFBLE1BQU0sRUFBRSxNQURZO0FBRXBCVyxFQUFBQSxVQUFVLEVBQUUsU0FGUTtBQUdwQlosRUFBQUEsTUFBTSxFQUFFO0FBSFksQzs7QUErQnhCLGVBQWVQLFNBQVMsQ0FBQ0UsVUFBRCxDQUF4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBkaW1lbnNpb25zLCBzcGFjaW5nLCBwb3NpdGlvbiwgbGF5b3V0IH0gZnJvbSAndWktYm94J1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJy4uLy4uL2ljb24nXG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nXG5cbmNsYXNzIEljb25CdXR0b24gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyB0aGUgZGltZW5zaW9ucyBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAgICovXG4gICAgLi4uZGltZW5zaW9ucy5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyB0aGUgc3BhY2luZyBzcGVjIGZyb20gdGhlIEJveCBwcmltaXRpdmUuXG4gICAgICovXG4gICAgLi4uc3BhY2luZy5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBDb21wb3NlcyB0aGUgcG9zaXRpb24gc3BlYyBmcm9tIHRoZSBCb3ggcHJpbWl0aXZlLlxuICAgICAqL1xuICAgIC4uLnBvc2l0aW9uLnByb3BUeXBlcyxcblxuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSBsYXlvdXQgc3BlYyBmcm9tIHRoZSBCb3ggcHJpbWl0aXZlLlxuICAgICAqL1xuICAgIC4uLmxheW91dC5wcm9wVHlwZXMsXG5cbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIHRoZSBpY29uLCBvciBhbiBpY29uIGVsZW1lbnQgdG8gcmVuZGVyLlxuICAgICAqIFRoaXMgcHJvcCBpcyByZXF1aXJlZCBiZWNhdXNlIGl0IGRldGVybWluZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudCwgYnV0IGl0IGNhblxuICAgICAqIGJlIGV4cGxpY2l0bHkgc2V0IHRvIGZhbHN5IHZhbHVlcyB0byByZW5kZXIgbm90aGluZy5cbiAgICAgKlxuICAgICAqIC0gSWYgYG51bGxgIG9yIGB1bmRlZmluZWRgIG9yIGBmYWxzZWAsIHRoaXMgY29tcG9uZW50IHdpbGwgcmVuZGVyIG5vdGhpbmcuXG4gICAgICogLSBJZiBnaXZlbiBhbiBJY29uTmFtZSBzdHJpbmcgbGl0ZXJhbCwgaXQgd2lsbCByZW5kZXIgdGhlIGNvcnJlc3BvbmRpbmcgRXZlcmdyZWVuIGljb25cbiAgICAgKiAtIElmIGdpdmVuIGEgdmFsaWQgUmVhY3QgZWxlbWVudCByZWZlcmVuY2UsIGl0IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCB0aGUgb3RoZXIgaWNvbiBwcm9wc1xuICAgICAqIC0gQW55IG90aGVyIHZhbHVlIHdpbGwgYmUgcmV0dXJuZWQgYXMgYSBwYXNzLXRocm91Z2ggKGFzIGlmIHlvdSBkaWRuJ3QgdXNlIGA8SWNvbiAvPmApXG4gICAgICovXG4gICAgaWNvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgICBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICAgIFByb3BUeXBlcy5zdHJpbmdcbiAgICBdKSxcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBhbiBleHBsaWNpdCBpY29uIHNpemUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCB2YWx1ZVxuICAgICAqL1xuICAgIGljb25TaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgLyoqXG4gICAgICogVGhlIGludGVudCBvZiB0aGUgYnV0dG9uLlxuICAgICAqL1xuICAgIGludGVudDogUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdzdWNjZXNzJywgJ3dhcm5pbmcnLCAnZGFuZ2VyJ10pXG4gICAgICAuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHBlYXJhbmNlIG9mIHRoZSBidXR0b24uXG4gICAgICovXG4gICAgYXBwZWFyYW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdtaW5pbWFsJywgJ3ByaW1hcnknXSkuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIEZvcmNlZnVsbHkgc2V0IHRoZSBhY3RpdmUgc3RhdGUgb2YgYSBidXR0b24uXG4gICAgICogVXNlZnVsIGluIGNvbmp1Y3Rpb24gd2l0aCBhIFBvcG92ZXIuXG4gICAgICovXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0cnVlLCB0aGUgYnV0dG9uIGlzIGRpc2FibGVkLlxuICAgICAqIGlzTG9hZGluZyBhbHNvIHNldHMgdGhlIGJ1dHRvbiB0byBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBUaGVtZSBwcm92aWRlZCBieSBUaGVtZVByb3ZpZGVyLlxuICAgICAqL1xuICAgIHRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBDbGFzcyBuYW1lIHBhc3NlZCB0byB0aGUgYnV0dG9uLlxuICAgICAqIE9ubHkgdXNlIGlmIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cbiAgICAgKi9cbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaW50ZW50OiAnbm9uZScsXG4gICAgYXBwZWFyYW5jZTogJ2RlZmF1bHQnLFxuICAgIGhlaWdodDogMzJcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHRoZW1lLCBpY29uLCBpY29uU2l6ZSwgaGVpZ2h0LCBpbnRlbnQsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzXG4gICAgY29uc3Qgc2l6ZSA9IGljb25TaXplIHx8IHRoZW1lLmdldEljb25TaXplRm9ySWNvbkJ1dHRvbihoZWlnaHQpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPEJ1dHRvblxuICAgICAgICBpbnRlbnQ9e2ludGVudH1cbiAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4gICAgICAgIHdpZHRoPXtoZWlnaHR9XG4gICAgICAgIHBhZGRpbmdMZWZ0PXswfVxuICAgICAgICBwYWRkaW5nUmlnaHQ9ezB9XG4gICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIlxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxJY29uXG4gICAgICAgICAgaWNvbj17aWNvbn1cbiAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgIGNvbG9yPXtpbnRlbnQgPT09ICdub25lJyA/ICdkZWZhdWx0JyA6ICdjdXJyZW50Q29sb3InfVxuICAgICAgICAvPlxuICAgICAgPC9CdXR0b24+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShJY29uQnV0dG9uKVxuIl19