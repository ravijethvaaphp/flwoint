import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Pane } from '../../layers';
import { TickIcon } from '../../icons';
import { Image } from '../../image';
import { TableRow, TextTableCell } from '../../table';

var Option =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Option, _PureComponent);

  function Option() {
    _classCallCheck(this, Option);

    return _possibleConstructorReturn(this, _getPrototypeOf(Option).apply(this, arguments));
  }

  _createClass(Option, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          label = _this$props.label,
          onSelect = _this$props.onSelect,
          onDeselect = _this$props.onDeselect,
          isHighlighted = _this$props.isHighlighted,
          isSelected = _this$props.isSelected,
          isSelectable = _this$props.isSelectable,
          disabled = _this$props.disabled,
          style = _this$props.style,
          height = _this$props.height,
          icon = _this$props.icon,
          props = _objectWithoutProperties(_this$props, ["label", "onSelect", "onDeselect", "isHighlighted", "isSelected", "isSelectable", "disabled", "style", "height", "icon"]);

      var textProps = {};

      if (disabled) {
        textProps.color = 'muted';
      }

      if (isSelected) {
        textProps.color = 'selected';
      }

      return React.createElement(TableRow, _extends({
        isSelectable: isSelectable && !disabled,
        isHighlighted: isHighlighted,
        onSelect: onSelect,
        onDeselect: onDeselect,
        isSelected: isSelected,
        style: style,
        display: "flex",
        alignItems: "center",
        borderBottom: false
      }, props), React.createElement(Pane, {
        paddingLeft: 12,
        paddingRight: 8,
        opacity: isSelected ? 1 : 0,
        flexGrow: 0,
        paddingTop: 4
      }, React.createElement(TickIcon, {
        color: "selected",
        size: 14
      })), React.createElement(TextTableCell, {
        height: height,
        borderBottom: "muted",
        textProps: textProps,
        paddingLeft: 0,
        borderRight: null,
        flex: 1,
        alignSelf: "stretch",
        cursor: disabled ? 'default' : 'pointer'
      }, React.createElement(Pane, {
        alignItems: "center",
        display: "flex"
      }, icon && React.createElement(Image, {
        src: icon,
        width: 24,
        marginRight: 8
      }), label)));
    }
  }]);

  return Option;
}(PureComponent);

Option.displayName = "Option";

_defineProperty(Option, "propTypes", {
  label: PropTypes.string,
  icon: PropTypes.string,
  style: PropTypes.any,
  height: PropTypes.number,
  onSelect: PropTypes.func,
  onDeselect: PropTypes.func,
  isHighlighted: PropTypes.bool,
  isSelected: PropTypes.bool,
  isSelectable: PropTypes.bool,
  disabled: PropTypes.bool
});

export { Option as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zZWxlY3QtbWVudS9zcmMvT3B0aW9uLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlBhbmUiLCJUaWNrSWNvbiIsIkltYWdlIiwiVGFibGVSb3ciLCJUZXh0VGFibGVDZWxsIiwiT3B0aW9uIiwicHJvcHMiLCJsYWJlbCIsIm9uU2VsZWN0Iiwib25EZXNlbGVjdCIsImlzSGlnaGxpZ2h0ZWQiLCJpc1NlbGVjdGVkIiwiaXNTZWxlY3RhYmxlIiwiZGlzYWJsZWQiLCJzdHlsZSIsImhlaWdodCIsImljb24iLCJ0ZXh0UHJvcHMiLCJjb2xvciIsInN0cmluZyIsImFueSIsIm51bWJlciIsImZ1bmMiLCJib29sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLGFBQWhCLFFBQXFDLE9BQXJDO0FBQ0EsT0FBT0MsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLElBQVQsUUFBcUIsY0FBckI7QUFDQSxTQUFTQyxRQUFULFFBQXlCLGFBQXpCO0FBQ0EsU0FBU0MsS0FBVCxRQUFzQixhQUF0QjtBQUNBLFNBQVNDLFFBQVQsRUFBbUJDLGFBQW5CLFFBQXdDLGFBQXhDOztJQUVxQkMsTTs7Ozs7Ozs7Ozs7Ozs2QkFjVjtBQUFBLHdCQWFILEtBQUtDLEtBYkY7QUFBQSxVQUVMQyxLQUZLLGVBRUxBLEtBRks7QUFBQSxVQUdMQyxRQUhLLGVBR0xBLFFBSEs7QUFBQSxVQUlMQyxVQUpLLGVBSUxBLFVBSks7QUFBQSxVQUtMQyxhQUxLLGVBS0xBLGFBTEs7QUFBQSxVQU1MQyxVQU5LLGVBTUxBLFVBTks7QUFBQSxVQU9MQyxZQVBLLGVBT0xBLFlBUEs7QUFBQSxVQVFMQyxRQVJLLGVBUUxBLFFBUks7QUFBQSxVQVNMQyxLQVRLLGVBU0xBLEtBVEs7QUFBQSxVQVVMQyxNQVZLLGVBVUxBLE1BVks7QUFBQSxVQVdMQyxJQVhLLGVBV0xBLElBWEs7QUFBQSxVQVlGVixLQVpFOztBQWVQLFVBQU1XLFNBQVMsR0FBRyxFQUFsQjs7QUFDQSxVQUFJSixRQUFKLEVBQWM7QUFDWkksUUFBQUEsU0FBUyxDQUFDQyxLQUFWLEdBQWtCLE9BQWxCO0FBQ0Q7O0FBRUQsVUFBSVAsVUFBSixFQUFnQjtBQUNkTSxRQUFBQSxTQUFTLENBQUNDLEtBQVYsR0FBa0IsVUFBbEI7QUFDRDs7QUFFRCxhQUNFLG9CQUFDLFFBQUQ7QUFDRSxRQUFBLFlBQVksRUFBRU4sWUFBWSxJQUFJLENBQUNDLFFBRGpDO0FBRUUsUUFBQSxhQUFhLEVBQUVILGFBRmpCO0FBR0UsUUFBQSxRQUFRLEVBQUVGLFFBSFo7QUFJRSxRQUFBLFVBQVUsRUFBRUMsVUFKZDtBQUtFLFFBQUEsVUFBVSxFQUFFRSxVQUxkO0FBTUUsUUFBQSxLQUFLLEVBQUVHLEtBTlQ7QUFPRSxRQUFBLE9BQU8sRUFBQyxNQVBWO0FBUUUsUUFBQSxVQUFVLEVBQUMsUUFSYjtBQVNFLFFBQUEsWUFBWSxFQUFFO0FBVGhCLFNBVU1SLEtBVk4sR0FZRSxvQkFBQyxJQUFEO0FBQ0UsUUFBQSxXQUFXLEVBQUUsRUFEZjtBQUVFLFFBQUEsWUFBWSxFQUFFLENBRmhCO0FBR0UsUUFBQSxPQUFPLEVBQUVLLFVBQVUsR0FBRyxDQUFILEdBQU8sQ0FINUI7QUFJRSxRQUFBLFFBQVEsRUFBRSxDQUpaO0FBS0UsUUFBQSxVQUFVLEVBQUU7QUFMZCxTQU9FLG9CQUFDLFFBQUQ7QUFBVSxRQUFBLEtBQUssRUFBQyxVQUFoQjtBQUEyQixRQUFBLElBQUksRUFBRTtBQUFqQyxRQVBGLENBWkYsRUFxQkUsb0JBQUMsYUFBRDtBQUNFLFFBQUEsTUFBTSxFQUFFSSxNQURWO0FBRUUsUUFBQSxZQUFZLEVBQUMsT0FGZjtBQUdFLFFBQUEsU0FBUyxFQUFFRSxTQUhiO0FBSUUsUUFBQSxXQUFXLEVBQUUsQ0FKZjtBQUtFLFFBQUEsV0FBVyxFQUFFLElBTGY7QUFNRSxRQUFBLElBQUksRUFBRSxDQU5SO0FBT0UsUUFBQSxTQUFTLEVBQUMsU0FQWjtBQVFFLFFBQUEsTUFBTSxFQUFFSixRQUFRLEdBQUcsU0FBSCxHQUFlO0FBUmpDLFNBVUUsb0JBQUMsSUFBRDtBQUFNLFFBQUEsVUFBVSxFQUFDLFFBQWpCO0FBQTBCLFFBQUEsT0FBTyxFQUFDO0FBQWxDLFNBQ0dHLElBQUksSUFBSSxvQkFBQyxLQUFEO0FBQU8sUUFBQSxHQUFHLEVBQUVBLElBQVo7QUFBa0IsUUFBQSxLQUFLLEVBQUUsRUFBekI7QUFBNkIsUUFBQSxXQUFXLEVBQUU7QUFBMUMsUUFEWCxFQUVHVCxLQUZILENBVkYsQ0FyQkYsQ0FERjtBQXVDRDs7OztFQTdFaUNULGE7O0FBQWZPLE07O2dCQUFBQSxNLGVBQ0E7QUFDakJFLEVBQUFBLEtBQUssRUFBRVIsU0FBUyxDQUFDb0IsTUFEQTtBQUVqQkgsRUFBQUEsSUFBSSxFQUFFakIsU0FBUyxDQUFDb0IsTUFGQztBQUdqQkwsRUFBQUEsS0FBSyxFQUFFZixTQUFTLENBQUNxQixHQUhBO0FBSWpCTCxFQUFBQSxNQUFNLEVBQUVoQixTQUFTLENBQUNzQixNQUpEO0FBS2pCYixFQUFBQSxRQUFRLEVBQUVULFNBQVMsQ0FBQ3VCLElBTEg7QUFNakJiLEVBQUFBLFVBQVUsRUFBRVYsU0FBUyxDQUFDdUIsSUFOTDtBQU9qQlosRUFBQUEsYUFBYSxFQUFFWCxTQUFTLENBQUN3QixJQVBSO0FBUWpCWixFQUFBQSxVQUFVLEVBQUVaLFNBQVMsQ0FBQ3dCLElBUkw7QUFTakJYLEVBQUFBLFlBQVksRUFBRWIsU0FBUyxDQUFDd0IsSUFUUDtBQVVqQlYsRUFBQUEsUUFBUSxFQUFFZCxTQUFTLENBQUN3QjtBQVZILEM7O1NBREFsQixNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi8uLi9sYXllcnMnXG5pbXBvcnQgeyBUaWNrSWNvbiB9IGZyb20gJy4uLy4uL2ljb25zJ1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICcuLi8uLi9pbWFnZSdcbmltcG9ydCB7IFRhYmxlUm93LCBUZXh0VGFibGVDZWxsIH0gZnJvbSAnLi4vLi4vdGFibGUnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9wdGlvbiBleHRlbmRzIFB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGljb246IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5hbnksXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG9uU2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkRlc2VsZWN0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBpc0hpZ2hsaWdodGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1NlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1NlbGVjdGFibGU6IFByb3BUeXBlcy5ib29sLFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGxhYmVsLFxuICAgICAgb25TZWxlY3QsXG4gICAgICBvbkRlc2VsZWN0LFxuICAgICAgaXNIaWdobGlnaHRlZCxcbiAgICAgIGlzU2VsZWN0ZWQsXG4gICAgICBpc1NlbGVjdGFibGUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIHN0eWxlLFxuICAgICAgaGVpZ2h0LFxuICAgICAgaWNvbixcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHNcblxuICAgIGNvbnN0IHRleHRQcm9wcyA9IHt9XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICB0ZXh0UHJvcHMuY29sb3IgPSAnbXV0ZWQnXG4gICAgfVxuXG4gICAgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICAgIHRleHRQcm9wcy5jb2xvciA9ICdzZWxlY3RlZCdcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRhYmxlUm93XG4gICAgICAgIGlzU2VsZWN0YWJsZT17aXNTZWxlY3RhYmxlICYmICFkaXNhYmxlZH1cbiAgICAgICAgaXNIaWdobGlnaHRlZD17aXNIaWdobGlnaHRlZH1cbiAgICAgICAgb25TZWxlY3Q9e29uU2VsZWN0fVxuICAgICAgICBvbkRlc2VsZWN0PXtvbkRlc2VsZWN0fVxuICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkfVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgIGJvcmRlckJvdHRvbT17ZmFsc2V9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAgPFBhbmVcbiAgICAgICAgICBwYWRkaW5nTGVmdD17MTJ9XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0PXs4fVxuICAgICAgICAgIG9wYWNpdHk9e2lzU2VsZWN0ZWQgPyAxIDogMH1cbiAgICAgICAgICBmbGV4R3Jvdz17MH1cbiAgICAgICAgICBwYWRkaW5nVG9wPXs0fVxuICAgICAgICA+XG4gICAgICAgICAgPFRpY2tJY29uIGNvbG9yPVwic2VsZWN0ZWRcIiBzaXplPXsxNH0gLz5cbiAgICAgICAgPC9QYW5lPlxuICAgICAgICA8VGV4dFRhYmxlQ2VsbFxuICAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICAgIGJvcmRlckJvdHRvbT1cIm11dGVkXCJcbiAgICAgICAgICB0ZXh0UHJvcHM9e3RleHRQcm9wc31cbiAgICAgICAgICBwYWRkaW5nTGVmdD17MH1cbiAgICAgICAgICBib3JkZXJSaWdodD17bnVsbH1cbiAgICAgICAgICBmbGV4PXsxfVxuICAgICAgICAgIGFsaWduU2VsZj1cInN0cmV0Y2hcIlxuICAgICAgICAgIGN1cnNvcj17ZGlzYWJsZWQgPyAnZGVmYXVsdCcgOiAncG9pbnRlcid9XG4gICAgICAgID5cbiAgICAgICAgICA8UGFuZSBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgZGlzcGxheT1cImZsZXhcIj5cbiAgICAgICAgICAgIHtpY29uICYmIDxJbWFnZSBzcmM9e2ljb259IHdpZHRoPXsyNH0gbWFyZ2luUmlnaHQ9ezh9IC8+fVxuICAgICAgICAgICAge2xhYmVsfVxuICAgICAgICAgIDwvUGFuZT5cbiAgICAgICAgPC9UZXh0VGFibGVDZWxsPlxuICAgICAgPC9UYWJsZVJvdz5cbiAgICApXG4gIH1cbn1cbiJdfQ==