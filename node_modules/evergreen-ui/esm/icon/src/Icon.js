import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import ReactIs from 'react-is';
import * as IconExports from '../../icons';

var IconNameMapper = IconExports.IconNameMapper,
    icons = _objectWithoutProperties(IconExports, ["IconNameMapper"]);

export var Icon =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Icon, _PureComponent);

  function Icon() {
    _classCallCheck(this, Icon);

    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));
  }

  _createClass(Icon, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          icon = _this$props.icon,
          iconProps = _objectWithoutProperties(_this$props, ["icon"]);

      if (!icon) {
        return null;
      }

      if (typeof icon === 'string') {
        var iconName = IconNameMapper[icon] || '';
        var Component = icons[iconName];

        if (Component) {
          return React.createElement(Component, iconProps);
        }
      }

      if (ReactIs.isValidElementType(icon)) {
        var _Component = icon;
        return React.createElement(_Component, iconProps);
      }

      if (React.isValidElement(icon)) {
        return React.cloneElement(icon, iconProps);
      }

      return icon;
    }
  }]);

  return Icon;
}(PureComponent);
Icon.displayName = "Icon";

_defineProperty(Icon, "SIZE_STANDARD", 16);

_defineProperty(Icon, "SIZE_LARGE", 20);

_defineProperty(Icon, "propTypes", {
  /**
   * Color of icon. Equivalent to setting CSS `fill` property.
   */
  color: PropTypes.string,

  /**
   * Name of the icon, or an icon element to render.
   * This prop is required because it determines the content of the component, but it can
   * be explicitly set to falsy values to render nothing.
   *
   * - If `null` or `undefined` or `false`, this component will render nothing.
   * - If given an IconName string literal, it will render the corresponding Evergreen icon
   * - If given a valid React element reference, it will be rendered with the other icon props
   * - Any other value will be returned as a pass-through (as if you didn't use `<Icon />`)
   */
  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element, PropTypes.string]).isRequired,

  /**
   * Size of the icon, in pixels.
   * Blueprint contains 16px and 20px SVG icon images,
   * and chooses the appropriate resolution based on this prop.
   */
  size: PropTypes.number.isRequired,

  /**
   * Description string.
   * Browsers usually render this as a tooltip on hover, whereas screen
   * readers will use it for aural feedback.
   * By default, this is set to the icon's name for accessibility.
   */
  title: PropTypes.string,

  /**
   * CSS style properties.
   */
  style: PropTypes.object
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pY29uL3NyYy9JY29uLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlByb3BUeXBlcyIsIlJlYWN0SXMiLCJJY29uRXhwb3J0cyIsIkljb25OYW1lTWFwcGVyIiwiaWNvbnMiLCJJY29uIiwicHJvcHMiLCJpY29uIiwiaWNvblByb3BzIiwiaWNvbk5hbWUiLCJDb21wb25lbnQiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc1ZhbGlkRWxlbWVudCIsImNsb25lRWxlbWVudCIsImNvbG9yIiwic3RyaW5nIiwib25lT2ZUeXBlIiwiZWxlbWVudFR5cGUiLCJlbGVtZW50IiwiaXNSZXF1aXJlZCIsInNpemUiLCJudW1iZXIiLCJ0aXRsZSIsInN0eWxlIiwib2JqZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsT0FBT0EsS0FBUCxJQUFnQkMsYUFBaEIsUUFBcUMsT0FBckM7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLFlBQXRCO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixVQUFwQjtBQUNBLE9BQU8sS0FBS0MsV0FBWixNQUE2QixhQUE3Qjs7SUFFUUMsYyxHQUE2QkQsVyxDQUE3QkMsYztJQUFtQkMsSyw0QkFBVUYsVzs7QUFFckMsV0FBYUcsSUFBYjtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBLDZCQStDVztBQUFBLHdCQUN3QixLQUFLQyxLQUQ3QjtBQUFBLFVBQ0NDLElBREQsZUFDQ0EsSUFERDtBQUFBLFVBQ1VDLFNBRFY7O0FBR1AsVUFBSSxDQUFDRCxJQUFMLEVBQVc7QUFDVCxlQUFPLElBQVA7QUFDRDs7QUFFRCxVQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDNUIsWUFBTUUsUUFBUSxHQUFHTixjQUFjLENBQUNJLElBQUQsQ0FBZCxJQUF3QixFQUF6QztBQUNBLFlBQU1HLFNBQVMsR0FBR04sS0FBSyxDQUFDSyxRQUFELENBQXZCOztBQUNBLFlBQUlDLFNBQUosRUFBZTtBQUNiLGlCQUFPLG9CQUFDLFNBQUQsRUFBZUYsU0FBZixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJUCxPQUFPLENBQUNVLGtCQUFSLENBQTJCSixJQUEzQixDQUFKLEVBQXNDO0FBQ3BDLFlBQU1HLFVBQVMsR0FBR0gsSUFBbEI7QUFDQSxlQUFPLG9CQUFDLFVBQUQsRUFBZUMsU0FBZixDQUFQO0FBQ0Q7O0FBRUQsVUFBSVYsS0FBSyxDQUFDYyxjQUFOLENBQXFCTCxJQUFyQixDQUFKLEVBQWdDO0FBQzlCLGVBQU9ULEtBQUssQ0FBQ2UsWUFBTixDQUFtQk4sSUFBbkIsRUFBeUJDLFNBQXpCLENBQVA7QUFDRDs7QUFFRCxhQUFPRCxJQUFQO0FBQ0Q7QUF4RUg7O0FBQUE7QUFBQSxFQUEwQlIsYUFBMUI7QUFBYU0sSTs7Z0JBQUFBLEksbUJBQ1ksRTs7Z0JBRFpBLEksZ0JBRVMsRTs7Z0JBRlRBLEksZUFJUTtBQUNqQjs7O0FBR0FTLEVBQUFBLEtBQUssRUFBRWQsU0FBUyxDQUFDZSxNQUpBOztBQU1qQjs7Ozs7Ozs7OztBQVVBUixFQUFBQSxJQUFJLEVBQUVQLFNBQVMsQ0FBQ2dCLFNBQVYsQ0FBb0IsQ0FDeEJoQixTQUFTLENBQUNpQixXQURjLEVBRXhCakIsU0FBUyxDQUFDa0IsT0FGYyxFQUd4QmxCLFNBQVMsQ0FBQ2UsTUFIYyxDQUFwQixFQUlISSxVQXBCYzs7QUFzQmpCOzs7OztBQUtBQyxFQUFBQSxJQUFJLEVBQUVwQixTQUFTLENBQUNxQixNQUFWLENBQWlCRixVQTNCTjs7QUE2QmpCOzs7Ozs7QUFNQUcsRUFBQUEsS0FBSyxFQUFFdEIsU0FBUyxDQUFDZSxNQW5DQTs7QUFxQ2pCOzs7QUFHQVEsRUFBQUEsS0FBSyxFQUFFdkIsU0FBUyxDQUFDd0I7QUF4Q0EsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgUmVhY3RJcyBmcm9tICdyZWFjdC1pcydcbmltcG9ydCAqIGFzIEljb25FeHBvcnRzIGZyb20gJy4uLy4uL2ljb25zJ1xuXG5jb25zdCB7IEljb25OYW1lTWFwcGVyLCAuLi5pY29ucyB9ID0gSWNvbkV4cG9ydHNcblxuZXhwb3J0IGNsYXNzIEljb24gZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGljIFNJWkVfU1RBTkRBUkQgPSAxNlxuICBzdGF0aWMgU0laRV9MQVJHRSA9IDIwXG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiBpY29uLiBFcXVpdmFsZW50IHRvIHNldHRpbmcgQ1NTIGBmaWxsYCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIE5hbWUgb2YgdGhlIGljb24sIG9yIGFuIGljb24gZWxlbWVudCB0byByZW5kZXIuXG4gICAgICogVGhpcyBwcm9wIGlzIHJlcXVpcmVkIGJlY2F1c2UgaXQgZGV0ZXJtaW5lcyB0aGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBidXQgaXQgY2FuXG4gICAgICogYmUgZXhwbGljaXRseSBzZXQgdG8gZmFsc3kgdmFsdWVzIHRvIHJlbmRlciBub3RoaW5nLlxuICAgICAqXG4gICAgICogLSBJZiBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgb3IgYGZhbHNlYCwgdGhpcyBjb21wb25lbnQgd2lsbCByZW5kZXIgbm90aGluZy5cbiAgICAgKiAtIElmIGdpdmVuIGFuIEljb25OYW1lIHN0cmluZyBsaXRlcmFsLCBpdCB3aWxsIHJlbmRlciB0aGUgY29ycmVzcG9uZGluZyBFdmVyZ3JlZW4gaWNvblxuICAgICAqIC0gSWYgZ2l2ZW4gYSB2YWxpZCBSZWFjdCBlbGVtZW50IHJlZmVyZW5jZSwgaXQgd2lsbCBiZSByZW5kZXJlZCB3aXRoIHRoZSBvdGhlciBpY29uIHByb3BzXG4gICAgICogLSBBbnkgb3RoZXIgdmFsdWUgd2lsbCBiZSByZXR1cm5lZCBhcyBhIHBhc3MtdGhyb3VnaCAoYXMgaWYgeW91IGRpZG4ndCB1c2UgYDxJY29uIC8+YClcbiAgICAgKi9cbiAgICBpY29uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICAgIFByb3BUeXBlcy5lbGVtZW50LFxuICAgICAgUHJvcFR5cGVzLnN0cmluZ1xuICAgIF0pLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBTaXplIG9mIHRoZSBpY29uLCBpbiBwaXhlbHMuXG4gICAgICogQmx1ZXByaW50IGNvbnRhaW5zIDE2cHggYW5kIDIwcHggU1ZHIGljb24gaW1hZ2VzLFxuICAgICAqIGFuZCBjaG9vc2VzIHRoZSBhcHByb3ByaWF0ZSByZXNvbHV0aW9uIGJhc2VkIG9uIHRoaXMgcHJvcC5cbiAgICAgKi9cbiAgICBzaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvbiBzdHJpbmcuXG4gICAgICogQnJvd3NlcnMgdXN1YWxseSByZW5kZXIgdGhpcyBhcyBhIHRvb2x0aXAgb24gaG92ZXIsIHdoZXJlYXMgc2NyZWVuXG4gICAgICogcmVhZGVycyB3aWxsIHVzZSBpdCBmb3IgYXVyYWwgZmVlZGJhY2suXG4gICAgICogQnkgZGVmYXVsdCwgdGhpcyBpcyBzZXQgdG8gdGhlIGljb24ncyBuYW1lIGZvciBhY2Nlc3NpYmlsaXR5LlxuICAgICAqL1xuICAgIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgLyoqXG4gICAgICogQ1NTIHN0eWxlIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGljb24sIC4uLmljb25Qcm9wcyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgaWYgKCFpY29uKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaWNvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGljb25OYW1lID0gSWNvbk5hbWVNYXBwZXJbaWNvbl0gfHwgJydcbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGljb25zW2ljb25OYW1lXVxuICAgICAgaWYgKENvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gPENvbXBvbmVudCB7Li4uaWNvblByb3BzfSAvPlxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShpY29uKSkge1xuICAgICAgY29uc3QgQ29tcG9uZW50ID0gaWNvblxuICAgICAgcmV0dXJuIDxDb21wb25lbnQgey4uLmljb25Qcm9wc30gLz5cbiAgICB9XG5cbiAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoaWNvbikpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoaWNvbiwgaWNvblByb3BzKVxuICAgIH1cblxuICAgIHJldHVybiBpY29uXG4gIH1cbn1cbiJdfQ==